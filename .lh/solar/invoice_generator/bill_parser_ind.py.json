{
    "sourceFile": "solar/invoice_generator/bill_parser_ind.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1733161948759,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1733161948759,
            "name": "Commit-0",
            "content": "import datetime\nfrom bs4 import BeautifulSoup\n\ndef generate_year_data(issue_date_str):\n    months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n              \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n    try:\n        # Parse the issue date. Example: \"11 NOV 24\"\n        issue_date = datetime.datetime.strptime(issue_date_str, \"%d %b %y\")\n        start_month_index = issue_date.month - 1\n        start_year = issue_date.year - 1\n        year_data = []\n\n        for i in range(12):\n            month = months[(start_month_index + i) % 12]\n            year = start_year if (start_month_index + i) < 12 else start_year + 1\n            year_data.append(f\"{month}{year % 100:02d}\")\n\n        return year_data\n    except Exception as e:\n        print(f\"Error generating year data: {e}\")\n        return []\n\ndef extract_monthly_units(soup, year_data):\n    try:\n        # Locate all tables and find the one containing the monthly data\n        tables = soup.find_all(\"table\")\n        target_table = None\n        \n        for table in tables:\n            headers = [td.get_text(strip=True).upper() for td in table.find_all(\"td\")]\n            #print(f\"Headers found: {headers}\")  # Debug: Print headers to verify structure\n            \n            # Check if the table has months and KWH UNITS columns\n            if \"MONTH\" in headers and \"KWH UNITS\" in headers:\n                target_table = table\n                break\n\n        if not target_table:\n            #print(\"Monthly units table not found.\")\n            return {month: \"0\" for month in year_data}\n\n        # Extract rows from the table\n        rows = target_table.find_all(\"tr\")\n        monthly_units = {}\n\n        # Debugging: Print all rows to understand the table structure\n        #print(\"Table rows:\")\n        #for row in rows:\n            #print([td.get_text(strip=True) for td in row.find_all(\"td\")])\n\n        # Iterate over the rows (skip the header row)\n        for row in rows[1:]:\n            cells = row.find_all(\"td\")\n            # Check if the row has the expected number of columns (MONTH, MDI, KWH UNITS, etc.)\n            if len(cells) >= 3:\n                # Extract the month column (0th index)\n                month_text = cells[0].get_text(strip=True).upper()\n                if len(month_text) >= 5:  # Check if month is in the expected format (e.g., Nov23)\n                    # Normalize month format (e.g., NOV23 becomes Nov23)\n                    month = month_text[:3].capitalize() + month_text[-2:]\n\n                    # Now find the index of the month in year_data\n                    if month in year_data:\n                        month_index = year_data.index(month)\n                        \n                        # Extract the corresponding KWH UNITS (2 columns after the month)\n                        if len(cells) > 2:\n                            units = cells[2].get_text(strip=True)\n                            monthly_units[month] = units if units.isdigit() else \"0\"\n\n        print(f\"Extracted Monthly Units: {monthly_units}\")\n\n        # Ensure all months in year_data are covered\n        return {month: monthly_units.get(month, \"0\") for month in year_data}\n    \n    except Exception as e:\n        print(f\"Error extracting monthly units: {e}\")\n        return {month: \"0\" for month in year_data}\n\n\n\ndef parse_electricity_bill_industrial(html_content):\n    soup = BeautifulSoup(html_content, \"html.parser\")\n\n    name_section = soup.find(string=lambda s: \"NAME & ADDRESS\" in s if s else False)\n    name = name_section.find_next(\"td\").get_text(strip=True).replace(\"\\n\", \"\") if name_section else \"Not Found\"\n\n    print(f\"Name extracted: {name}\")\n\n    # Extract Payable Within Due Date\n    payable_due_date = \"Not Found\"\n    payable_section = soup.find(string=lambda s: \"PAYABLE WITHIN DUE DATE\" in s if s else False)\n    if payable_section:\n        parent_td = payable_section.find_parent(\"td\")\n        if parent_td:\n            payable_due_date = parent_td.find_next_sibling(\"td\").get_text(strip=True)\n    else:\n        print(\"Payable Within Due Date section not found\")\n\n    print(f\"Payable Within Due Date extracted: {payable_due_date}\")\n\n    # Extract Units Consumed (Current month)\n    units_consumed = \"Not Found\"\n    units_section = soup.find(string=lambda s: \"UNITS CONSUMED\" in s if s else False)\n    if units_section:\n        # The units consumed is in 'b' tag inside the 'td'\n        parent_td = units_section.find_parent(\"td\")\n        if parent_td:\n            b_tag = parent_td.find(\"b\")\n            if b_tag:\n                units_consumed = b_tag.get_text(strip=True)\n    else:\n        print(\"Units Consumed section not found\")\n\n    print(f\"Units Consumed extracted: {units_consumed}\")\n\n    # Locate the header row containing \"ISSUE DATE\" and \"DUE DATE\"\n    issue_date = \"Not Found\"\n    due_date = \"Not Found\"\n    header_row = None\n    for tr in soup.find_all(\"tr\"):\n        tds = tr.find_all(\"td\")\n        texts = [td.get_text(strip=True).upper() for td in tds]\n        if \"ISSUE DATE\" in texts and \"DUE DATE\" in texts:\n            header_row = tr\n            print(f\"Header row found: {texts}\")\n            break\n\n    if header_row:\n        data_row = header_row.find_next_sibling(\"tr\")\n        if data_row:\n            data_tds = data_row.find_all(\"td\")\n            header_texts = [td.get_text(strip=True).upper() for td in header_row.find_all(\"td\")]\n            try:\n                issue_idx = header_texts.index(\"ISSUE DATE\")\n                due_idx = header_texts.index(\"DUE DATE\")\n                if len(data_tds) > due_idx:\n                    issue_date = data_tds[issue_idx].get_text(strip=True)\n                    due_date = data_tds[due_idx].get_text(strip=True)\n            except ValueError as e:\n                print(f\"Error finding column indices: {e}\")\n    else:\n        print(\"Header row with ISSUE DATE and DUE DATE not found\")\n\n\n    print(f\"Issue Date extracted: {issue_date}, Due Date extracted: {due_date}\")\n\n    # Extract Subdivision\n    subdivision = \"Not Found\"\n    subdivision_section = soup.find(string=lambda s: \"SUB DIVISION\" in s if s else False)\n    if subdivision_section:\n        parent_td = subdivision_section.find_parent(\"td\")\n        if parent_td:\n            subdivision = parent_td.find_next_sibling(\"td\").get_text(strip=True)\n    else:\n        print(\"Subdivision section not found\")\n\n    print(f\"Subdivision extracted: {subdivision}\")\n\n    # Generate Year Data\n    year_data = generate_year_data(issue_date)\n    print(f\"Year Data generated: {year_data}\")\n\n    # Extract Monthly Units\n    monthly_units = extract_monthly_units(soup, year_data)\n\n    # Extract Total Yearly Units and Max Units\n    try:\n        total_yearly_units = sum(int(units) for units in monthly_units.values())\n    except ValueError as e:\n        print(f\"Error converting units to int: {e}\")\n        total_yearly_units = 0\n\n    try:\n        max_units = max(int(units) for units in monthly_units.values()) if monthly_units else 0\n    except ValueError as e:\n        print(f\"Error converting units to int: {e}\")\n        max_units = 0\n    except Exception as e:\n        print(f\"Error calculating max units: {e}\")\n        max_units = 0\n\n    # Construct the result\n    result = {\n        \"Name\": name,\n        \"Payable Within Due Date\": payable_due_date,\n        \"Units Consumed\": units_consumed,\n        \"Issue Date\": issue_date,\n        \"Due Date\": due_date,\n        \"Monthly Units\": monthly_units,\n        \"Total Yearly Units\": total_yearly_units,\n        \"Max Units\": max_units,\n    }\n\n    return result\n\n# Example Usage:\nif __name__ == \"__main__\":\n    with open(\"text.txt\", \"r\", encoding=\"utf-8\") as file:\n        html_content = file.read()\n    result = parse_electricity_bill(html_content)\n    print(result)\n"
        }
    ]
}