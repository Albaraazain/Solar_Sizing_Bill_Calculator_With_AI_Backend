{
    "sourceFile": "solar/views/customer_views.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1733431252855,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1733431252855,
            "name": "Commit-0",
            "content": "# solar/views/customer_views.py\r\nimport logging\r\nfrom rest_framework.views import APIView\r\nfrom rest_framework.response import Response\r\nfrom rest_framework import status\r\nfrom django.conf import settings\r\n\r\nfrom ..services.customer_service import CustomerService\r\nfrom ..middleware.error_handler import AppError\r\n\r\nlogger = logging.getLogger(__name__)\r\n\r\nclass CustomerListAPIView(APIView):\r\n    \"\"\"API endpoint for listing and creating customers.\"\"\"\r\n    \r\n    def get(self, request):\r\n        \"\"\"Get paginated list of customers with optional filtering.\"\"\"\r\n        try:\r\n            search = request.query_params.get('search')\r\n            page = int(request.query_params.get('page', 1))\r\n            page_size = int(request.query_params.get('page_size', 10))\r\n            sort_by = request.query_params.get('sort_by', '-date')\r\n\r\n            response = CustomerService.get_customers(\r\n                search_query=search,\r\n                page=page,\r\n                page_size=page_size,\r\n                sort_by=sort_by\r\n            )\r\n            return Response(response)\r\n\r\n        except ValueError as e:\r\n            return Response({\r\n                'success': False,\r\n                'error': {\r\n                    'message': 'Invalid pagination parameters',\r\n                    'code': 'VALIDATION_ERROR',\r\n                    'data': {'detail': str(e)}\r\n                }\r\n            }, status=status.HTTP_400_BAD_REQUEST)\r\n        except Exception as e:\r\n            logger.exception(\"Unexpected error fetching customers\")\r\n            return Response({\r\n                'success': False,\r\n                'error': {\r\n                    'message': 'An unexpected error occurred',\r\n                    'code': 'SERVER_ERROR',\r\n                    'data': {'detail': str(e)} if settings.DEBUG else {}\r\n                }\r\n            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\r\n\r\n    def post(self, request):\r\n        \"\"\"Create a new customer.\"\"\"\r\n        try:\r\n            response = CustomerService.add_customer(request.data)\r\n            return Response(response, status=status.HTTP_201_CREATED)\r\n\r\n        except AppError as e:\r\n            logger.warning(f\"Customer creation failed: {str(e)}\")\r\n            return Response({\r\n                'success': False,\r\n                'error': {\r\n                    'message': str(e),\r\n                    'code': e.code,\r\n                    'data': e.data\r\n                }\r\n            }, status=status.HTTP_400_BAD_REQUEST)\r\n        except Exception as e:\r\n            logger.exception(\"Unexpected error creating customer\")\r\n            return Response({\r\n                'success': False,\r\n                'error': {\r\n                    'message': 'An unexpected error occurred',\r\n                    'code': 'SERVER_ERROR',\r\n                    'data': {'detail': str(e)} if settings.DEBUG else {}\r\n                }\r\n            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\r\n\r\nclass CustomerDetailAPIView(APIView):\r\n    \"\"\"API endpoint for retrieving and updating specific customers.\"\"\"\r\n    \r\n    def get(self, request, reference_number):\r\n        \"\"\"Get customer details by reference number.\"\"\"\r\n        try:\r\n            response = CustomerService.get_customer_by_reference(reference_number)\r\n            return Response(response)\r\n\r\n        except AppError as e:\r\n            logger.warning(f\"Customer fetch failed: {str(e)}\")\r\n            return Response({\r\n                'success': False,\r\n                'error': {\r\n                    'message': str(e),\r\n                    'code': e.code,\r\n                    'data': e.data\r\n                }\r\n            }, status=status.HTTP_400_BAD_REQUEST)\r\n        except Exception as e:\r\n            logger.exception(\"Unexpected error fetching customer\")\r\n            return Response({\r\n                'success': False,\r\n                'error': {\r\n                    'message': 'An unexpected error occurred',\r\n                    'code': 'SERVER_ERROR',\r\n                    'data': {'detail': str(e)} if settings.DEBUG else {}\r\n                }\r\n            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\r\n\r\n    def put(self, request, reference_number):\r\n        \"\"\"Update customer details.\"\"\"\r\n        try:\r\n            customer = CustomerService.get_customer_by_reference(reference_number)\r\n            response = CustomerService.update_customer(\r\n                customer['data']['id'],\r\n                request.data\r\n            )\r\n            return Response(response)\r\n\r\n        except AppError as e:\r\n            logger.warning(f\"Customer update failed: {str(e)}\")\r\n            return Response({\r\n                'success': False,\r\n                'error': {\r\n                    'message': str(e),\r\n                    'code': e.code,\r\n                    'data': e.data\r\n                }\r\n            }, status=status.HTTP_400_BAD_REQUEST)\r\n        except Exception as e:\r\n            logger.exception(\"Unexpected error updating customer\")\r\n            return Response({\r\n                'success': False,\r\n                'error': {\r\n                    'message': 'An unexpected error occurred',\r\n                    'code': 'SERVER_ERROR',\r\n                    'data': {'detail': str(e)} if settings.DEBUG else {}\r\n                }\r\n            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\r\n\r\nclass CustomerBulkCreateAPIView(APIView):\r\n    \"\"\"API endpoint for bulk creating customers.\"\"\"\r\n    \r\n    def post(self, request):\r\n        try:\r\n            customers_data = request.data.get('customers')\r\n            if not customers_data:\r\n                raise AppError(\r\n                    message='Customers data is required',\r\n                    code='VALIDATION_ERROR'\r\n                )\r\n\r\n            response = CustomerService.bulk_create_customers(customers_data)\r\n            return Response(response, status=status.HTTP_201_CREATED)\r\n\r\n        except AppError as e:\r\n            logger.warning(f\"Bulk customer creation failed: {str(e)}\")\r\n            return Response({\r\n                'success': False,\r\n                'error': {\r\n                    'message': str(e),\r\n                    'code': e.code,\r\n                    'data': e.data\r\n                }\r\n            }, status=status.HTTP_400_BAD_REQUEST)\r\n        except Exception as e:\r\n            logger.exception(\"Unexpected error in bulk customer creation\")\r\n            return Response({\r\n                'success': False,\r\n                'error': {\r\n                    'message': 'An unexpected error occurred',\r\n                    'code': 'SERVER_ERROR',\r\n                    'data': {'detail': str(e)} if settings.DEBUG else {}\r\n                }\r\n            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\r\n\r\nclass CustomerStatsAPIView(APIView):\r\n    \"\"\"API endpoint for customer statistics.\"\"\"\r\n    \r\n    def get(self, request):\r\n        try:\r\n            response = CustomerService.get_customer_stats()\r\n            return Response(response)\r\n\r\n        except AppError as e:\r\n            logger.warning(f\"Customer stats fetch failed: {str(e)}\")\r\n            return Response({\r\n                'success': False,\r\n                'error': {\r\n                    'message': str(e),\r\n                    'code': e.code,\r\n                    'data': e.data\r\n                }\r\n            }, status=status.HTTP_400_BAD_REQUEST)\r\n        except Exception as e:\r\n            logger.exception(\"Unexpected error fetching customer stats\")\r\n            return Response({\r\n                'success': False,\r\n                'error': {\r\n                    'message': 'An unexpected error occurred',\r\n                    'code': 'SERVER_ERROR',\r\n                    'data': {'detail': str(e)} if settings.DEBUG else {}\r\n                }\r\n            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)"
        }
    ]
}