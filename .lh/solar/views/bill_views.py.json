{
    "sourceFile": "solar/views/bill_views.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1733408119509,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733411391386,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,17 +1,14 @@\n+# solar/views/bill_views.py\r\n import logging\r\n from rest_framework.views import APIView\r\n from rest_framework.response import Response\r\n from rest_framework import status\r\n from django.conf import settings\r\n-from ..invoice_generator.bill_verify import verify_bill\r\n-from ..invoice_generator.bill_parser_ind import parse_electricity_bill_industrial\r\n-from ..invoice_generator.bill_parser_gen import parse_electricity_bill_general\r\n-from ..middleware.error_handler import AppError, ErrorTypes\r\n-import requests\r\n-from bs4 import BeautifulSoup\r\n-import math\r\n \r\n+from ..services.bill_service import BillService\r\n+from ..middleware.error_handler import AppError\r\n+\r\n logger = logging.getLogger(__name__)\r\n \r\n class BillValidateAPIView(APIView):\r\n     \"\"\"API endpoint to validate electricity bill reference numbers.\"\"\"\r\n@@ -22,39 +19,37 @@\n             \r\n             if not reference_number:\r\n                 raise AppError(\r\n                     message='Reference number is required',\r\n-                    code=ErrorTypes.VALIDATION_ERROR,\r\n+                    code='VALIDATION_ERROR',\r\n                     data={'field': 'reference_number'}\r\n                 )\r\n \r\n-            result = verify_bill(reference_number)\r\n-            if not result['exists']:\r\n-                raise AppError(\r\n-                    message='Bill not found',\r\n-                    code=ErrorTypes.NOT_FOUND,\r\n-                    data={'reference_number': reference_number}\r\n-                )\r\n-            \r\n+            # Use BillService to validate\r\n+            response = BillService.validate_bill(reference_number)\r\n+            return Response(response)\r\n+\r\n+        except AppError as e:\r\n+            logger.warning(f\"Bill validation failed: {str(e)}\")\r\n             return Response({\r\n-                'success': True,\r\n-                'data': {\r\n-                    'isValid': True,\r\n-                    'referenceNumber': reference_number,\r\n-                    'message': 'Bill validation successful',\r\n-                    'source_url': result.get('source_url', '')\r\n+                'success': False,\r\n+                'error': {\r\n+                    'message': str(e),\r\n+                    'code': e.code,\r\n+                    'data': e.data\r\n                 }\r\n-            })\r\n-\r\n-        except AppError:\r\n-            raise\r\n+            }, status=status.HTTP_400_BAD_REQUEST)\r\n+        \r\n         except Exception as e:\r\n-            logger.exception('Unexpected error in bill validation')\r\n-            raise AppError(\r\n-                message='Failed to validate bill',\r\n-                code=ErrorTypes.SERVER_ERROR,\r\n-                data={'original_error': str(e)} if settings.DEBUG else {}\r\n-            )\r\n+            logger.exception(\"Unexpected error in bill validation\")\r\n+            return Response({\r\n+                'success': False,\r\n+                'error': {\r\n+                    'message': 'An unexpected error occurred',\r\n+                    'code': 'SERVER_ERROR',\r\n+                    'data': {'detail': str(e)} if settings.DEBUG else {}\r\n+                }\r\n+            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\r\n \r\n class BillDetailsAPIView(APIView):\r\n     \"\"\"API endpoint to fetch electricity bill details.\"\"\"\r\n     \r\n@@ -62,72 +57,37 @@\n         try:\r\n             if not reference_number:\r\n                 raise AppError(\r\n                     message='Reference number is required',\r\n-                    code=ErrorTypes.VALIDATION_ERROR\r\n+                    code='VALIDATION_ERROR'\r\n                 )\r\n \r\n-            status_result = verify_bill(reference_number)\r\n-            if not status_result['exists']:\r\n-                raise AppError(\r\n-                    message='Bill not found',\r\n-                    code=ErrorTypes.NOT_FOUND,\r\n-                    data={'reference_number': reference_number}\r\n-                )\r\n+            # Use BillService to get details\r\n+            response = BillService.get_bill_details(reference_number)\r\n+            return Response(response)\r\n \r\n-            # Fetch bill HTML content\r\n-            url = f\"{status_result['source_url']}?refno={reference_number}\"\r\n-            try:\r\n-                response = requests.get(url)\r\n-                response.raise_for_status()\r\n-                html_content = response.text\r\n-            except requests.RequestException as e:\r\n-                raise AppError(\r\n-                    message='Failed to fetch bill data',\r\n-                    code=ErrorTypes.NETWORK_ERROR,\r\n-                    data={'error': str(e)}\r\n-                )\r\n-\r\n-            # Parse bill based on type\r\n-            parser = parse_electricity_bill_industrial if status_result['source_url'].endswith('industrial') \\\r\n-                    else parse_electricity_bill_general\r\n-            bill_data = parser(html_content)\r\n-\r\n-            # Calculate system sizes\r\n-            yearly_units = int(bill_data['Total Yearly Units'])\r\n-            daily_avg = yearly_units / 365\r\n-            system_size_kw = daily_avg / 4\r\n-\r\n-            # Enhance response data\r\n-            enhanced_data = {\r\n-                **bill_data,\r\n-                \"customerName\": bill_data.get(\"Name\", \"\"),\r\n-                \"unitsConsumed\": int(bill_data.get(\"Units Consumed\", 0)),\r\n-                \"dueDate\": bill_data.get(\"Due Date\", \"\"),\r\n-                \"issueDate\": bill_data.get(\"Issue Date\", \"\"),\r\n-                \"amount\": float(bill_data.get(\"Payable Within Due Date\", \"0\").replace(\"PKR \", \"\").replace(\",\", \"\")),\r\n-                \"systemSizing\": {\r\n-                    \"recommended\": math.ceil(system_size_kw * 1.5),\r\n-                    \"smaller\": math.ceil(system_size_kw * 1.3),\r\n-                    \"larger\": math.ceil(system_size_kw * 1.7)\r\n+        except AppError as e:\r\n+            logger.warning(f\"Bill details fetch failed: {str(e)}\")\r\n+            return Response({\r\n+                'success': False,\r\n+                'error': {\r\n+                    'message': str(e),\r\n+                    'code': e.code,\r\n+                    'data': e.data\r\n                 }\r\n-            }\r\n-\r\n+            }, status=status.HTTP_400_BAD_REQUEST)\r\n+            \r\n+        except Exception as e:\r\n+            logger.exception(\"Unexpected error fetching bill details\")\r\n             return Response({\r\n-                \"success\": True,\r\n-                \"data\": enhanced_data\r\n-            })\r\n+                'success': False,\r\n+                'error': {\r\n+                    'message': 'An unexpected error occurred',\r\n+                    'code': 'SERVER_ERROR',\r\n+                    'data': {'detail': str(e)} if settings.DEBUG else {}\r\n+                }\r\n+            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\r\n \r\n-        except AppError:\r\n-            raise\r\n-        except Exception as e:\r\n-            logger.exception('Error fetching bill details')\r\n-            raise AppError(\r\n-                message='Failed to fetch bill details',\r\n-                code=ErrorTypes.SERVER_ERROR,\r\n-                data={'original_error': str(e)} if settings.DEBUG else {}\r\n-            )\r\n-\r\n class BillAnalyzeAPIView(APIView):\r\n     \"\"\"API endpoint to analyze electricity bill consumption patterns.\"\"\"\r\n     \r\n     def post(self, request):\r\n@@ -136,64 +96,32 @@\n             \r\n             if not reference_number:\r\n                 raise AppError(\r\n                     message='Reference number is required',\r\n-                    code=ErrorTypes.VALIDATION_ERROR\r\n+                    code='VALIDATION_ERROR'\r\n                 )\r\n \r\n-            status_result = verify_bill(reference_number)\r\n-            if not status_result['exists']:\r\n-                raise AppError(\r\n-                    message='Bill not found',\r\n-                    code=ErrorTypes.NOT_FOUND\r\n-                )\r\n+            # Use BillService to analyze\r\n+            response = BillService.analyze_bill(reference_number)\r\n+            return Response(response)\r\n \r\n-            url = f\"{status_result['source_url']}?refno={reference_number}\"\r\n-            response = requests.get(url)\r\n-            parser = parse_electricity_bill_industrial if status_result['source_url'].endswith('industrial') \\\r\n-                    else parse_electricity_bill_general\r\n-            bill_data = parser(response.text)\r\n-\r\n-            # Perform analysis\r\n-            yearly_units = int(bill_data['Total Yearly Units'])\r\n-            monthly_avg = yearly_units / 12\r\n-            daily_avg = yearly_units / 365\r\n-\r\n-            analysis_data = {\r\n-                \"consumption\": {\r\n-                    \"daily\": round(daily_avg, 2),\r\n-                    \"monthly\": round(monthly_avg, 2),\r\n-                    \"yearly\": yearly_units,\r\n-                    \"peak\": int(bill_data.get('Max Units', 0))\r\n-                },\r\n-                \"systemSize\": {\r\n-                    \"recommended\": round(daily_avg / 4 * 1.5, 2),\r\n-                    \"range\": {\r\n-                        \"min\": round(daily_avg / 4 * 1.3, 2),\r\n-                        \"max\": round(daily_avg / 4 * 1.7, 2)\r\n-                    }\r\n-                },\r\n-                \"savings\": {\r\n-                    \"monthly\": round(monthly_avg * 20),  # Assuming PKR 20 per unit\r\n-                    \"yearly\": round(yearly_units * 20),\r\n-                    \"paybackPeriod\": 4.5  # This should be calculated based on actual costs\r\n-                },\r\n-                \"environmental\": {\r\n-                    \"co2Reduction\": round(yearly_units * 0.0007, 2),  # Tons of CO2 per kWh\r\n-                    \"treesEquivalent\": round(yearly_units * 0.0007 * 15)  # Trees needed to absorb the CO2\r\n+        except AppError as e:\r\n+            logger.warning(f\"Bill analysis failed: {str(e)}\")\r\n+            return Response({\r\n+                'success': False,\r\n+                'error': {\r\n+                    'message': str(e),\r\n+                    'code': e.code,\r\n+                    'data': e.data\r\n                 }\r\n-            }\r\n-\r\n+            }, status=status.HTTP_400_BAD_REQUEST)\r\n+            \r\n\\ No newline at end of file\n+        except Exception as e:\r\n+            logger.exception(\"Unexpected error analyzing bill\")\r\n             return Response({\r\n-                \"success\": True,\r\n-                \"data\": analysis_data\r\n-            })\r\n-\r\n-        except AppError:\r\n-            raise\r\n-        except Exception as e:\r\n-            logger.exception('Error analyzing bill')\r\n-            raise AppError(\r\n-                message='Failed to analyze bill',\r\n-                code=ErrorTypes.SERVER_ERROR,\r\n-                data={'original_error': str(e)} if settings.DEBUG else {}\r\n-            )\n+                'success': False,\r\n+                'error': {\r\n+                    'message': 'An unexpected error occurred',\r\n+                    'code': 'SERVER_ERROR',\r\n+                    'data': {'detail': str(e)} if settings.DEBUG else {}\r\n+                }\r\n+            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733433796153,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,5 +123,50 @@\n                     'message': 'An unexpected error occurred',\r\n                     'code': 'SERVER_ERROR',\r\n                     'data': {'detail': str(e)} if settings.DEBUG else {}\r\n                 }\r\n+            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\r\n+\r\n+class BillHistoryAPIView(APIView):\r\n+    \"\"\"API endpoint to retrieve bill history for a reference number.\"\"\"\r\n+    \r\n+    def get(self, request, reference_number=None):\r\n+        try:\r\n+            if not reference_number:\r\n+                raise AppError(\r\n+                    message='Reference number is required',\r\n+                    code='VALIDATION_ERROR',\r\n+                    data={'field': 'reference_number'}\r\n+                )\r\n+\r\n+            # First validate if the reference number is valid\r\n+            BillService.validate_bill(reference_number)\r\n+\r\n+            # Get bill history from service\r\n+            history = BillService.get_bill_history(reference_number)\r\n+            \r\n+            return Response({\r\n+                'success': True,\r\n+                'data': history\r\n+            })\r\n+\r\n+        except AppError as e:\r\n+            logger.warning(f\"Bill history fetch failed: {str(e)}\")\r\n+            return Response({\r\n+                'success': False,\r\n+                'error': {\r\n+                    'message': str(e),\r\n+                    'code': e.code,\r\n+                    'data': e.data\r\n+                }\r\n+            }, status=status.HTTP_400_BAD_REQUEST)\r\n+            \r\n+        except Exception as e:\r\n+            logger.exception(\"Unexpected error fetching bill history\")\r\n+            return Response({\r\n+                'success': False,\r\n+                'error': {\r\n+                    'message': 'An unexpected error occurred',\r\n+                    'code': 'SERVER_ERROR',\r\n+                    'data': {'detail': str(e)} if settings.DEBUG else {}\r\n+                }\r\n             }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733436338228,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,8 +13,10 @@\n class BillValidateAPIView(APIView):\r\n     \"\"\"API endpoint to validate electricity bill reference numbers.\"\"\"\r\n     \r\n     def post(self, request):\r\n+        logger.debug(f\"Received validation request: {request.data}\")\r\n+\r\n         try:\r\n             reference_number = request.data.get('reference_number')\r\n             \r\n             if not reference_number:\r\n"
                },
                {
                    "date": 1733436385994,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,11 +13,12 @@\n class BillValidateAPIView(APIView):\r\n     \"\"\"API endpoint to validate electricity bill reference numbers.\"\"\"\r\n     \r\n     def post(self, request):\r\n-        logger.debug(f\"Received validation request: {request.data}\")\r\n+        \r\n \r\n         try:\r\n+            logger.debug(f\"Received validation request: {request.data}\")\r\n             reference_number = request.data.get('reference_number')\r\n             \r\n             if not reference_number:\r\n                 raise AppError(\r\n"
                },
                {
                    "date": 1733436432261,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,175 @@\n+# solar/views/bill_views.py\r\n+import logging\r\n+from rest_framework.views import APIView\r\n+from rest_framework.response import Response\r\n+from rest_framework import status\r\n+from django.conf import settings\r\n+\r\n+from ..services.bill_service import BillService\r\n+from ..middleware.error_handler import AppError\r\n+\r\n+logger = logging.getLogger(__name__)\r\n+\r\n+class BillValidateAPIView(APIView):\r\n+    \"\"\"API endpoint to validate electricity bill reference numbers.\"\"\"\r\n+    \r\n+    def post(self, request):\r\n+        logger.debug(f\"Received validation request: {request.data}\")\r\n+\r\n+        try:\r\n+\r\n+            reference_number = request.data.get('reference_number')\r\n+            \r\n+            if not reference_number:\r\n+                raise AppError(\r\n+                    message='Reference number is required',\r\n+                    code='VALIDATION_ERROR',\r\n+                    data={'field': 'reference_number'}\r\n+                )\r\n+\r\n+            # Use BillService to validate\r\n+            response = BillService.validate_bill(reference_number)\r\n+            return Response(response)\r\n+\r\n+        except AppError as e:\r\n+            logger.warning(f\"Bill validation failed: {str(e)}\")\r\n+            return Response({\r\n+                'success': False,\r\n+                'error': {\r\n+                    'message': str(e),\r\n+                    'code': e.code,\r\n+                    'data': e.data\r\n+                }\r\n+            }, status=status.HTTP_400_BAD_REQUEST)\r\n+        \r\n+        except Exception as e:\r\n+            logger.exception(\"Unexpected error in bill validation\")\r\n+            return Response({\r\n+                'success': False,\r\n+                'error': {\r\n+                    'message': 'An unexpected error occurred',\r\n+                    'code': 'SERVER_ERROR',\r\n+                    'data': {'detail': str(e)} if settings.DEBUG else {}\r\n+                }\r\n+            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\r\n+\r\n+class BillDetailsAPIView(APIView):\r\n+    \"\"\"API endpoint to fetch electricity bill details.\"\"\"\r\n+    \r\n+    def get(self, request, reference_number=None):\r\n+        try:\r\n+            if not reference_number:\r\n+                raise AppError(\r\n+                    message='Reference number is required',\r\n+                    code='VALIDATION_ERROR'\r\n+                )\r\n+\r\n+            # Use BillService to get details\r\n+            response = BillService.get_bill_details(reference_number)\r\n+            return Response(response)\r\n+\r\n+        except AppError as e:\r\n+            logger.warning(f\"Bill details fetch failed: {str(e)}\")\r\n+            return Response({\r\n+                'success': False,\r\n+                'error': {\r\n+                    'message': str(e),\r\n+                    'code': e.code,\r\n+                    'data': e.data\r\n+                }\r\n+            }, status=status.HTTP_400_BAD_REQUEST)\r\n+            \r\n+        except Exception as e:\r\n+            logger.exception(\"Unexpected error fetching bill details\")\r\n+            return Response({\r\n+                'success': False,\r\n+                'error': {\r\n+                    'message': 'An unexpected error occurred',\r\n+                    'code': 'SERVER_ERROR',\r\n+                    'data': {'detail': str(e)} if settings.DEBUG else {}\r\n+                }\r\n+            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\r\n+\r\n+class BillAnalyzeAPIView(APIView):\r\n+    \"\"\"API endpoint to analyze electricity bill consumption patterns.\"\"\"\r\n+    \r\n+    def post(self, request):\r\n+        try:\r\n+            reference_number = request.data.get('reference_number')\r\n+            \r\n+            if not reference_number:\r\n+                raise AppError(\r\n+                    message='Reference number is required',\r\n+                    code='VALIDATION_ERROR'\r\n+                )\r\n+\r\n+            # Use BillService to analyze\r\n+            response = BillService.analyze_bill(reference_number)\r\n+            return Response(response)\r\n+\r\n+        except AppError as e:\r\n+            logger.warning(f\"Bill analysis failed: {str(e)}\")\r\n+            return Response({\r\n+                'success': False,\r\n+                'error': {\r\n+                    'message': str(e),\r\n+                    'code': e.code,\r\n+                    'data': e.data\r\n+                }\r\n+            }, status=status.HTTP_400_BAD_REQUEST)\r\n+            \r\n+        except Exception as e:\r\n+            logger.exception(\"Unexpected error analyzing bill\")\r\n+            return Response({\r\n+                'success': False,\r\n+                'error': {\r\n+                    'message': 'An unexpected error occurred',\r\n+                    'code': 'SERVER_ERROR',\r\n+                    'data': {'detail': str(e)} if settings.DEBUG else {}\r\n+                }\r\n+            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\r\n+\r\n+class BillHistoryAPIView(APIView):\r\n+    \"\"\"API endpoint to retrieve bill history for a reference number.\"\"\"\r\n+    \r\n+    def get(self, request, reference_number=None):\r\n+        try:\r\n+            if not reference_number:\r\n+                raise AppError(\r\n+                    message='Reference number is required',\r\n+                    code='VALIDATION_ERROR',\r\n+                    data={'field': 'reference_number'}\r\n+                )\r\n+\r\n+            # First validate if the reference number is valid\r\n+            BillService.validate_bill(reference_number)\r\n+\r\n+            # Get bill history from service\r\n+            history = BillService.get_bill_history(reference_number)\r\n+            \r\n+            return Response({\r\n+                'success': True,\r\n+                'data': history\r\n+            })\r\n+\r\n+        except AppError as e:\r\n+            logger.warning(f\"Bill history fetch failed: {str(e)}\")\r\n+            return Response({\r\n+                'success': False,\r\n+                'error': {\r\n+                    'message': str(e),\r\n+                    'code': e.code,\r\n+                    'data': e.data\r\n+                }\r\n+            }, status=status.HTTP_400_BAD_REQUEST)\r\n+            \r\n+        except Exception as e:\r\n+            logger.exception(\"Unexpected error fetching bill history\")\r\n+            return Response({\r\n+                'success': False,\r\n+                'error': {\r\n+                    'message': 'An unexpected error occurred',\r\n+                    'code': 'SERVER_ERROR',\r\n+                    'data': {'detail': str(e)} if settings.DEBUG else {}\r\n+                }\r\n+            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733437324541,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -171,180 +171,5 @@\n                     'message': 'An unexpected error occurred',\r\n                     'code': 'SERVER_ERROR',\r\n                     'data': {'detail': str(e)} if settings.DEBUG else {}\r\n                 }\r\n-            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n-# solar/views/bill_views.py\r\n-import logging\r\n-from rest_framework.views import APIView\r\n-from rest_framework.response import Response\r\n-from rest_framework import status\r\n-from django.conf import settings\r\n-\r\n-from ..services.bill_service import BillService\r\n-from ..middleware.error_handler import AppError\r\n-\r\n-logger = logging.getLogger(__name__)\r\n-\r\n-class BillValidateAPIView(APIView):\r\n-    \"\"\"API endpoint to validate electricity bill reference numbers.\"\"\"\r\n-    \r\n-    def post(self, request):\r\n-        \r\n-\r\n-        try:\r\n-            logger.debug(f\"Received validation request: {request.data}\")\r\n-            reference_number = request.data.get('reference_number')\r\n-            \r\n-            if not reference_number:\r\n-                raise AppError(\r\n-                    message='Reference number is required',\r\n-                    code='VALIDATION_ERROR',\r\n-                    data={'field': 'reference_number'}\r\n-                )\r\n-\r\n-            # Use BillService to validate\r\n-            response = BillService.validate_bill(reference_number)\r\n-            return Response(response)\r\n-\r\n-        except AppError as e:\r\n-            logger.warning(f\"Bill validation failed: {str(e)}\")\r\n-            return Response({\r\n-                'success': False,\r\n-                'error': {\r\n-                    'message': str(e),\r\n-                    'code': e.code,\r\n-                    'data': e.data\r\n-                }\r\n-            }, status=status.HTTP_400_BAD_REQUEST)\r\n-        \r\n-        except Exception as e:\r\n-            logger.exception(\"Unexpected error in bill validation\")\r\n-            return Response({\r\n-                'success': False,\r\n-                'error': {\r\n-                    'message': 'An unexpected error occurred',\r\n-                    'code': 'SERVER_ERROR',\r\n-                    'data': {'detail': str(e)} if settings.DEBUG else {}\r\n-                }\r\n-            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\r\n-\r\n-class BillDetailsAPIView(APIView):\r\n-    \"\"\"API endpoint to fetch electricity bill details.\"\"\"\r\n-    \r\n-    def get(self, request, reference_number=None):\r\n-        try:\r\n-            if not reference_number:\r\n-                raise AppError(\r\n-                    message='Reference number is required',\r\n-                    code='VALIDATION_ERROR'\r\n-                )\r\n-\r\n-            # Use BillService to get details\r\n-            response = BillService.get_bill_details(reference_number)\r\n-            return Response(response)\r\n-\r\n-        except AppError as e:\r\n-            logger.warning(f\"Bill details fetch failed: {str(e)}\")\r\n-            return Response({\r\n-                'success': False,\r\n-                'error': {\r\n-                    'message': str(e),\r\n-                    'code': e.code,\r\n-                    'data': e.data\r\n-                }\r\n-            }, status=status.HTTP_400_BAD_REQUEST)\r\n-            \r\n-        except Exception as e:\r\n-            logger.exception(\"Unexpected error fetching bill details\")\r\n-            return Response({\r\n-                'success': False,\r\n-                'error': {\r\n-                    'message': 'An unexpected error occurred',\r\n-                    'code': 'SERVER_ERROR',\r\n-                    'data': {'detail': str(e)} if settings.DEBUG else {}\r\n-                }\r\n-            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\r\n-\r\n-class BillAnalyzeAPIView(APIView):\r\n-    \"\"\"API endpoint to analyze electricity bill consumption patterns.\"\"\"\r\n-    \r\n-    def post(self, request):\r\n-        try:\r\n-            reference_number = request.data.get('reference_number')\r\n-            \r\n-            if not reference_number:\r\n-                raise AppError(\r\n-                    message='Reference number is required',\r\n-                    code='VALIDATION_ERROR'\r\n-                )\r\n-\r\n-            # Use BillService to analyze\r\n-            response = BillService.analyze_bill(reference_number)\r\n-            return Response(response)\r\n-\r\n-        except AppError as e:\r\n-            logger.warning(f\"Bill analysis failed: {str(e)}\")\r\n-            return Response({\r\n-                'success': False,\r\n-                'error': {\r\n-                    'message': str(e),\r\n-                    'code': e.code,\r\n-                    'data': e.data\r\n-                }\r\n-            }, status=status.HTTP_400_BAD_REQUEST)\r\n-            \r\n-        except Exception as e:\r\n-            logger.exception(\"Unexpected error analyzing bill\")\r\n-            return Response({\r\n-                'success': False,\r\n-                'error': {\r\n-                    'message': 'An unexpected error occurred',\r\n-                    'code': 'SERVER_ERROR',\r\n-                    'data': {'detail': str(e)} if settings.DEBUG else {}\r\n-                }\r\n-            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\r\n-\r\n-class BillHistoryAPIView(APIView):\r\n-    \"\"\"API endpoint to retrieve bill history for a reference number.\"\"\"\r\n-    \r\n-    def get(self, request, reference_number=None):\r\n-        try:\r\n-            if not reference_number:\r\n-                raise AppError(\r\n-                    message='Reference number is required',\r\n-                    code='VALIDATION_ERROR',\r\n-                    data={'field': 'reference_number'}\r\n-                )\r\n-\r\n-            # First validate if the reference number is valid\r\n-            BillService.validate_bill(reference_number)\r\n-\r\n-            # Get bill history from service\r\n-            history = BillService.get_bill_history(reference_number)\r\n-            \r\n-            return Response({\r\n-                'success': True,\r\n-                'data': history\r\n-            })\r\n-\r\n-        except AppError as e:\r\n-            logger.warning(f\"Bill history fetch failed: {str(e)}\")\r\n-            return Response({\r\n-                'success': False,\r\n-                'error': {\r\n-                    'message': str(e),\r\n-                    'code': e.code,\r\n-                    'data': e.data\r\n-                }\r\n-            }, status=status.HTTP_400_BAD_REQUEST)\r\n-            \r\n-        except Exception as e:\r\n-            logger.exception(\"Unexpected error fetching bill history\")\r\n-            return Response({\r\n-                'success': False,\r\n-                'error': {\r\n-                    'message': 'An unexpected error occurred',\r\n-                    'code': 'SERVER_ERROR',\r\n-                    'data': {'detail': str(e)} if settings.DEBUG else {}\r\n-                }\r\n             }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\\ No newline at end of file\n"
                }
            ],
            "date": 1733408119509,
            "name": "Commit-0",
            "content": "import logging\r\nfrom rest_framework.views import APIView\r\nfrom rest_framework.response import Response\r\nfrom rest_framework import status\r\nfrom django.conf import settings\r\nfrom ..invoice_generator.bill_verify import verify_bill\r\nfrom ..invoice_generator.bill_parser_ind import parse_electricity_bill_industrial\r\nfrom ..invoice_generator.bill_parser_gen import parse_electricity_bill_general\r\nfrom ..middleware.error_handler import AppError, ErrorTypes\r\nimport requests\r\nfrom bs4 import BeautifulSoup\r\nimport math\r\n\r\nlogger = logging.getLogger(__name__)\r\n\r\nclass BillValidateAPIView(APIView):\r\n    \"\"\"API endpoint to validate electricity bill reference numbers.\"\"\"\r\n    \r\n    def post(self, request):\r\n        try:\r\n            reference_number = request.data.get('reference_number')\r\n            \r\n            if not reference_number:\r\n                raise AppError(\r\n                    message='Reference number is required',\r\n                    code=ErrorTypes.VALIDATION_ERROR,\r\n                    data={'field': 'reference_number'}\r\n                )\r\n\r\n            result = verify_bill(reference_number)\r\n            if not result['exists']:\r\n                raise AppError(\r\n                    message='Bill not found',\r\n                    code=ErrorTypes.NOT_FOUND,\r\n                    data={'reference_number': reference_number}\r\n                )\r\n            \r\n            return Response({\r\n                'success': True,\r\n                'data': {\r\n                    'isValid': True,\r\n                    'referenceNumber': reference_number,\r\n                    'message': 'Bill validation successful',\r\n                    'source_url': result.get('source_url', '')\r\n                }\r\n            })\r\n\r\n        except AppError:\r\n            raise\r\n        except Exception as e:\r\n            logger.exception('Unexpected error in bill validation')\r\n            raise AppError(\r\n                message='Failed to validate bill',\r\n                code=ErrorTypes.SERVER_ERROR,\r\n                data={'original_error': str(e)} if settings.DEBUG else {}\r\n            )\r\n\r\nclass BillDetailsAPIView(APIView):\r\n    \"\"\"API endpoint to fetch electricity bill details.\"\"\"\r\n    \r\n    def get(self, request, reference_number=None):\r\n        try:\r\n            if not reference_number:\r\n                raise AppError(\r\n                    message='Reference number is required',\r\n                    code=ErrorTypes.VALIDATION_ERROR\r\n                )\r\n\r\n            status_result = verify_bill(reference_number)\r\n            if not status_result['exists']:\r\n                raise AppError(\r\n                    message='Bill not found',\r\n                    code=ErrorTypes.NOT_FOUND,\r\n                    data={'reference_number': reference_number}\r\n                )\r\n\r\n            # Fetch bill HTML content\r\n            url = f\"{status_result['source_url']}?refno={reference_number}\"\r\n            try:\r\n                response = requests.get(url)\r\n                response.raise_for_status()\r\n                html_content = response.text\r\n            except requests.RequestException as e:\r\n                raise AppError(\r\n                    message='Failed to fetch bill data',\r\n                    code=ErrorTypes.NETWORK_ERROR,\r\n                    data={'error': str(e)}\r\n                )\r\n\r\n            # Parse bill based on type\r\n            parser = parse_electricity_bill_industrial if status_result['source_url'].endswith('industrial') \\\r\n                    else parse_electricity_bill_general\r\n            bill_data = parser(html_content)\r\n\r\n            # Calculate system sizes\r\n            yearly_units = int(bill_data['Total Yearly Units'])\r\n            daily_avg = yearly_units / 365\r\n            system_size_kw = daily_avg / 4\r\n\r\n            # Enhance response data\r\n            enhanced_data = {\r\n                **bill_data,\r\n                \"customerName\": bill_data.get(\"Name\", \"\"),\r\n                \"unitsConsumed\": int(bill_data.get(\"Units Consumed\", 0)),\r\n                \"dueDate\": bill_data.get(\"Due Date\", \"\"),\r\n                \"issueDate\": bill_data.get(\"Issue Date\", \"\"),\r\n                \"amount\": float(bill_data.get(\"Payable Within Due Date\", \"0\").replace(\"PKR \", \"\").replace(\",\", \"\")),\r\n                \"systemSizing\": {\r\n                    \"recommended\": math.ceil(system_size_kw * 1.5),\r\n                    \"smaller\": math.ceil(system_size_kw * 1.3),\r\n                    \"larger\": math.ceil(system_size_kw * 1.7)\r\n                }\r\n            }\r\n\r\n            return Response({\r\n                \"success\": True,\r\n                \"data\": enhanced_data\r\n            })\r\n\r\n        except AppError:\r\n            raise\r\n        except Exception as e:\r\n            logger.exception('Error fetching bill details')\r\n            raise AppError(\r\n                message='Failed to fetch bill details',\r\n                code=ErrorTypes.SERVER_ERROR,\r\n                data={'original_error': str(e)} if settings.DEBUG else {}\r\n            )\r\n\r\nclass BillAnalyzeAPIView(APIView):\r\n    \"\"\"API endpoint to analyze electricity bill consumption patterns.\"\"\"\r\n    \r\n    def post(self, request):\r\n        try:\r\n            reference_number = request.data.get('reference_number')\r\n            \r\n            if not reference_number:\r\n                raise AppError(\r\n                    message='Reference number is required',\r\n                    code=ErrorTypes.VALIDATION_ERROR\r\n                )\r\n\r\n            status_result = verify_bill(reference_number)\r\n            if not status_result['exists']:\r\n                raise AppError(\r\n                    message='Bill not found',\r\n                    code=ErrorTypes.NOT_FOUND\r\n                )\r\n\r\n            url = f\"{status_result['source_url']}?refno={reference_number}\"\r\n            response = requests.get(url)\r\n            parser = parse_electricity_bill_industrial if status_result['source_url'].endswith('industrial') \\\r\n                    else parse_electricity_bill_general\r\n            bill_data = parser(response.text)\r\n\r\n            # Perform analysis\r\n            yearly_units = int(bill_data['Total Yearly Units'])\r\n            monthly_avg = yearly_units / 12\r\n            daily_avg = yearly_units / 365\r\n\r\n            analysis_data = {\r\n                \"consumption\": {\r\n                    \"daily\": round(daily_avg, 2),\r\n                    \"monthly\": round(monthly_avg, 2),\r\n                    \"yearly\": yearly_units,\r\n                    \"peak\": int(bill_data.get('Max Units', 0))\r\n                },\r\n                \"systemSize\": {\r\n                    \"recommended\": round(daily_avg / 4 * 1.5, 2),\r\n                    \"range\": {\r\n                        \"min\": round(daily_avg / 4 * 1.3, 2),\r\n                        \"max\": round(daily_avg / 4 * 1.7, 2)\r\n                    }\r\n                },\r\n                \"savings\": {\r\n                    \"monthly\": round(monthly_avg * 20),  # Assuming PKR 20 per unit\r\n                    \"yearly\": round(yearly_units * 20),\r\n                    \"paybackPeriod\": 4.5  # This should be calculated based on actual costs\r\n                },\r\n                \"environmental\": {\r\n                    \"co2Reduction\": round(yearly_units * 0.0007, 2),  # Tons of CO2 per kWh\r\n                    \"treesEquivalent\": round(yearly_units * 0.0007 * 15)  # Trees needed to absorb the CO2\r\n                }\r\n            }\r\n\r\n            return Response({\r\n                \"success\": True,\r\n                \"data\": analysis_data\r\n            })\r\n\r\n        except AppError:\r\n            raise\r\n        except Exception as e:\r\n            logger.exception('Error analyzing bill')\r\n            raise AppError(\r\n                message='Failed to analyze bill',\r\n                code=ErrorTypes.SERVER_ERROR,\r\n                data={'original_error': str(e)} if settings.DEBUG else {}\r\n            )"
        }
    ]
}