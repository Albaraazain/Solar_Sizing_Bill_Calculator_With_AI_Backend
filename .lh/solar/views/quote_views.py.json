{
    "sourceFile": "solar/views/quote_views.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1733408426844,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733412299043,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,306 +1,131 @@\n+# solar/views/quote_views.py\r\n import logging\r\n from rest_framework.views import APIView\r\n from rest_framework.response import Response\r\n from rest_framework import status\r\n from django.conf import settings\r\n-from ..models import Panel, Inverter, variableCosts, BracketCosts\r\n-from ..middleware.error_handler import AppError, ErrorTypes\r\n-import math\r\n \r\n+from ..services.quote_service import QuoteService\r\n+from ..services.bill_service import BillService\r\n+from ..middleware.error_handler import AppError\r\n+\r\n logger = logging.getLogger(__name__)\r\n \r\n class QuoteGenerateAPIView(APIView):\r\n-    \"\"\"API endpoint to generate solar system quotes based on bill data.\"\"\"\r\n-\r\n+    \"\"\"API endpoint to generate solar system quotes.\"\"\"\r\n+    \r\n     def post(self, request):\r\n         try:\r\n-            bill_data = request.data\r\n-            if not bill_data:\r\n+            # Validate reference number if provided\r\n+            reference_number = request.data.get('reference_number')\r\n+            if not reference_number:\r\n                 raise AppError(\r\n-                    message=\"Bill data is required\",\r\n-                    code=ErrorTypes.VALIDATION_ERROR\r\n+                    message='Reference number is required',\r\n+                    code='VALIDATION_ERROR'\r\n                 )\r\n \r\n-            # Get system components\r\n-            try:\r\n-                panel = Panel.objects.get(default_choice=True)\r\n-            except Panel.DoesNotExist:\r\n-                raise AppError(\r\n-                    message=\"No default panel configuration found\",\r\n-                    code=ErrorTypes.VALIDATION_ERROR\r\n-                )\r\n+            # Get bill details first\r\n+            bill_response = BillService.get_bill_details(reference_number)\r\n+            if not bill_response['success']:\r\n+                return Response(bill_response, status=status.HTTP_400_BAD_REQUEST)\r\n \r\n-            # Calculate system size\r\n-            yearly_units = float(bill_data.get('Total Yearly Units', 0))\r\n-            daily_avg = yearly_units / 365\r\n-            system_size_kw = daily_avg / 4\r\n-            system_size = math.ceil(system_size_kw * 1.5)\r\n+            # Generate quote using bill data\r\n+            quote_data = QuoteService.generate_quote(bill_response['data'])\r\n+            return Response(quote_data)\r\n \r\n-            # Calculate panels needed\r\n-            panels_needed = math.ceil((system_size * 1000) / panel.power)\r\n+        except AppError as e:\r\n+            logger.warning(f\"Quote generation failed: {str(e)}\")\r\n+            return Response({\r\n+                'success': False,\r\n+                'error': {\r\n+                    'message': str(e),\r\n+                    'code': e.code,\r\n+                    'data': e.data\r\n+                }\r\n+            }, status=status.HTTP_400_BAD_REQUEST)\r\n \r\n-            # Get appropriate inverter\r\n-            inverter = Inverter.objects.filter(\r\n-                power__gte=system_size, \r\n-                availability=True\r\n-            ).order_by('power').first()\r\n+        except Exception as e:\r\n+            logger.exception(\"Unexpected error in quote generation\")\r\n+            return Response({\r\n+                'success': False,\r\n+                'error': {\r\n+                    'message': 'An unexpected error occurred',\r\n+                    'code': 'SERVER_ERROR',\r\n+                    'data': {'detail': str(e)} if settings.DEBUG else {}\r\n+                }\r\n+            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\r\n \r\n-            if not inverter:\r\n+class QuoteDetailsAPIView(APIView):\r\n+    \"\"\"API endpoint to retrieve specific quote details.\"\"\"\r\n+    \r\n+    def get(self, request, quote_id):\r\n+        try:\r\n+            if not quote_id:\r\n                 raise AppError(\r\n-                    message=\"No suitable inverter found for this system size\",\r\n-                    code=ErrorTypes.VALIDATION_ERROR,\r\n-                    data={\"system_size\": system_size}\r\n+                    message='Quote ID is required',\r\n+                    code='VALIDATION_ERROR'\r\n                 )\r\n \r\n-            # Get costs\r\n-            try:\r\n-                costs = self._get_costs(system_size)\r\n-            except AppError:\r\n-                raise\r\n-            except Exception as e:\r\n-                logger.exception(\"Error fetching costs\")\r\n-                raise AppError(\r\n-                    message=\"Failed to retrieve cost information\",\r\n-                    code=ErrorTypes.SERVER_ERROR\r\n-                )\r\n+            quote_data = QuoteService.get_quote_by_id(quote_id)\r\n+            return Response(quote_data)\r\n \r\n-            # Calculate production and costs\r\n-            calculations = self._calculate_system_metrics(\r\n-                system_size=system_size,\r\n-                panel_cost=panel.price,\r\n-                panels_needed=panels_needed,\r\n-                inverter_cost=inverter.price,\r\n-                costs=costs\r\n-            )\r\n-\r\n-            quote_data = {\r\n-                \"systemDetails\": {\r\n-                    \"systemSize\": system_size,\r\n-                    \"panelCount\": panels_needed,\r\n-                    \"panelType\": panel.brand,\r\n-                    \"inverterType\": inverter.brand,\r\n-                    \"roofArea\": panels_needed * 2,\r\n-                    \"installationTime\": \"3-5 days\",\r\n-                    \"warranty\": \"25 years\"\r\n-                },\r\n-                \"production\": calculations['production'],\r\n-                \"financial\": calculations['financial'],\r\n-                \"environmental\": calculations['environmental']\r\n-            }\r\n-\r\n+        except AppError as e:\r\n+            logger.warning(f\"Quote details fetch failed: {str(e)}\")\r\n             return Response({\r\n-                \"success\": True,\r\n-                \"data\": quote_data\r\n-            })\r\n-\r\n-        except AppError:\r\n-            raise\r\n+                'success': False,\r\n+                'error': {\r\n+                    'message': str(e),\r\n+                    'code': e.code,\r\n+                    'data': e.data\r\n+                }\r\n+            }, status=status.HTTP_400_BAD_REQUEST)\r\n+            \r\n         except Exception as e:\r\n-            logger.exception(\"Error generating quote\")\r\n-            raise AppError(\r\n-                message=\"Failed to generate quote\",\r\n-                code=ErrorTypes.SERVER_ERROR,\r\n-                data={'original_error': str(e)} if settings.DEBUG else {}\r\n-            )\r\n+            logger.exception(\"Unexpected error fetching quote details\")\r\n+            return Response({\r\n+                'success': False,\r\n+                'error': {\r\n+                    'message': 'An unexpected error occurred',\r\n+                    'code': 'SERVER_ERROR',\r\n+                    'data': {'detail': str(e)} if settings.DEBUG else {}\r\n+                }\r\n+            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\r\n \r\n-    def _get_costs(self, system_size):\r\n-        \"\"\"Retrieve all necessary costs for quote calculation.\"\"\"\r\n+class QuoteSaveAPIView(APIView):\r\n+    \"\"\"API endpoint to save quote with customer details.\"\"\"\r\n+    \r\n+    def post(self, request):\r\n         try:\r\n-            # Get variable costs\r\n-            net_metering = variableCosts.objects.get(cost_name='Net Metering').cost\r\n-            installation_cost = variableCosts.objects.get(cost_name='Installation Cost per Watt').cost\r\n-            frame_cost = variableCosts.objects.get(cost_name='Frame Cost per Watt').cost\r\n-            labor_cost = variableCosts.objects.get(cost_name='Labor Cost').cost\r\n+            quote_data = request.data.get('quote')\r\n+            customer_data = request.data.get('customer')\r\n \r\n-            # Calculate size-dependent costs\r\n-            total_installation_cost = installation_cost * system_size * 1000\r\n-            total_frame_cost = frame_cost * system_size * 1000\r\n-            total_labor_cost = labor_cost * system_size * 1000\r\n-\r\n-            # Get bracket costs\r\n-            dc_cable_cost = BracketCosts.objects.filter(\r\n-                Type='DC Cables',\r\n-                SystemRange__lte=system_size\r\n-            ).order_by('-SystemRange').first()\r\n-            \r\n-            ac_cable_cost = BracketCosts.objects.filter(\r\n-                Type='AC Cables',\r\n-                SystemRange__lte=system_size\r\n-            ).order_by('-SystemRange').first()\r\n-            \r\n-            accessories_cost = BracketCosts.objects.filter(\r\n-                Type='Accessories',\r\n-                SystemRange__lte=system_size\r\n-            ).order_by('-SystemRange').first()\r\n-\r\n-            if not all([dc_cable_cost, ac_cable_cost, accessories_cost]):\r\n+            if not all([quote_data, customer_data]):\r\n                 raise AppError(\r\n-                    message=\"Missing bracket costs for system size\",\r\n-                    code=ErrorTypes.VALIDATION_ERROR,\r\n-                    data={\"system_size\": system_size}\r\n+                    message='Both quote and customer data are required',\r\n+                    code='VALIDATION_ERROR'\r\n                 )\r\n \r\n-            return {\r\n-                'net_metering': net_metering,\r\n-                'installation': total_installation_cost,\r\n-                'frame': total_frame_cost,\r\n-                'labor': total_labor_cost,\r\n-                'dc_cable': dc_cable_cost.cost,\r\n-                'ac_cable': ac_cable_cost.cost,\r\n-                'accessories': accessories_cost.cost\r\n-            }\r\n+            saved_quote = QuoteService.save_quote(quote_data, customer_data)\r\n+            return Response(saved_quote)\r\n \r\n-        except variableCosts.DoesNotExist as e:\r\n-            raise AppError(\r\n-                message=\"Missing cost configuration\",\r\n-                code=ErrorTypes.VALIDATION_ERROR\r\n-            )\r\n-\r\n-    def _calculate_system_metrics(self, system_size, panel_cost, panels_needed, inverter_cost, costs):\r\n-        \"\"\"Calculate system production and financial metrics.\"\"\"\r\n-        # Production calculations\r\n-        daily_production = system_size * 4  # 4 kWh per kW per day average\r\n-        monthly_production = daily_production * 30\r\n-        yearly_production = daily_production * 365\r\n-\r\n-        # Cost calculations\r\n-        total_panel_cost = panels_needed * panel_cost\r\n-        total_cost = sum([\r\n-            total_panel_cost,\r\n-            inverter_cost,\r\n-            costs['net_metering'],\r\n-            costs['installation'],\r\n-            costs['frame'],\r\n-            costs['dc_cable'],\r\n-            costs['ac_cable'],\r\n-            costs['accessories'],\r\n-            costs['labor']\r\n-        ])\r\n-\r\n-        # Calculate savings (assuming PKR 20 per unit)\r\n-        annual_savings = yearly_production * 20\r\n-        monthly_savings = monthly_production * 20\r\n-\r\n-        return {\r\n-            'production': {\r\n-                'daily': round(daily_production, 1),\r\n-                'monthly': self._generate_monthly_production(monthly_production),\r\n-                'annual': round(yearly_production),\r\n-                'peakHours': 4.5,\r\n-                'performanceRatio': 0.75\r\n-            },\r\n-            'financial': {\r\n-                'systemCost': round(total_cost),\r\n-                'annualSavings': round(annual_savings),\r\n-                'monthlySavings': round(monthly_savings),\r\n-                'paybackPeriod': round(total_cost / annual_savings, 1),\r\n-                'roi': round((annual_savings / total_cost) * 100, 1),\r\n-                'savingsTimeline': self._generate_savings_timeline(total_cost, annual_savings)\r\n-            },\r\n-            'environmental': {\r\n-                'co2Offset': round(system_size * 1.2, 1),\r\n-                'treesEquivalent': round(system_size * 20),\r\n-                'homesEquivalent': math.floor(yearly_production / 12000),\r\n-                'carbonFootprintReduction': round(system_size * 1000)\r\n-            }\r\n-        }\r\n-\r\n-    def _generate_monthly_production(self, base_production):\r\n-        \"\"\"Generate monthly production estimates with seasonal variations.\"\"\"\r\n-        months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', \r\n-                'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\r\n-        seasonal_factors = {\r\n-            'winter': 0.7,\r\n-            'spring': 0.9,\r\n-            'summer': 1.2,\r\n-            'fall': 0.8\r\n-        }\r\n-\r\n-        monthly_data = []\r\n-        for i, month in enumerate(months):\r\n-            if i < 2 or i == 11:\r\n-                factor = seasonal_factors['winter']\r\n-            elif i < 5:\r\n-                factor = seasonal_factors['spring']\r\n-            elif i < 8:\r\n-                factor = seasonal_factors['summer']\r\n-            else:\r\n\\ No newline at end of file\n-                factor = seasonal_factors['fall']\r\n-\r\n-            production = round(base_production * factor)\r\n-            consumption = round(base_production * 0.9)\r\n-            monthly_data.append({\r\n-                \"month\": month,\r\n-                \"production\": production,\r\n-                \"consumption\": consumption\r\n-            })\r\n-\r\n-        return monthly_data\r\n-\r\n-    def _generate_savings_timeline(self, system_cost, annual_savings):\r\n-        \"\"\"Generate 25-year savings timeline with inflation adjustment.\"\"\"\r\n-        return [\r\n-            {\r\n-                \"year\": year + 1,\r\n-                \"annualSavings\": round(annual_savings * (1 + (year * 0.05))),\r\n-                \"cumulativeSavings\": round(annual_savings * (year + 1) * (1 + (year * 0.025)))\r\n-            }\r\n-            for year in range(25)\r\n-        ]\r\n-\r\n-\r\n-class QuoteDetailsAPIView(APIView):\r\n-    \"\"\"API endpoint to retrieve specific quote details.\"\"\"\r\n-\r\n-    def get(self, request, quote_id):\r\n-        try:\r\n-            # TODO: Implement quote storage and retrieval\r\n-            # For now, return mock data that matches frontend expectations\r\n-            quote_data = {\r\n-                \"quoteId\": quote_id,\r\n-                \"systemDetails\": {\r\n-                    \"systemSize\": 5.0,\r\n-                    \"panelCount\": 14,\r\n-                    \"panelType\": \"Mono-crystalline\",\r\n-                    \"inverterType\": \"String Inverter\",\r\n-                    \"roofArea\": 28,\r\n-                    \"installationTime\": \"3-5 days\",\r\n-                    \"warranty\": \"25 years\"\r\n-                },\r\n-                \"production\": {\r\n-                    \"daily\": 20,\r\n-                    \"monthly\": [{\"month\": \"Jan\", \"production\": 600, \"consumption\": 550}],\r\n-                    \"annual\": 7300\r\n-                },\r\n-                \"financial\": {\r\n-                    \"systemCost\": 850000,\r\n-                    \"annualSavings\": 180000,\r\n-                    \"monthlySavings\": 15000,\r\n-                    \"paybackPeriod\": 4.7,\r\n-                    \"roi\": 21.2,\r\n-                    \"savingsTimeline\": [{\r\n-                        \"year\": 1,\r\n-                        \"annualSavings\": 180000,\r\n-                        \"cumulativeSavings\": 180000\r\n-                    }]\r\n-                },\r\n-                \"environmental\": {\r\n-                    \"co2Offset\": 5.2,\r\n-                    \"treesEquivalent\": 80,\r\n-                    \"homesEquivalent\": 2,\r\n-                    \"carbonFootprintReduction\": 5000\r\n+        except AppError as e:\r\n+            logger.warning(f\"Quote save failed: {str(e)}\")\r\n+            return Response({\r\n+                'success': False,\r\n+                'error': {\r\n+                    'message': str(e),\r\n+                    'code': e.code,\r\n+                    'data': e.data\r\n                 }\r\n-            }\r\n-\r\n+            }, status=status.HTTP_400_BAD_REQUEST)\r\n+            \r\n+        except Exception as e:\r\n+            logger.exception(\"Unexpected error saving quote\")\r\n             return Response({\r\n-                \"success\": True,\r\n-                \"data\": quote_data\r\n-            })\r\n-\r\n-        except Exception as e:\r\n-            logger.exception(\"Error retrieving quote\")\r\n-            raise AppError(\r\n-                message=\"Failed to retrieve quote details\",\r\n-                code=ErrorTypes.SERVER_ERROR,\r\n-                data={'original_error': str(e)} if settings.DEBUG else {}\r\n-            )\n+                'success': False,\r\n+                'error': {\r\n+                    'message': 'An unexpected error occurred',\r\n+                    'code': 'SERVER_ERROR',\r\n+                    'data': {'detail': str(e)} if settings.DEBUG else {}\r\n+                }\r\n+            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733443981837,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,23 +15,25 @@\n     \"\"\"API endpoint to generate solar system quotes.\"\"\"\r\n     \r\n     def post(self, request):\r\n         try:\r\n-            # Validate reference number if provided\r\n-            reference_number = request.data.get('reference_number')\r\n-            if not reference_number:\r\n-                raise AppError(\r\n-                    message='Reference number is required',\r\n-                    code='VALIDATION_ERROR'\r\n-                )\r\n+            logger.debug(f\"Received quote generation request: {request.data}\")\r\n+            \r\n+            # Get bill data\r\n+            bill_data = request.data\r\n+            if not bill_data:\r\n+                return Response({\r\n+                    'success': False,\r\n+                    'error': {\r\n+                        'message': 'Bill data is required',\r\n+                        'code': 'VALIDATION_ERROR'\r\n+                    }\r\n+                }, status=status.HTTP_400_BAD_REQUEST)\r\n \r\n-            # Get bill details first\r\n-            bill_response = BillService.get_bill_details(reference_number)\r\n-            if not bill_response['success']:\r\n-                return Response(bill_response, status=status.HTTP_400_BAD_REQUEST)\r\n+            # Generate quote\r\n+            quote_data = QuoteService.generate_quote(bill_data)\r\n+            logger.debug(f\"Generated quote data: {quote_data}\")\r\n \r\n-            # Generate quote using bill data\r\n-            quote_data = QuoteService.generate_quote(bill_response['data'])\r\n             return Response(quote_data)\r\n \r\n         except AppError as e:\r\n             logger.warning(f\"Quote generation failed: {str(e)}\")\r\n@@ -42,20 +44,20 @@\n                     'code': e.code,\r\n                     'data': e.data\r\n                 }\r\n             }, status=status.HTTP_400_BAD_REQUEST)\r\n-\r\n+            \r\n         except Exception as e:\r\n             logger.exception(\"Unexpected error in quote generation\")\r\n             return Response({\r\n                 'success': False,\r\n                 'error': {\r\n-                    'message': 'An unexpected error occurred',\r\n-                    'code': 'SERVER_ERROR',\r\n-                    'data': {'detail': str(e)} if settings.DEBUG else {}\r\n+                    'message': 'Failed to generate quote',\r\n+                    'code': 'SERVER_ERROR'\r\n                 }\r\n             }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\r\n \r\n+\r\n class QuoteDetailsAPIView(APIView):\r\n     \"\"\"API endpoint to retrieve specific quote details.\"\"\"\r\n     \r\n     def get(self, request, quote_id):\r\n"
                },
                {
                    "date": 1733444426591,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,24 +17,46 @@\n     def post(self, request):\r\n         try:\r\n             logger.debug(f\"Received quote generation request: {request.data}\")\r\n             \r\n-            # Get bill data\r\n+            # Get bill data and validate required fields\r\n             bill_data = request.data\r\n-            if not bill_data:\r\n+            required_fields = ['reference_number', 'units_consumed', 'amount']\r\n+            \r\n+            # Validate required fields\r\n+            missing_fields = [field for field in required_fields if not bill_data.get(field)]\r\n+            if missing_fields:\r\n                 return Response({\r\n                     'success': False,\r\n                     'error': {\r\n-                        'message': 'Bill data is required',\r\n-                        'code': 'VALIDATION_ERROR'\r\n+                        'message': f'Missing required fields: {\", \".join(missing_fields)}',\r\n+                        'code': 'VALIDATION_ERROR',\r\n+                        'data': {'missing_fields': missing_fields}\r\n                     }\r\n                 }, status=status.HTTP_400_BAD_REQUEST)\r\n \r\n+            # Convert numeric fields\r\n+            try:\r\n+                bill_data['units_consumed'] = float(bill_data.get('units_consumed', 0))\r\n+                bill_data['amount'] = float(bill_data.get('amount', 0))\r\n+            except ValueError as e:\r\n+                return Response({\r\n+                    'success': False,\r\n+                    'error': {\r\n+                        'message': 'Invalid numeric values provided',\r\n+                        'code': 'VALIDATION_ERROR',\r\n+                        'data': {'detail': str(e)}\r\n+                    }\r\n+                }, status=status.HTTP_400_BAD_REQUEST)\r\n+\r\n             # Generate quote\r\n             quote_data = QuoteService.generate_quote(bill_data)\r\n             logger.debug(f\"Generated quote data: {quote_data}\")\r\n \r\n-            return Response(quote_data)\r\n+            return Response({\r\n+                'success': True,\r\n+                'data': quote_data\r\n+            })\r\n \r\n         except AppError as e:\r\n             logger.warning(f\"Quote generation failed: {str(e)}\")\r\n             return Response({\r\n"
                },
                {
                    "date": 1733444801552,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,162 @@\n+# solar/views/quote_views.py\r\n+import logging\r\n+from rest_framework.views import APIView\r\n+from rest_framework.response import Response\r\n+from rest_framework import status\r\n+from django.conf import settings\r\n+\r\n+from ..services.quote_service import QuoteService\r\n+from ..services.bill_service import BillService\r\n+from ..middleware.error_handler import AppError\r\n+\r\n+logger = logging.getLogger(__name__)\r\n+\r\n+class QuoteGenerateAPIView(APIView):\r\n+    \"\"\"API endpoint to generate solar system quotes.\"\"\"\r\n+    \r\n+    def post(self, request):\r\n+        try:\r\n+            logger.debug(f\"Received quote generation request: {request.data}\")\r\n+            \r\n+            # Get bill data and validate required fields\r\n+            bill_data = request.data\r\n+            \r\n+            # Clean and validate reference number\r\n+            reference_number = str(bill_data.get('reference_number', '')).strip()\r\n+            if not reference_number:\r\n+                return Response({\r\n+                    'success': False,\r\n+                    'error': {\r\n+                        'message': 'Reference number is required',\r\n+                        'code': 'VALIDATION_ERROR'\r\n+                    }\r\n+                }, status=status.HTTP_400_BAD_REQUEST)\r\n+\r\n+            # Validate required numeric fields\r\n+            try:\r\n+                units_consumed = float(bill_data.get('units_consumed', 0))\r\n+                amount = float(bill_data.get('amount', 0))\r\n+                \r\n+                if units_consumed <= 0 or amount <= 0:\r\n+                    raise ValueError(\"Units consumed and amount must be positive numbers\")\r\n+                    \r\n+            except (ValueError, TypeError) as e:\r\n+                return Response({\r\n+                    'success': False,\r\n+                    'error': {\r\n+                        'message': 'Invalid numeric values provided',\r\n+                        'code': 'VALIDATION_ERROR',\r\n+                        'data': {'detail': str(e)}\r\n+                    }\r\n+                }, status=status.HTTP_400_BAD_REQUEST)\r\n+\r\n+            # Generate quote\r\n+            quote_data = QuoteService.generate_quote({\r\n+                'reference_number': reference_number,\r\n+                'units_consumed': units_consumed,\r\n+                'amount': amount,\r\n+                **{k: v for k, v in bill_data.items() if k not in ['reference_number', 'units_consumed', 'amount']}\r\n+            })\r\n+            \r\n+            logger.debug(f\"Generated quote data: {quote_data}\")\r\n+            return Response({\r\n+                'success': True,\r\n+                'data': quote_data\r\n+            })\r\n+\r\n+        except AppError as e:\r\n+            logger.warning(f\"Quote generation failed: {str(e)}\")\r\n+            return Response({\r\n+                'success': False,\r\n+                'error': {\r\n+                    'message': str(e),\r\n+                    'code': e.code,\r\n+                    'data': e.data\r\n+                }\r\n+            }, status=status.HTTP_400_BAD_REQUEST)\r\n+            \r\n+        except Exception as e:\r\n+            logger.exception(\"Unexpected error in quote generation\")\r\n+            return Response({\r\n+                'success': False,\r\n+                'error': {\r\n+                    'message': 'Failed to generate quote',\r\n+                    'code': 'SERVER_ERROR'\r\n+                }\r\n+            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\r\n+\r\n+\r\n+class QuoteDetailsAPIView(APIView):\r\n+    \"\"\"API endpoint to retrieve specific quote details.\"\"\"\r\n+    \r\n+    def get(self, request, quote_id):\r\n+        try:\r\n+            if not quote_id:\r\n+                raise AppError(\r\n+                    message='Quote ID is required',\r\n+                    code='VALIDATION_ERROR'\r\n+                )\r\n+\r\n+            quote_data = QuoteService.get_quote_by_id(quote_id)\r\n+            return Response(quote_data)\r\n+\r\n+        except AppError as e:\r\n+            logger.warning(f\"Quote details fetch failed: {str(e)}\")\r\n+            return Response({\r\n+                'success': False,\r\n+                'error': {\r\n+                    'message': str(e),\r\n+                    'code': e.code,\r\n+                    'data': e.data\r\n+                }\r\n+            }, status=status.HTTP_400_BAD_REQUEST)\r\n+            \r\n+        except Exception as e:\r\n+            logger.exception(\"Unexpected error fetching quote details\")\r\n+            return Response({\r\n+                'success': False,\r\n+                'error': {\r\n+                    'message': 'An unexpected error occurred',\r\n+                    'code': 'SERVER_ERROR',\r\n+                    'data': {'detail': str(e)} if settings.DEBUG else {}\r\n+                }\r\n+            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\r\n+\r\n+class QuoteSaveAPIView(APIView):\r\n+    \"\"\"API endpoint to save quote with customer details.\"\"\"\r\n+    \r\n+    def post(self, request):\r\n+        try:\r\n+            quote_data = request.data.get('quote')\r\n+            customer_data = request.data.get('customer')\r\n+\r\n+            if not all([quote_data, customer_data]):\r\n+                raise AppError(\r\n+                    message='Both quote and customer data are required',\r\n+                    code='VALIDATION_ERROR'\r\n+                )\r\n+\r\n+            saved_quote = QuoteService.save_quote(quote_data, customer_data)\r\n+            return Response(saved_quote)\r\n+\r\n+        except AppError as e:\r\n+            logger.warning(f\"Quote save failed: {str(e)}\")\r\n+            return Response({\r\n+                'success': False,\r\n+                'error': {\r\n+                    'message': str(e),\r\n+                    'code': e.code,\r\n+                    'data': e.data\r\n+                }\r\n+            }, status=status.HTTP_400_BAD_REQUEST)\r\n+            \r\n+        except Exception as e:\r\n+            logger.exception(\"Unexpected error saving quote\")\r\n+            return Response({\r\n+                'success': False,\r\n+                'error': {\r\n+                    'message': 'An unexpected error occurred',\r\n+                    'code': 'SERVER_ERROR',\r\n+                    'data': {'detail': str(e)} if settings.DEBUG else {}\r\n+                }\r\n+            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733446185483,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,82 +11,57 @@\n \r\n logger = logging.getLogger(__name__)\r\n \r\n class QuoteGenerateAPIView(APIView):\r\n-    \"\"\"API endpoint to generate solar system quotes.\"\"\"\r\n-    \r\n     def post(self, request):\r\n         try:\r\n-            logger.debug(f\"Received quote generation request: {request.data}\")\r\n+            logger.debug(\"Received quote generation request\")\r\n+            logger.debug(f\"Request data: {request.data}\")\r\n             \r\n-            # Get bill data and validate required fields\r\n-            bill_data = request.data\r\n-            \r\n-            # Clean and validate reference number\r\n-            reference_number = str(bill_data.get('reference_number', '')).strip()\r\n-            if not reference_number:\r\n-                return Response({\r\n-                    'success': False,\r\n-                    'error': {\r\n-                        'message': 'Reference number is required',\r\n-                        'code': 'VALIDATION_ERROR'\r\n-                    }\r\n-                }, status=status.HTTP_400_BAD_REQUEST)\r\n+            # Validate request data\r\n+            for field in ['reference_number', 'units_consumed', 'amount', 'total_yearly_units']:\r\n+                if field not in request.data:\r\n+                    logger.error(f\"Missing required field: {field}\")\r\n+                    return Response({\r\n+                        'success': False,\r\n+                        'error': {\r\n+                            'message': f'Missing required field: {field}',\r\n+                            'code': 'VALIDATION_ERROR',\r\n+                            'field': field\r\n+                        }\r\n+                    }, status=status.HTTP_400_BAD_REQUEST)\r\n+                \r\n+                # Log the field values\r\n+                logger.debug(f\"Field {field}: {request.data.get(field)}\")\r\n \r\n-            # Validate required numeric fields\r\n+            # Generate quote\r\n             try:\r\n-                units_consumed = float(bill_data.get('units_consumed', 0))\r\n-                amount = float(bill_data.get('amount', 0))\r\n-                \r\n-                if units_consumed <= 0 or amount <= 0:\r\n-                    raise ValueError(\"Units consumed and amount must be positive numbers\")\r\n-                    \r\n-            except (ValueError, TypeError) as e:\r\n+                quote_data = QuoteService.generate_quote(request.data)\r\n+                logger.debug(f\"Generated quote data: {quote_data}\")\r\n+                return Response(quote_data)\r\n+            except Exception as e:\r\n+                logger.exception(\"Error in quote generation service\")\r\n                 return Response({\r\n                     'success': False,\r\n                     'error': {\r\n-                        'message': 'Invalid numeric values provided',\r\n-                        'code': 'VALIDATION_ERROR',\r\n-                        'data': {'detail': str(e)}\r\n+                        'message': str(e),\r\n+                        'code': 'QUOTE_GENERATION_ERROR',\r\n+                        'details': str(e)\r\n                     }\r\n                 }, status=status.HTTP_400_BAD_REQUEST)\r\n \r\n-            # Generate quote\r\n-            quote_data = QuoteService.generate_quote({\r\n-                'reference_number': reference_number,\r\n-                'units_consumed': units_consumed,\r\n-                'amount': amount,\r\n-                **{k: v for k, v in bill_data.items() if k not in ['reference_number', 'units_consumed', 'amount']}\r\n-            })\r\n-            \r\n-            logger.debug(f\"Generated quote data: {quote_data}\")\r\n-            return Response({\r\n-                'success': True,\r\n-                'data': quote_data\r\n-            })\r\n-\r\n-        except AppError as e:\r\n-            logger.warning(f\"Quote generation failed: {str(e)}\")\r\n-            return Response({\r\n-                'success': False,\r\n-                'error': {\r\n-                    'message': str(e),\r\n-                    'code': e.code,\r\n-                    'data': e.data\r\n-                }\r\n-            }, status=status.HTTP_400_BAD_REQUEST)\r\n-            \r\n         except Exception as e:\r\n             logger.exception(\"Unexpected error in quote generation\")\r\n             return Response({\r\n                 'success': False,\r\n                 'error': {\r\n-                    'message': 'Failed to generate quote',\r\n-                    'code': 'SERVER_ERROR'\r\n+                    'message': str(e),\r\n+                    'code': 'SERVER_ERROR',\r\n+                    'details': str(e)\r\n                 }\r\n             }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\r\n-\r\n-\r\n+            \r\n+            \r\n class QuoteDetailsAPIView(APIView):\r\n     \"\"\"API endpoint to retrieve specific quote details.\"\"\"\r\n     \r\n     def get(self, request, quote_id):\r\n"
                },
                {
                    "date": 1733446534586,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,55 +13,52 @@\n \r\n class QuoteGenerateAPIView(APIView):\r\n     def post(self, request):\r\n         try:\r\n-            logger.debug(\"Received quote generation request\")\r\n-            logger.debug(f\"Request data: {request.data}\")\r\n-            \r\n-            # Validate request data\r\n-            for field in ['reference_number', 'units_consumed', 'amount', 'total_yearly_units']:\r\n-                if field not in request.data:\r\n-                    logger.error(f\"Missing required field: {field}\")\r\n-                    return Response({\r\n-                        'success': False,\r\n-                        'error': {\r\n-                            'message': f'Missing required field: {field}',\r\n-                            'code': 'VALIDATION_ERROR',\r\n-                            'field': field\r\n-                        }\r\n-                    }, status=status.HTTP_400_BAD_REQUEST)\r\n-                \r\n-                # Log the field values\r\n-                logger.debug(f\"Field {field}: {request.data.get(field)}\")\r\n+            # Log the raw request data\r\n+            logger.info(f\"Raw quote generation request data: {request.data}\")\r\n+            logger.info(f\"Request content type: {request.content_type}\")\r\n \r\n-            # Generate quote\r\n+            # Log data type validations\r\n+            for field in ['units_consumed', 'amount', 'total_yearly_units']:\r\n+                value = request.data.get(field)\r\n+                logger.info(f\"Field {field}: value={value}, type={type(value)}\")\r\n+\r\n             try:\r\n-                quote_data = QuoteService.generate_quote(request.data)\r\n-                logger.debug(f\"Generated quote data: {quote_data}\")\r\n-                return Response(quote_data)\r\n-            except Exception as e:\r\n-                logger.exception(\"Error in quote generation service\")\r\n+                # Attempt numeric conversions\r\n+                units = float(request.data.get('units_consumed', 0))\r\n+                amount = float(request.data.get('amount', 0))\r\n+                yearly = float(request.data.get('total_yearly_units', 0))\r\n+                \r\n+                logger.info(f\"Converted values - units: {units}, amount: {amount}, yearly: {yearly}\")\r\n+            except (ValueError, TypeError) as e:\r\n+                logger.error(f\"Numeric conversion error: {e}\")\r\n                 return Response({\r\n                     'success': False,\r\n                     'error': {\r\n-                        'message': str(e),\r\n-                        'code': 'QUOTE_GENERATION_ERROR',\r\n+                        'message': 'Invalid numeric values',\r\n+                        'code': 'VALIDATION_ERROR',\r\n                         'details': str(e)\r\n                     }\r\n                 }, status=status.HTTP_400_BAD_REQUEST)\r\n \r\n+            # Log the data being passed to the service\r\n+            logger.info(\"Passing to quote service:\", request.data)\r\n+            quote_data = QuoteService.generate_quote(request.data)\r\n+            return Response(quote_data)\r\n+\r\n         except Exception as e:\r\n-            logger.exception(\"Unexpected error in quote generation\")\r\n+            logger.exception(\"Error in quote generation\")\r\n             return Response({\r\n                 'success': False,\r\n                 'error': {\r\n                     'message': str(e),\r\n-                    'code': 'SERVER_ERROR',\r\n+                    'code': 'QUOTE_GENERATION_ERROR',\r\n                     'details': str(e)\r\n                 }\r\n-            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\r\n+            }, status=status.HTTP_400_BAD_REQUEST)\r\n             \r\n-            \r\n+                        \r\n class QuoteDetailsAPIView(APIView):\r\n     \"\"\"API endpoint to retrieve specific quote details.\"\"\"\r\n     \r\n     def get(self, request, quote_id):\r\n"
                }
            ],
            "date": 1733408426844,
            "name": "Commit-0",
            "content": "import logging\r\nfrom rest_framework.views import APIView\r\nfrom rest_framework.response import Response\r\nfrom rest_framework import status\r\nfrom django.conf import settings\r\nfrom ..models import Panel, Inverter, variableCosts, BracketCosts\r\nfrom ..middleware.error_handler import AppError, ErrorTypes\r\nimport math\r\n\r\nlogger = logging.getLogger(__name__)\r\n\r\nclass QuoteGenerateAPIView(APIView):\r\n    \"\"\"API endpoint to generate solar system quotes based on bill data.\"\"\"\r\n\r\n    def post(self, request):\r\n        try:\r\n            bill_data = request.data\r\n            if not bill_data:\r\n                raise AppError(\r\n                    message=\"Bill data is required\",\r\n                    code=ErrorTypes.VALIDATION_ERROR\r\n                )\r\n\r\n            # Get system components\r\n            try:\r\n                panel = Panel.objects.get(default_choice=True)\r\n            except Panel.DoesNotExist:\r\n                raise AppError(\r\n                    message=\"No default panel configuration found\",\r\n                    code=ErrorTypes.VALIDATION_ERROR\r\n                )\r\n\r\n            # Calculate system size\r\n            yearly_units = float(bill_data.get('Total Yearly Units', 0))\r\n            daily_avg = yearly_units / 365\r\n            system_size_kw = daily_avg / 4\r\n            system_size = math.ceil(system_size_kw * 1.5)\r\n\r\n            # Calculate panels needed\r\n            panels_needed = math.ceil((system_size * 1000) / panel.power)\r\n\r\n            # Get appropriate inverter\r\n            inverter = Inverter.objects.filter(\r\n                power__gte=system_size, \r\n                availability=True\r\n            ).order_by('power').first()\r\n\r\n            if not inverter:\r\n                raise AppError(\r\n                    message=\"No suitable inverter found for this system size\",\r\n                    code=ErrorTypes.VALIDATION_ERROR,\r\n                    data={\"system_size\": system_size}\r\n                )\r\n\r\n            # Get costs\r\n            try:\r\n                costs = self._get_costs(system_size)\r\n            except AppError:\r\n                raise\r\n            except Exception as e:\r\n                logger.exception(\"Error fetching costs\")\r\n                raise AppError(\r\n                    message=\"Failed to retrieve cost information\",\r\n                    code=ErrorTypes.SERVER_ERROR\r\n                )\r\n\r\n            # Calculate production and costs\r\n            calculations = self._calculate_system_metrics(\r\n                system_size=system_size,\r\n                panel_cost=panel.price,\r\n                panels_needed=panels_needed,\r\n                inverter_cost=inverter.price,\r\n                costs=costs\r\n            )\r\n\r\n            quote_data = {\r\n                \"systemDetails\": {\r\n                    \"systemSize\": system_size,\r\n                    \"panelCount\": panels_needed,\r\n                    \"panelType\": panel.brand,\r\n                    \"inverterType\": inverter.brand,\r\n                    \"roofArea\": panels_needed * 2,\r\n                    \"installationTime\": \"3-5 days\",\r\n                    \"warranty\": \"25 years\"\r\n                },\r\n                \"production\": calculations['production'],\r\n                \"financial\": calculations['financial'],\r\n                \"environmental\": calculations['environmental']\r\n            }\r\n\r\n            return Response({\r\n                \"success\": True,\r\n                \"data\": quote_data\r\n            })\r\n\r\n        except AppError:\r\n            raise\r\n        except Exception as e:\r\n            logger.exception(\"Error generating quote\")\r\n            raise AppError(\r\n                message=\"Failed to generate quote\",\r\n                code=ErrorTypes.SERVER_ERROR,\r\n                data={'original_error': str(e)} if settings.DEBUG else {}\r\n            )\r\n\r\n    def _get_costs(self, system_size):\r\n        \"\"\"Retrieve all necessary costs for quote calculation.\"\"\"\r\n        try:\r\n            # Get variable costs\r\n            net_metering = variableCosts.objects.get(cost_name='Net Metering').cost\r\n            installation_cost = variableCosts.objects.get(cost_name='Installation Cost per Watt').cost\r\n            frame_cost = variableCosts.objects.get(cost_name='Frame Cost per Watt').cost\r\n            labor_cost = variableCosts.objects.get(cost_name='Labor Cost').cost\r\n\r\n            # Calculate size-dependent costs\r\n            total_installation_cost = installation_cost * system_size * 1000\r\n            total_frame_cost = frame_cost * system_size * 1000\r\n            total_labor_cost = labor_cost * system_size * 1000\r\n\r\n            # Get bracket costs\r\n            dc_cable_cost = BracketCosts.objects.filter(\r\n                Type='DC Cables',\r\n                SystemRange__lte=system_size\r\n            ).order_by('-SystemRange').first()\r\n            \r\n            ac_cable_cost = BracketCosts.objects.filter(\r\n                Type='AC Cables',\r\n                SystemRange__lte=system_size\r\n            ).order_by('-SystemRange').first()\r\n            \r\n            accessories_cost = BracketCosts.objects.filter(\r\n                Type='Accessories',\r\n                SystemRange__lte=system_size\r\n            ).order_by('-SystemRange').first()\r\n\r\n            if not all([dc_cable_cost, ac_cable_cost, accessories_cost]):\r\n                raise AppError(\r\n                    message=\"Missing bracket costs for system size\",\r\n                    code=ErrorTypes.VALIDATION_ERROR,\r\n                    data={\"system_size\": system_size}\r\n                )\r\n\r\n            return {\r\n                'net_metering': net_metering,\r\n                'installation': total_installation_cost,\r\n                'frame': total_frame_cost,\r\n                'labor': total_labor_cost,\r\n                'dc_cable': dc_cable_cost.cost,\r\n                'ac_cable': ac_cable_cost.cost,\r\n                'accessories': accessories_cost.cost\r\n            }\r\n\r\n        except variableCosts.DoesNotExist as e:\r\n            raise AppError(\r\n                message=\"Missing cost configuration\",\r\n                code=ErrorTypes.VALIDATION_ERROR\r\n            )\r\n\r\n    def _calculate_system_metrics(self, system_size, panel_cost, panels_needed, inverter_cost, costs):\r\n        \"\"\"Calculate system production and financial metrics.\"\"\"\r\n        # Production calculations\r\n        daily_production = system_size * 4  # 4 kWh per kW per day average\r\n        monthly_production = daily_production * 30\r\n        yearly_production = daily_production * 365\r\n\r\n        # Cost calculations\r\n        total_panel_cost = panels_needed * panel_cost\r\n        total_cost = sum([\r\n            total_panel_cost,\r\n            inverter_cost,\r\n            costs['net_metering'],\r\n            costs['installation'],\r\n            costs['frame'],\r\n            costs['dc_cable'],\r\n            costs['ac_cable'],\r\n            costs['accessories'],\r\n            costs['labor']\r\n        ])\r\n\r\n        # Calculate savings (assuming PKR 20 per unit)\r\n        annual_savings = yearly_production * 20\r\n        monthly_savings = monthly_production * 20\r\n\r\n        return {\r\n            'production': {\r\n                'daily': round(daily_production, 1),\r\n                'monthly': self._generate_monthly_production(monthly_production),\r\n                'annual': round(yearly_production),\r\n                'peakHours': 4.5,\r\n                'performanceRatio': 0.75\r\n            },\r\n            'financial': {\r\n                'systemCost': round(total_cost),\r\n                'annualSavings': round(annual_savings),\r\n                'monthlySavings': round(monthly_savings),\r\n                'paybackPeriod': round(total_cost / annual_savings, 1),\r\n                'roi': round((annual_savings / total_cost) * 100, 1),\r\n                'savingsTimeline': self._generate_savings_timeline(total_cost, annual_savings)\r\n            },\r\n            'environmental': {\r\n                'co2Offset': round(system_size * 1.2, 1),\r\n                'treesEquivalent': round(system_size * 20),\r\n                'homesEquivalent': math.floor(yearly_production / 12000),\r\n                'carbonFootprintReduction': round(system_size * 1000)\r\n            }\r\n        }\r\n\r\n    def _generate_monthly_production(self, base_production):\r\n        \"\"\"Generate monthly production estimates with seasonal variations.\"\"\"\r\n        months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', \r\n                'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\r\n        seasonal_factors = {\r\n            'winter': 0.7,\r\n            'spring': 0.9,\r\n            'summer': 1.2,\r\n            'fall': 0.8\r\n        }\r\n\r\n        monthly_data = []\r\n        for i, month in enumerate(months):\r\n            if i < 2 or i == 11:\r\n                factor = seasonal_factors['winter']\r\n            elif i < 5:\r\n                factor = seasonal_factors['spring']\r\n            elif i < 8:\r\n                factor = seasonal_factors['summer']\r\n            else:\r\n                factor = seasonal_factors['fall']\r\n\r\n            production = round(base_production * factor)\r\n            consumption = round(base_production * 0.9)\r\n            monthly_data.append({\r\n                \"month\": month,\r\n                \"production\": production,\r\n                \"consumption\": consumption\r\n            })\r\n\r\n        return monthly_data\r\n\r\n    def _generate_savings_timeline(self, system_cost, annual_savings):\r\n        \"\"\"Generate 25-year savings timeline with inflation adjustment.\"\"\"\r\n        return [\r\n            {\r\n                \"year\": year + 1,\r\n                \"annualSavings\": round(annual_savings * (1 + (year * 0.05))),\r\n                \"cumulativeSavings\": round(annual_savings * (year + 1) * (1 + (year * 0.025)))\r\n            }\r\n            for year in range(25)\r\n        ]\r\n\r\n\r\nclass QuoteDetailsAPIView(APIView):\r\n    \"\"\"API endpoint to retrieve specific quote details.\"\"\"\r\n\r\n    def get(self, request, quote_id):\r\n        try:\r\n            # TODO: Implement quote storage and retrieval\r\n            # For now, return mock data that matches frontend expectations\r\n            quote_data = {\r\n                \"quoteId\": quote_id,\r\n                \"systemDetails\": {\r\n                    \"systemSize\": 5.0,\r\n                    \"panelCount\": 14,\r\n                    \"panelType\": \"Mono-crystalline\",\r\n                    \"inverterType\": \"String Inverter\",\r\n                    \"roofArea\": 28,\r\n                    \"installationTime\": \"3-5 days\",\r\n                    \"warranty\": \"25 years\"\r\n                },\r\n                \"production\": {\r\n                    \"daily\": 20,\r\n                    \"monthly\": [{\"month\": \"Jan\", \"production\": 600, \"consumption\": 550}],\r\n                    \"annual\": 7300\r\n                },\r\n                \"financial\": {\r\n                    \"systemCost\": 850000,\r\n                    \"annualSavings\": 180000,\r\n                    \"monthlySavings\": 15000,\r\n                    \"paybackPeriod\": 4.7,\r\n                    \"roi\": 21.2,\r\n                    \"savingsTimeline\": [{\r\n                        \"year\": 1,\r\n                        \"annualSavings\": 180000,\r\n                        \"cumulativeSavings\": 180000\r\n                    }]\r\n                },\r\n                \"environmental\": {\r\n                    \"co2Offset\": 5.2,\r\n                    \"treesEquivalent\": 80,\r\n                    \"homesEquivalent\": 2,\r\n                    \"carbonFootprintReduction\": 5000\r\n                }\r\n            }\r\n\r\n            return Response({\r\n                \"success\": True,\r\n                \"data\": quote_data\r\n            })\r\n\r\n        except Exception as e:\r\n            logger.exception(\"Error retrieving quote\")\r\n            raise AppError(\r\n                message=\"Failed to retrieve quote details\",\r\n                code=ErrorTypes.SERVER_ERROR,\r\n                data={'original_error': str(e)} if settings.DEBUG else {}\r\n            )"
        }
    ]
}