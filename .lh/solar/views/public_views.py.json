{
    "sourceFile": "solar/views/public_views.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1733408397889,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733413776465,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,31 +1,207 @@\n-from django.views.generic import TemplateView\r\n-from django.http import Http404\r\n+# solar/views/public_views.py\r\n+import logging\r\n+from django.views.generic import TemplateView, View\r\n+from django.http import Http404, JsonResponse\r\n+from django.shortcuts import render\r\n from django.conf import settings\r\n \r\n+from ..services.quote_service import QuoteService\r\n+from ..services.bill_service import BillService\r\n+from ..services.customer_service import CustomerService\r\n+from ..services.notification_service import NotificationService\r\n+from ..middleware.error_handler import AppError\r\n+\r\n+logger = logging.getLogger(__name__)\r\n+\r\n class IndexView(TemplateView):\r\n     \"\"\"Main landing page view.\"\"\"\r\n     template_name = 'index.html'\r\n \r\n     def get_context_data(self, **kwargs):\r\n         context = super().get_context_data(**kwargs)\r\n         context.update({\r\n-            'DEBUG': settings.DEBUG,\r\n-            'APP_VERSION': getattr(settings, 'APP_VERSION', '1.0.0'),\r\n+            'title': 'Solar Panel Installation - Energy Cove',\r\n+            'meta_description': 'Get professional solar panel installation services. '\r\n+                              'Calculate your savings and get a free quote today.',\r\n+            'company_info': {\r\n+                'name': settings.COMPANY_NAME,\r\n\\ No newline at end of file\n+                'phone': settings.CONTACT_PHONE,\r\n+                'email': settings.CONTACT_EMAIL,\r\n+                'address': settings.COMPANY_ADDRESS\r\n+            }\r\n         })\r\n         return context\r\n \r\n class QuotationView(TemplateView):\r\n-    \"\"\"Quotation page view.\"\"\"\r\n+    \"\"\"Solar system quotation page.\"\"\"\r\n     template_name = 'quotation.html'\r\n \r\n     def get_context_data(self, **kwargs):\r\n         context = super().get_context_data(**kwargs)\r\n-        ref_number = self.request.GET.get('ref')\r\n-        if not ref_number:\r\n+        reference_number = self.request.GET.get('ref')\r\n+\r\n+        if not reference_number:\r\n             raise Http404(\"Reference number is required\")\r\n-        \r\n-        context.update({\r\n-            'reference_number': ref_number,\r\n-            'DEBUG': settings.DEBUG,\r\n-        })\r\n-        return context\n+\r\n+        try:\r\n+            # Get bill details\r\n+            bill_response = BillService.get_bill_details(reference_number)\r\n+            if not bill_response['success']:\r\n+                raise Http404(\"Bill not found\")\r\n+\r\n+            # Generate quote\r\n+            quote_response = QuoteService.generate_quote(bill_response['data'])\r\n+            if not quote_response['success']:\r\n+                raise Http404(\"Could not generate quote\")\r\n+\r\n+            context.update({\r\n+                'title': f'Solar Quote - {reference_number}',\r\n+                'reference_number': reference_number,\r\n+                'bill_data': bill_response['data'],\r\n+                'quote_data': quote_response['data']\r\n+            })\r\n+            return context\r\n+\r\n+        except Exception as e:\r\n+            logger.exception(f\"Error rendering quote page: {str(e)}\")\r\n+            raise Http404(\"Could not generate quotation\")\r\n+\r\n+    def post(self, request, *args, **kwargs):\r\n+        \"\"\"Handle quote form submission.\"\"\"\r\n+        try:\r\n+            # Validate request data\r\n+            reference_number = request.POST.get('reference_number')\r\n+            name = request.POST.get('name')\r\n+            email = request.POST.get('email')\r\n+            phone = request.POST.get('phone')\r\n+\r\n+            if not all([reference_number, name, email, phone]):\r\n+                return JsonResponse({\r\n+                    'success': False,\r\n+                    'error': {\r\n+                        'message': 'All fields are required',\r\n+                        'code': 'VALIDATION_ERROR'\r\n+                    }\r\n+                }, status=400)\r\n+\r\n+            # Get quote data\r\n+            quote_response = QuoteService.get_quote_by_reference(reference_number)\r\n+            if not quote_response['success']:\r\n+                raise AppError(\r\n+                    message='Quote not found',\r\n+                    code='NOT_FOUND'\r\n+                )\r\n+\r\n+            # Save customer data\r\n+            customer_data = {\r\n+                'name': name,\r\n+                'email': email,\r\n+                'phone': phone,\r\n+                'reference_number': reference_number\r\n+            }\r\n+            customer_response = CustomerService.add_customer(customer_data)\r\n+\r\n+            # Send email notification\r\n+            if email:\r\n+                NotificationService.send_quote_email(\r\n+                    quote_data=quote_response['data'],\r\n+                    recipient=email\r\n+                )\r\n+\r\n+            return JsonResponse({\r\n+                'success': True,\r\n+                'message': 'Quote submitted successfully'\r\n+            })\r\n+\r\n+        except AppError as e:\r\n+            return JsonResponse({\r\n+                'success': False,\r\n+                'error': {\r\n+                    'message': str(e),\r\n+                    'code': e.code,\r\n+                    'data': e.data\r\n+                }\r\n+            }, status=400)\r\n+        except Exception as e:\r\n+            logger.exception(f\"Error processing quote submission: {str(e)}\")\r\n+            return JsonResponse({\r\n+                'success': False,\r\n+                'error': {\r\n+                    'message': 'An unexpected error occurred',\r\n+                    'code': 'SERVER_ERROR'\r\n+                }\r\n+            }, status=500)\r\n+\r\n+class ContactView(View):\r\n+    \"\"\"Contact form handling view.\"\"\"\r\n+\r\n+    def post(self, request):\r\n+        \"\"\"Handle contact form submission.\"\"\"\r\n+        try:\r\n+            name = request.POST.get('name')\r\n+            email = request.POST.get('email')\r\n+            message = request.POST.get('message')\r\n+            phone = request.POST.get('phone')\r\n+\r\n+            if not all([name, email, message]):\r\n+                return JsonResponse({\r\n+                    'success': False,\r\n+                    'error': {\r\n+                        'message': 'Name, email and message are required',\r\n+                        'code': 'VALIDATION_ERROR'\r\n+                    }\r\n+                }, status=400)\r\n+\r\n+            # Send notification to staff\r\n+            NotificationService.send_email(\r\n+                recipient=settings.CONTACT_EMAIL,\r\n+                subject=f\"New Contact Form Submission - {name}\",\r\n+                html_content=self._format_contact_email(\r\n+                    name=name,\r\n+                    email=email,\r\n+                    message=message,\r\n+                    phone=phone\r\n+                )\r\n+            )\r\n+\r\n+            # Send confirmation to user\r\n+            NotificationService.send_email(\r\n+                recipient=email,\r\n+                subject=f\"Thank you for contacting {settings.COMPANY_NAME}\",\r\n+                html_content=self._format_confirmation_email(name)\r\n+            )\r\n+\r\n+            return JsonResponse({\r\n+                'success': True,\r\n+                'message': 'Message sent successfully'\r\n+            })\r\n+\r\n+        except Exception as e:\r\n+            logger.exception(f\"Error processing contact form: {str(e)}\")\r\n+            return JsonResponse({\r\n+                'success': False,\r\n+                'error': {\r\n+                    'message': 'Failed to send message',\r\n+                    'code': 'SERVER_ERROR'\r\n+                }\r\n+            }, status=500)\r\n+\r\n+    def _format_contact_email(self, name, email, message, phone=None):\r\n+        \"\"\"Format contact form email for staff.\"\"\"\r\n+        return f\"\"\"\r\n+            <h2>New Contact Form Submission</h2>\r\n+            <p><strong>Name:</strong> {name}</p>\r\n+            <p><strong>Email:</strong> {email}</p>\r\n+            {'<p><strong>Phone:</strong> ' + phone + '</p>' if phone else ''}\r\n+            <p><strong>Message:</strong></p>\r\n+            <p>{message}</p>\r\n+        \"\"\"\r\n+\r\n+    def _format_confirmation_email(self, name):\r\n+        \"\"\"Format confirmation email for user.\"\"\"\r\n+        return f\"\"\"\r\n+            <h2>Thank you for contacting {settings.COMPANY_NAME}</h2>\r\n+            <p>Dear {name},</p>\r\n+            <p>We have received your message and will get back to you as soon as possible.</p>\r\n+            <p>Best regards,<br>{settings.COMPANY_NAME} Team</p>\r\n+        \"\"\"\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733414191776,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,9 +84,9 @@\n                     }\r\n                 }, status=400)\r\n \r\n             # Get quote data\r\n-            quote_response = QuoteService.get_quote_by_reference(reference_number)\r\n+            quote_response = QuoteService.get_quote(reference_number)  # Changed from get_quote_by_reference\r\n             if not quote_response['success']:\r\n                 raise AppError(\r\n                     message='Quote not found',\r\n                     code='NOT_FOUND'\r\n"
                },
                {
                    "date": 1733414339295,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,9 +84,9 @@\n                     }\r\n                 }, status=400)\r\n \r\n             # Get quote data\r\n-            quote_response = QuoteService.get_quote(reference_number)  # Changed from get_quote_by_reference\r\n+            quote_response = QuoteService.get_quote(reference_number)  # Ensure the method exists in QuoteService\r\n             if not quote_response['success']:\r\n                 raise AppError(\r\n                     message='Quote not found',\r\n                     code='NOT_FOUND'\r\n"
                },
                {
                    "date": 1733414396979,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,9 +84,9 @@\n                     }\r\n                 }, status=400)\r\n \r\n             # Get quote data\r\n-            quote_response = QuoteService.get_quote(reference_number)  # Ensure the method exists in QuoteService\r\n+            quote_response = QuoteService.generate_quote(reference_number)  # Ensure the method exists in QuoteService\r\n             if not quote_response['success']:\r\n                 raise AppError(\r\n                     message='Quote not found',\r\n                     code='NOT_FOUND'\r\n"
                }
            ],
            "date": 1733408397889,
            "name": "Commit-0",
            "content": "from django.views.generic import TemplateView\r\nfrom django.http import Http404\r\nfrom django.conf import settings\r\n\r\nclass IndexView(TemplateView):\r\n    \"\"\"Main landing page view.\"\"\"\r\n    template_name = 'index.html'\r\n\r\n    def get_context_data(self, **kwargs):\r\n        context = super().get_context_data(**kwargs)\r\n        context.update({\r\n            'DEBUG': settings.DEBUG,\r\n            'APP_VERSION': getattr(settings, 'APP_VERSION', '1.0.0'),\r\n        })\r\n        return context\r\n\r\nclass QuotationView(TemplateView):\r\n    \"\"\"Quotation page view.\"\"\"\r\n    template_name = 'quotation.html'\r\n\r\n    def get_context_data(self, **kwargs):\r\n        context = super().get_context_data(**kwargs)\r\n        ref_number = self.request.GET.get('ref')\r\n        if not ref_number:\r\n            raise Http404(\"Reference number is required\")\r\n        \r\n        context.update({\r\n            'reference_number': ref_number,\r\n            'DEBUG': settings.DEBUG,\r\n        })\r\n        return context"
        }
    ]
}