{
    "sourceFile": "solar/views/admin_views.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1733408299081,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733428901105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n from rest_framework.decorators import action\r\n from django.db.models import Q\r\n from django.db import transaction\r\n from django.contrib.auth.mixins import UserPassesTestMixin\r\n-from ..models import Panel, Inverter, PotentialCustomers, variableCosts\r\n+from ..models import Panel, Inverter, PotentialCustomers, VariableCosts\r\n from ..middleware.error_handler import AppError, ErrorTypes\r\n from ..serializers.admin_serializers import (\r\n     PanelSerializer,\r\n     InverterSerializer,\r\n"
                },
                {
                    "date": 1733429212804,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n from rest_framework.decorators import action\r\n from django.db.models import Q\r\n from django.db import transaction\r\n from django.contrib.auth.mixins import UserPassesTestMixin\r\n+from django.http import HttpRequest\r\n from ..models import Panel, Inverter, PotentialCustomers, VariableCosts\r\n from ..middleware.error_handler import AppError, ErrorTypes\r\n from ..serializers.admin_serializers import (\r\n     PanelSerializer,\r\n@@ -20,8 +21,12 @@\n class IsStaffMixin(UserPassesTestMixin):\r\n     def test_func(self):\r\n         return self.request.user.is_staff\r\n \r\n+    @property\r\n+    def request(self) -> HttpRequest:\r\n+        return self.get_request()\r\n+\r\n class PanelViewSet(IsStaffMixin, viewsets.ModelViewSet):\r\n     \"\"\"ViewSet for managing solar panels.\"\"\"\r\n     \r\n     queryset = Panel.objects.all()\r\n@@ -109,27 +114,27 @@\n \r\n     def get(self, request):\r\n         try:\r\n             costs = {\r\n-                'frame_cost_per_watt': variableCosts.objects.get(\r\n+                'frame_cost_per_watt': VariableCosts.objects.get(\r\n                     cost_name='Frame Cost per Watt'\r\n                 ).cost,\r\n-                'installation_cost_per_watt': variableCosts.objects.get(\r\n+                'installation_cost_per_watt': VariableCosts.objects.get(\r\n                     cost_name='Installation Cost per Watt'\r\n                 ).cost,\r\n-                'net_metering': variableCosts.objects.get(\r\n+                'net_metering': VariableCosts.objects.get(\r\n                     cost_name='Net Metering'\r\n                 ).cost,\r\n-                'labor_cost': variableCosts.objects.get(\r\n+                'labor_cost': VariableCosts.objects.get(\r\n                     cost_name='Labor Cost'\r\n                 ).cost\r\n             }\r\n             \r\n             return Response({\r\n                 'success': True,\r\n                 'data': costs\r\n             })\r\n-        except variableCosts.DoesNotExist as e:\r\n+        except VariableCosts.DoesNotExist as e:\r\n             logger.error(f'Missing cost configuration: {str(e)}')\r\n             raise AppError(\r\n                 message='Incomplete cost configuration',\r\n                 code=ErrorTypes.NOT_FOUND\r\n@@ -152,9 +157,9 @@\n                 )\r\n \r\n             with transaction.atomic():\r\n                 for cost_name, value in serializer.validated_data.items():\r\n-                    variableCosts.objects.update_or_create(\r\n+                    VariableCosts.objects.update_or_create(\r\n                         cost_name=cost_name,\r\n                         defaults={'cost': value}\r\n                     )\r\n \r\n"
                },
                {
                    "date": 1733429304042,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,11 @@\n import logging\r\n+from typing import Any, Dict, cast\r\n from rest_framework import viewsets, status\r\n from rest_framework.views import APIView\r\n from rest_framework.response import Response\r\n from rest_framework.decorators import action\r\n+from rest_framework.request import Request\r\n from django.db.models import Q\r\n from django.db import transaction\r\n from django.contrib.auth.mixins import UserPassesTestMixin\r\n from django.http import HttpRequest\r\n@@ -18,13 +20,17 @@\n \r\n logger = logging.getLogger(__name__)\r\n \r\n class IsStaffMixin(UserPassesTestMixin):\r\n-    def test_func(self):\r\n-        return self.request.user.is_staff\r\n+    def test_func(self) -> bool:\r\n+        user = getattr(self.request, 'user', None)\r\n+        return bool(user and user.is_staff)\r\n \r\n+    def get_request(self) -> Request:\r\n+        return self.request\r\n+\r\n     @property\r\n-    def request(self) -> HttpRequest:\r\n+    def request(self) -> Request:\r\n         return self.get_request()\r\n \r\n class PanelViewSet(IsStaffMixin, viewsets.ModelViewSet):\r\n     \"\"\"ViewSet for managing solar panels.\"\"\"\r\n@@ -33,11 +39,12 @@\n     serializer_class = PanelSerializer\r\n \r\n     def get_queryset(self):\r\n         queryset = Panel.objects.all()\r\n-        brand = self.request.query_params.get('brand', None)\r\n-        power_min = self.request.query_params.get('power_min', None)\r\n-        power_max = self.request.query_params.get('power_max', None)\r\n+        request = cast(Request, self.request)\r\n+        brand = request.query_params.get('brand', None)\r\n+        power_min = request.query_params.get('power_min', None)\r\n+        power_max = request.query_params.get('power_max', None)\r\n \r\n         if brand:\r\n             queryset = queryset.filter(brand__icontains=brand)\r\n         if power_min:\r\n@@ -145,9 +152,9 @@\n                 message='Failed to fetch price configuration',\r\n                 code=ErrorTypes.SERVER_ERROR\r\n             )\r\n \r\n-    def post(self, request):\r\n+    def post(self, request: Request) -> Response:\r\n         try:\r\n             serializer = PriceConfigurationSerializer(data=request.data)\r\n             if not serializer.is_valid():\r\n                 raise AppError(\r\n@@ -155,10 +162,12 @@\n                     code=ErrorTypes.VALIDATION_ERROR,\r\n                     data=serializer.errors\r\n                 )\r\n \r\n+            validated_data: Dict[str, float] = serializer.validated_data\r\n+            \r\n             with transaction.atomic():\r\n-                for cost_name, value in serializer.validated_data.items():\r\n+                for cost_name, value in validated_data.items():\r\n                     VariableCosts.objects.update_or_create(\r\n                         cost_name=cost_name,\r\n                         defaults={'cost': value}\r\n                     )\r\n"
                },
                {
                    "date": 1733429316312,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -162,9 +162,9 @@\n                     code=ErrorTypes.VALIDATION_ERROR,\r\n                     data=serializer.errors\r\n                 )\r\n \r\n-            validated_data: Dict[str, float] = serializer.validated_data\r\n+            validated_data: Dict[str, float] = serializer.validated_data # type: ignore\r\n             \r\n             with transaction.atomic():\r\n                 for cost_name, value in validated_data.items():\r\n                     VariableCosts.objects.update_or_create(\r\n"
                },
                {
                    "date": 1733429392887,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,19 +63,18 @@\n                 # Set new default\r\n                 panel = self.get_object()\r\n                 panel.default_choice = True\r\n                 panel.save()\r\n-                \r\n+\r\n             return Response({\r\n                 'success': True,\r\n                 'message': f'{panel.brand} set as default panel'\r\n             })\r\n         except Exception as e:\r\n             logger.exception('Error setting default panel')\r\n             raise AppError(\r\n-                message='Failed to set default panel',\r\n-                code=ErrorTypes.SERVER_ERROR\r\n-            )\r\n+                message='Failed to set default panel', code=ErrorTypes.SERVER_ERROR\r\n+            ) from e\r\n \r\n class InverterViewSet(IsStaffMixin, viewsets.ModelViewSet):\r\n     \"\"\"ViewSet for managing inverters.\"\"\"\r\n     \r\n@@ -104,17 +103,15 @@\n     serializer_class = CustomerSerializer\r\n \r\n     def get_queryset(self):\r\n         queryset = PotentialCustomers.objects.all()\r\n-        search = self.request.query_params.get('search', None)\r\n-        \r\n-        if search:\r\n+        if search := self.request.query_params.get('search', None):\r\n             queryset = queryset.filter(\r\n                 Q(name__icontains=search) |\r\n                 Q(phone__icontains=search) |\r\n                 Q(reference_number__icontains=search)\r\n             )\r\n-        \r\n+\r\n         return queryset.order_by('-created_at')\r\n \r\n class PriceConfigurationView(IsStaffMixin, APIView):\r\n     \"\"\"API endpoint for managing variable costs configuration.\"\"\"\r\n@@ -134,25 +131,24 @@\n                 'labor_cost': VariableCosts.objects.get(\r\n                     cost_name='Labor Cost'\r\n                 ).cost\r\n             }\r\n-            \r\n+\r\n             return Response({\r\n                 'success': True,\r\n                 'data': costs\r\n             })\r\n         except VariableCosts.DoesNotExist as e:\r\n             logger.error(f'Missing cost configuration: {str(e)}')\r\n             raise AppError(\r\n-                message='Incomplete cost configuration',\r\n-                code=ErrorTypes.NOT_FOUND\r\n-            )\r\n+                message='Incomplete cost configuration', code=ErrorTypes.NOT_FOUND\r\n+            ) from e\r\n         except Exception as e:\r\n             logger.exception('Error fetching price configuration')\r\n             raise AppError(\r\n                 message='Failed to fetch price configuration',\r\n-                code=ErrorTypes.SERVER_ERROR\r\n-            )\r\n+                code=ErrorTypes.SERVER_ERROR,\r\n+            ) from e\r\n \r\n     def post(self, request: Request) -> Response:\r\n         try:\r\n             serializer = PriceConfigurationSerializer(data=request.data)\r\n@@ -163,9 +159,9 @@\n                     data=serializer.errors\r\n                 )\r\n \r\n             validated_data: Dict[str, float] = serializer.validated_data # type: ignore\r\n-            \r\n+\r\n             with transaction.atomic():\r\n                 for cost_name, value in validated_data.items():\r\n                     VariableCosts.objects.update_or_create(\r\n                         cost_name=cost_name,\r\n@@ -181,6 +177,6 @@\n         except Exception as e:\r\n             logger.exception('Error updating price configuration')\r\n             raise AppError(\r\n                 message='Failed to update price configuration',\r\n-                code=ErrorTypes.SERVER_ERROR\r\n-            )\n\\ No newline at end of file\n+                code=ErrorTypes.SERVER_ERROR,\r\n+            ) from e\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733448705113,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,8 +37,16 @@\n     \r\n     queryset = Panel.objects.all()\r\n     serializer_class = PanelSerializer\r\n \r\n+    def create(self, request, *args, **kwargs):\r\n+        with transaction.atomic():\r\n+            # If this is the first panel, make it default\r\n+            if not Panel.objects.exists():\r\n+                request.data['default_choice'] = True\r\n+            response = super().create(request, *args, **kwargs)\r\n+            return response\r\n+\r\n     def get_queryset(self):\r\n         queryset = Panel.objects.all()\r\n         request = cast(Request, self.request)\r\n         brand = request.query_params.get('brand', None)\r\n@@ -74,8 +82,18 @@\n             raise AppError(\r\n                 message='Failed to set default panel', code=ErrorTypes.SERVER_ERROR\r\n             ) from e\r\n \r\n+    def perform_destroy(self, instance):\r\n+        with transaction.atomic():\r\n+            # If deleting default panel, set another one as default if exists\r\n+            if instance.default_choice:\r\n+                other_panel = Panel.objects.exclude(pk=instance.pk).first()\r\n+                if (other_panel):\r\n+                    other_panel.default_choice = True\r\n+                    other_panel.save()\r\n+            instance.delete()\r\n+\r\n class InverterViewSet(IsStaffMixin, viewsets.ModelViewSet):\r\n     \"\"\"ViewSet for managing inverters.\"\"\"\r\n     \r\n     queryset = Inverter.objects.all()\r\n"
                }
            ],
            "date": 1733408299081,
            "name": "Commit-0",
            "content": "import logging\r\nfrom rest_framework import viewsets, status\r\nfrom rest_framework.views import APIView\r\nfrom rest_framework.response import Response\r\nfrom rest_framework.decorators import action\r\nfrom django.db.models import Q\r\nfrom django.db import transaction\r\nfrom django.contrib.auth.mixins import UserPassesTestMixin\r\nfrom ..models import Panel, Inverter, PotentialCustomers, variableCosts\r\nfrom ..middleware.error_handler import AppError, ErrorTypes\r\nfrom ..serializers.admin_serializers import (\r\n    PanelSerializer,\r\n    InverterSerializer,\r\n    CustomerSerializer,\r\n    PriceConfigurationSerializer\r\n)\r\n\r\nlogger = logging.getLogger(__name__)\r\n\r\nclass IsStaffMixin(UserPassesTestMixin):\r\n    def test_func(self):\r\n        return self.request.user.is_staff\r\n\r\nclass PanelViewSet(IsStaffMixin, viewsets.ModelViewSet):\r\n    \"\"\"ViewSet for managing solar panels.\"\"\"\r\n    \r\n    queryset = Panel.objects.all()\r\n    serializer_class = PanelSerializer\r\n\r\n    def get_queryset(self):\r\n        queryset = Panel.objects.all()\r\n        brand = self.request.query_params.get('brand', None)\r\n        power_min = self.request.query_params.get('power_min', None)\r\n        power_max = self.request.query_params.get('power_max', None)\r\n\r\n        if brand:\r\n            queryset = queryset.filter(brand__icontains=brand)\r\n        if power_min:\r\n            queryset = queryset.filter(power__gte=power_min)\r\n        if power_max:\r\n            queryset = queryset.filter(power__lte=power_max)\r\n\r\n        return queryset.order_by('-power')\r\n\r\n    @action(detail=True, methods=['post'])\r\n    def set_default(self, request, pk=None):\r\n        try:\r\n            with transaction.atomic():\r\n                # Reset all panels\r\n                Panel.objects.all().update(default_choice=False)\r\n                # Set new default\r\n                panel = self.get_object()\r\n                panel.default_choice = True\r\n                panel.save()\r\n                \r\n            return Response({\r\n                'success': True,\r\n                'message': f'{panel.brand} set as default panel'\r\n            })\r\n        except Exception as e:\r\n            logger.exception('Error setting default panel')\r\n            raise AppError(\r\n                message='Failed to set default panel',\r\n                code=ErrorTypes.SERVER_ERROR\r\n            )\r\n\r\nclass InverterViewSet(IsStaffMixin, viewsets.ModelViewSet):\r\n    \"\"\"ViewSet for managing inverters.\"\"\"\r\n    \r\n    queryset = Inverter.objects.all()\r\n    serializer_class = InverterSerializer\r\n\r\n    def get_queryset(self):\r\n        queryset = Inverter.objects.all()\r\n        brand = self.request.query_params.get('brand', None)\r\n        available = self.request.query_params.get('available', None)\r\n        power_min = self.request.query_params.get('power_min', None)\r\n\r\n        if brand:\r\n            queryset = queryset.filter(brand__icontains=brand)\r\n        if available is not None:\r\n            queryset = queryset.filter(availability=available.lower() == 'true')\r\n        if power_min:\r\n            queryset = queryset.filter(power__gte=power_min)\r\n\r\n        return queryset.order_by('power')\r\n\r\nclass CustomerViewSet(IsStaffMixin, viewsets.ReadOnlyModelViewSet):\r\n    \"\"\"ViewSet for viewing potential customers.\"\"\"\r\n    \r\n    queryset = PotentialCustomers.objects.all()\r\n    serializer_class = CustomerSerializer\r\n\r\n    def get_queryset(self):\r\n        queryset = PotentialCustomers.objects.all()\r\n        search = self.request.query_params.get('search', None)\r\n        \r\n        if search:\r\n            queryset = queryset.filter(\r\n                Q(name__icontains=search) |\r\n                Q(phone__icontains=search) |\r\n                Q(reference_number__icontains=search)\r\n            )\r\n        \r\n        return queryset.order_by('-created_at')\r\n\r\nclass PriceConfigurationView(IsStaffMixin, APIView):\r\n    \"\"\"API endpoint for managing variable costs configuration.\"\"\"\r\n\r\n    def get(self, request):\r\n        try:\r\n            costs = {\r\n                'frame_cost_per_watt': variableCosts.objects.get(\r\n                    cost_name='Frame Cost per Watt'\r\n                ).cost,\r\n                'installation_cost_per_watt': variableCosts.objects.get(\r\n                    cost_name='Installation Cost per Watt'\r\n                ).cost,\r\n                'net_metering': variableCosts.objects.get(\r\n                    cost_name='Net Metering'\r\n                ).cost,\r\n                'labor_cost': variableCosts.objects.get(\r\n                    cost_name='Labor Cost'\r\n                ).cost\r\n            }\r\n            \r\n            return Response({\r\n                'success': True,\r\n                'data': costs\r\n            })\r\n        except variableCosts.DoesNotExist as e:\r\n            logger.error(f'Missing cost configuration: {str(e)}')\r\n            raise AppError(\r\n                message='Incomplete cost configuration',\r\n                code=ErrorTypes.NOT_FOUND\r\n            )\r\n        except Exception as e:\r\n            logger.exception('Error fetching price configuration')\r\n            raise AppError(\r\n                message='Failed to fetch price configuration',\r\n                code=ErrorTypes.SERVER_ERROR\r\n            )\r\n\r\n    def post(self, request):\r\n        try:\r\n            serializer = PriceConfigurationSerializer(data=request.data)\r\n            if not serializer.is_valid():\r\n                raise AppError(\r\n                    message='Invalid price configuration',\r\n                    code=ErrorTypes.VALIDATION_ERROR,\r\n                    data=serializer.errors\r\n                )\r\n\r\n            with transaction.atomic():\r\n                for cost_name, value in serializer.validated_data.items():\r\n                    variableCosts.objects.update_or_create(\r\n                        cost_name=cost_name,\r\n                        defaults={'cost': value}\r\n                    )\r\n\r\n            return Response({\r\n                'success': True,\r\n                'message': 'Price configuration updated successfully'\r\n            })\r\n        except AppError:\r\n            raise\r\n        except Exception as e:\r\n            logger.exception('Error updating price configuration')\r\n            raise AppError(\r\n                message='Failed to update price configuration',\r\n                code=ErrorTypes.SERVER_ERROR\r\n            )"
        }
    ]
}