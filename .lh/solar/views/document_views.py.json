{
    "sourceFile": "solar/views/document_views.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1733413715937,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733413753073,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,22 +135,82 @@\n \r\n class DocumentListView(APIView):\r\n     \"\"\"API endpoint for listing and managing documents.\"\"\"\r\n \r\n+# solar/views/document_views.py (continued)\r\n     def get(self, request):\r\n         try:\r\n             # Get query parameters\r\n             document_type = request.query_params.get('type')\r\n             page = int(request.query_params.get('page', 1))\r\n             page_size = int(request.query_params.get('page_size', 10))\r\n+            search = request.query_params.get('search')\r\n+            sort_by = request.query_params.get('sort_by', '-created_at')\r\n \r\n-            # Get available document types\r\n-            if document_type == 'types':\r\n-                return Response({\r\n-                    'success': True,\r\n-                    'data': DocumentService.get_document_types()\r\n-                })\r\n+            response = DocumentService.list_documents(\r\n+                document_type=document_type,\r\n\\ No newline at end of file\n+                page=page,\r\n+                page_size=page_size,\r\n+                search=search,\r\n+                sort_by=sort_by\r\n+            )\r\n \r\n-            # Get documents list (this would need to be implemented in DocumentService)\r\n-            # documents = DocumentService.list_documents(\r\n-            #     document_type=document_type,\r\n-            #     page\n+            return Response(response)\r\n+\r\n+        except ValueError:\r\n+            return Response({\r\n+                'success': False,\r\n+                'error': {\r\n+                    'message': 'Invalid pagination parameters',\r\n+                    'code': 'VALIDATION_ERROR'\r\n+                }\r\n+            }, status=status.HTTP_400_BAD_REQUEST)\r\n+        except Exception as e:\r\n+            logger.exception(\"Error listing documents\")\r\n+            return Response({\r\n+                'success': False,\r\n+                'error': {\r\n+                    'message': 'Failed to list documents',\r\n+                    'code': 'LIST_ERROR'\r\n+                }\r\n+            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\r\n+\r\n+    def post(self, request):\r\n+        \"\"\"Bulk operations on documents.\"\"\"\r\n+        try:\r\n+            operation = request.data.get('operation')\r\n+            document_paths = request.data.get('documents', [])\r\n+\r\n+            if not operation or not document_paths:\r\n+                raise AppError(\r\n+                    message='Operation and documents are required',\r\n+                    code='VALIDATION_ERROR'\r\n+                )\r\n+\r\n+            if operation == 'delete':\r\n+                response = DocumentService.bulk_delete_documents(document_paths)\r\n+                return Response(response)\r\n+            else:\r\n+                raise AppError(\r\n+                    message=f'Invalid operation: {operation}',\r\n+                    code='INVALID_OPERATION'\r\n+                )\r\n+\r\n+        except AppError as e:\r\n+            logger.warning(f\"Bulk document operation failed: {str(e)}\")\r\n+            return Response({\r\n+                'success': False,\r\n+                'error': {\r\n+                    'message': str(e),\r\n+                    'code': e.code,\r\n+                    'data': e.data\r\n+                }\r\n+            }, status=status.HTTP_400_BAD_REQUEST)\r\n+        except Exception as e:\r\n+            logger.exception(\"Unexpected error in bulk document operation\")\r\n+            return Response({\r\n+                'success': False,\r\n+                'error': {\r\n+                    'message': 'An unexpected error occurred',\r\n+                    'code': 'SERVER_ERROR'\r\n+                }\r\n+            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733414191785,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n                     NotificationService.send_email(\r\n                         recipient=email,\r\n                         subject=f\"Your {document_type.title()} Document\",\r\n                         html_content=f\"Please find your {document_type} attached.\",\r\n-                        attachment_path=response['data']['path']\r\n+                        attachments=[response['data']['path']]  # Fixed parameter\r\n                     )\r\n \r\n             return Response(response)\r\n \r\n@@ -145,9 +145,9 @@\n             page_size = int(request.query_params.get('page_size', 10))\r\n             search = request.query_params.get('search')\r\n             sort_by = request.query_params.get('sort_by', '-created_at')\r\n \r\n-            response = DocumentService.list_documents(\r\n+            response = DocumentService.get_documents(  # Changed from list_documents to get_documents\r\n                 document_type=document_type,\r\n                 page=page,\r\n                 page_size=page_size,\r\n                 search=search,\r\n"
                },
                {
                    "date": 1733414339310,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -145,9 +145,9 @@\n             page_size = int(request.query_params.get('page_size', 10))\r\n             search = request.query_params.get('search')\r\n             sort_by = request.query_params.get('sort_by', '-created_at')\r\n \r\n-            response = DocumentService.get_documents(  # Changed from list_documents to get_documents\r\n+            response = DocumentService.get_documents(  # Ensure the method exists in DocumentService\r\n                 document_type=document_type,\r\n                 page=page,\r\n                 page_size=page_size,\r\n                 search=search,\r\n"
                },
                {
                    "date": 1733430982941,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,10 +35,9 @@\n             )\r\n \r\n             # Send email if requested\r\n             if request.data.get('send_email'):\r\n-                email = request.data.get('email')\r\n-                if email:\r\n+                if email := request.data.get('email'):\r\n                     NotificationService.send_email(\r\n                         recipient=email,\r\n                         subject=f\"Your {document_type.title()} Document\",\r\n                         html_content=f\"Please find your {document_type} attached.\",\r\n@@ -71,29 +70,9 @@\n     \"\"\"API endpoint for downloading documents.\"\"\"\r\n \r\n     def get(self, request, document_path):\r\n         try:\r\n-            # Get document info\r\n-            document = DocumentService.get_document(document_path)\r\n-            if not document['success']:\r\n-                raise Http404('Document not found')\r\n-\r\n-            # Get file path\r\n-            file_path = document['data']['path']\r\n-            \r\n-            # Determine content type\r\n-            content_type, _ = mimetypes.guess_type(file_path)\r\n-            if not content_type:\r\n-                content_type = 'application/octet-stream'\r\n-\r\n-            # Return file response\r\n-            response = FileResponse(\r\n-                open(file_path, 'rb'),\r\n-                content_type=content_type\r\n-            )\r\n-            response['Content-Disposition'] = f'attachment; filename=\"{document_path}\"'\r\n-            return response\r\n-\r\n+            return self._extracted_from_get_4(document_path)\r\n         except Http404:\r\n             raise\r\n         except Exception as e:\r\n             logger.exception(\"Error downloading document\")\r\n@@ -104,8 +83,31 @@\n                     'code': 'DOWNLOAD_ERROR'\r\n                 }\r\n             }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\r\n \r\n+    # TODO Rename this here and in `get`\r\n+    def _extracted_from_get_4(self, document_path):\r\n+        # Get document info\r\n+        document = DocumentService.get_document(document_path)\r\n+        if not document['success']:\r\n+            raise Http404('Document not found')\r\n+\r\n+        # Get file path\r\n+        file_path = document['data']['path']\r\n+\r\n+        # Determine content type\r\n+        content_type, _ = mimetypes.guess_type(file_path)\r\n+        if not content_type:\r\n+            content_type = 'application/octet-stream'\r\n+\r\n+        # Return file response\r\n+        response = FileResponse(\r\n+            open(file_path, 'rb'),\r\n+            content_type=content_type\r\n+        )\r\n+        response['Content-Disposition'] = f'attachment; filename=\"{document_path}\"'\r\n+        return response\r\n+\r\n     def delete(self, request, document_path):\r\n         try:\r\n             response = DocumentService.delete_document(document_path)\r\n             return Response({\r\n@@ -138,25 +140,9 @@\n \r\n # solar/views/document_views.py (continued)\r\n     def get(self, request):\r\n         try:\r\n-            # Get query parameters\r\n-            document_type = request.query_params.get('type')\r\n-            page = int(request.query_params.get('page', 1))\r\n-            page_size = int(request.query_params.get('page_size', 10))\r\n-            search = request.query_params.get('search')\r\n-            sort_by = request.query_params.get('sort_by', '-created_at')\r\n-\r\n-            response = DocumentService.get_documents(  # Ensure the method exists in DocumentService\r\n-                document_type=document_type,\r\n-                page=page,\r\n-                page_size=page_size,\r\n-                search=search,\r\n-                sort_by=sort_by\r\n-            )\r\n-\r\n-            return Response(response)\r\n-\r\n+            return self._extracted_from_get_4(request)\r\n         except ValueError:\r\n             return Response({\r\n                 'success': False,\r\n                 'error': {\r\n@@ -173,29 +159,31 @@\n                     'code': 'LIST_ERROR'\r\n                 }\r\n             }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\r\n \r\n+    # TODO Rename this here and in `get`\r\n+    def _extracted_from_get_4(self, request):\r\n+        # Get query parameters\r\n+        document_type = request.query_params.get('type')\r\n+        page = int(request.query_params.get('page', 1))\r\n+        page_size = int(request.query_params.get('page_size', 10))\r\n+        search = request.query_params.get('search')\r\n+        sort_by = request.query_params.get('sort_by', '-created_at')\r\n+\r\n+        response = DocumentService.get_documents(  # Ensure the method exists in DocumentService\r\n+            document_type=document_type,\r\n+            page=page,\r\n+            page_size=page_size,\r\n+            search=search,\r\n+            sort_by=sort_by\r\n+        )\r\n+\r\n+        return Response(response)\r\n+\r\n     def post(self, request):\r\n         \"\"\"Bulk operations on documents.\"\"\"\r\n         try:\r\n-            operation = request.data.get('operation')\r\n-            document_paths = request.data.get('documents', [])\r\n-\r\n-            if not operation or not document_paths:\r\n-                raise AppError(\r\n-                    message='Operation and documents are required',\r\n-                    code='VALIDATION_ERROR'\r\n-                )\r\n-\r\n-            if operation == 'delete':\r\n-                response = DocumentService.bulk_delete_documents(document_paths)\r\n-                return Response(response)\r\n-            else:\r\n-                raise AppError(\r\n-                    message=f'Invalid operation: {operation}',\r\n-                    code='INVALID_OPERATION'\r\n-                )\r\n-\r\n+            return self._extracted_from_post_(request)\r\n         except AppError as e:\r\n             logger.warning(f\"Bulk document operation failed: {str(e)}\")\r\n             return Response({\r\n                 'success': False,\r\n@@ -212,5 +200,25 @@\n                 'error': {\r\n                     'message': 'An unexpected error occurred',\r\n                     'code': 'SERVER_ERROR'\r\n                 }\r\n-            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\\ No newline at end of file\n+            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\r\n+\r\n+    # TODO Rename this here and in `post`\r\n+    def _extracted_from_post_(self, request):\r\n+        operation = request.data.get('operation')\r\n+        document_paths = request.data.get('documents', [])\r\n+\r\n+        if not operation or not document_paths:\r\n+            raise AppError(\r\n+                message='Operation and documents are required',\r\n+                code='VALIDATION_ERROR'\r\n+            )\r\n+\r\n+        if operation != 'delete':\r\n+            raise AppError(\r\n+                message=f'Invalid operation: {operation}',\r\n+                code='INVALID_OPERATION'\r\n+            )\r\n+\r\n+        response = DocumentService.bulk_delete_documents(document_paths)\r\n+        return Response(response)\n\\ No newline at end of file\n"
                }
            ],
            "date": 1733413715937,
            "name": "Commit-0",
            "content": "# solar/views/document_views.py\r\nimport logging\r\nimport mimetypes\r\nfrom django.http import FileResponse, Http404\r\nfrom django.conf import settings\r\nfrom rest_framework.views import APIView\r\nfrom rest_framework.response import Response\r\nfrom rest_framework import status\r\nfrom rest_framework.parsers import MultiPartParser, FormParser\r\n\r\nfrom ..services.document_service import DocumentService\r\nfrom ..services.notification_service import NotificationService\r\nfrom ..middleware.error_handler import AppError\r\n\r\nlogger = logging.getLogger(__name__)\r\n\r\nclass DocumentGenerateView(APIView):\r\n    \"\"\"API endpoint for generating documents.\"\"\"\r\n\r\n    def post(self, request):\r\n        try:\r\n            # Validate request\r\n            document_type = request.data.get('type')\r\n            if not document_type:\r\n                raise AppError(\r\n                    message='Document type is required',\r\n                    code='VALIDATION_ERROR'\r\n                )\r\n\r\n            # Generate document\r\n            response = DocumentService.create_document(\r\n                document_type=document_type,\r\n                data=request.data.get('data', {}),\r\n                template_override=request.data.get('template')\r\n            )\r\n\r\n            # Send email if requested\r\n            if request.data.get('send_email'):\r\n                email = request.data.get('email')\r\n                if email:\r\n                    NotificationService.send_email(\r\n                        recipient=email,\r\n                        subject=f\"Your {document_type.title()} Document\",\r\n                        html_content=f\"Please find your {document_type} attached.\",\r\n                        attachment_path=response['data']['path']\r\n                    )\r\n\r\n            return Response(response)\r\n\r\n        except AppError as e:\r\n            logger.warning(f\"Document generation failed: {str(e)}\")\r\n            return Response({\r\n                'success': False,\r\n                'error': {\r\n                    'message': str(e),\r\n                    'code': e.code,\r\n                    'data': e.data\r\n                }\r\n            }, status=status.HTTP_400_BAD_REQUEST)\r\n        except Exception as e:\r\n            logger.exception(\"Unexpected error generating document\")\r\n            return Response({\r\n                'success': False,\r\n                'error': {\r\n                    'message': 'An unexpected error occurred',\r\n                    'code': 'SERVER_ERROR',\r\n                }\r\n            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\r\n\r\nclass DocumentDownloadView(APIView):\r\n    \"\"\"API endpoint for downloading documents.\"\"\"\r\n\r\n    def get(self, request, document_path):\r\n        try:\r\n            # Get document info\r\n            document = DocumentService.get_document(document_path)\r\n            if not document['success']:\r\n                raise Http404('Document not found')\r\n\r\n            # Get file path\r\n            file_path = document['data']['path']\r\n            \r\n            # Determine content type\r\n            content_type, _ = mimetypes.guess_type(file_path)\r\n            if not content_type:\r\n                content_type = 'application/octet-stream'\r\n\r\n            # Return file response\r\n            response = FileResponse(\r\n                open(file_path, 'rb'),\r\n                content_type=content_type\r\n            )\r\n            response['Content-Disposition'] = f'attachment; filename=\"{document_path}\"'\r\n            return response\r\n\r\n        except Http404:\r\n            raise\r\n        except Exception as e:\r\n            logger.exception(\"Error downloading document\")\r\n            return Response({\r\n                'success': False,\r\n                'error': {\r\n                    'message': 'Failed to download document',\r\n                    'code': 'DOWNLOAD_ERROR'\r\n                }\r\n            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\r\n\r\n    def delete(self, request, document_path):\r\n        try:\r\n            response = DocumentService.delete_document(document_path)\r\n            return Response({\r\n                'success': True,\r\n                'message': 'Document deleted successfully'\r\n            })\r\n\r\n        except AppError as e:\r\n            logger.warning(f\"Document deletion failed: {str(e)}\")\r\n            return Response({\r\n                'success': False,\r\n                'error': {\r\n                    'message': str(e),\r\n                    'code': e.code,\r\n                    'data': e.data\r\n                }\r\n            }, status=status.HTTP_400_BAD_REQUEST)\r\n        except Exception as e:\r\n            logger.exception(\"Unexpected error deleting document\")\r\n            return Response({\r\n                'success': False,\r\n                'error': {\r\n                    'message': 'An unexpected error occurred',\r\n                    'code': 'SERVER_ERROR',\r\n                }\r\n            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\r\n\r\nclass DocumentListView(APIView):\r\n    \"\"\"API endpoint for listing and managing documents.\"\"\"\r\n\r\n    def get(self, request):\r\n        try:\r\n            # Get query parameters\r\n            document_type = request.query_params.get('type')\r\n            page = int(request.query_params.get('page', 1))\r\n            page_size = int(request.query_params.get('page_size', 10))\r\n\r\n            # Get available document types\r\n            if document_type == 'types':\r\n                return Response({\r\n                    'success': True,\r\n                    'data': DocumentService.get_document_types()\r\n                })\r\n\r\n            # Get documents list (this would need to be implemented in DocumentService)\r\n            # documents = DocumentService.list_documents(\r\n            #     document_type=document_type,\r\n            #     page"
        }
    ]
}