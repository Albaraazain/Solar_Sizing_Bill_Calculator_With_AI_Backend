{
    "sourceFile": "solar/views/dashboard_views.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1733408413221,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733413660062,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,70 @@\n+from rest_framework.views import APIView\r\n+from rest_framework.response import Response\r\n+from django.db.models import Count, Avg, Sum\r\n+from django.db.models.functions import TruncMonth\r\n+from ..models import PotentialCustomers, Panel, Inverter\r\n+from ..middleware.error_handler import AppError, ErrorTypes\r\n+import logging\r\n+\r\n+logger = logging.getLogger(__name__)\r\n+\r\n+class DashboardStatsView(APIView):\r\n+    \"\"\"API endpoint for dashboard statistics.\"\"\"\r\n+\r\n+    def get(self, request):\r\n+        try:\r\n+            # Get basic counts\r\n+            stats = {\r\n+                'customers': {\r\n+                    'total': PotentialCustomers.objects.count(),\r\n+                    'monthly': self._get_monthly_customers(),\r\n+                },\r\n+                'inventory': {\r\n+                    'panels': {\r\n+                        'total': Panel.objects.count(),\r\n+                        'available': Panel.objects.filter(availability=True).count(),\r\n+                    },\r\n+                    'inverters': {\r\n+                        'total': Inverter.objects.count(),\r\n+                        'available': Inverter.objects.filter(availability=True).count(),\r\n+                    }\r\n+                },\r\n+                'system_sizes': self._get_system_size_distribution()\r\n+            }\r\n+\r\n+            return Response({\r\n+                'success': True,\r\n+                'data': stats\r\n+            })\r\n+        except Exception as e:\r\n+            logger.exception('Error fetching dashboard stats')\r\n+            raise AppError(\r\n+                message='Failed to fetch dashboard statistics',\r\n+                code=ErrorTypes.SERVER_ERROR\r\n+            )\r\n+\r\n+    def _get_monthly_customers(self):\r\n+        \"\"\"Get customer registration trends by month.\"\"\"\r\n+        monthly_stats = PotentialCustomers.objects.annotate(\r\n+            month=TruncMonth('created_at')\r\n+        ).values('month').annotate(\r\n+            count=Count('id')\r\n+        ).order_by('-month')[:6]\r\n+\r\n+        return [\r\n+            {\r\n+                'month': stat['month'].strftime('%b %Y'),\r\n+                'count': stat['count']\r\n+            }\r\n+            for stat in monthly_stats\r\n+        ]\r\n+\r\n+    def _get_system_size_distribution(self):\r\n+        \"\"\"Get distribution of recommended system sizes.\"\"\"\r\n+        # This is a placeholder - implement actual system size tracking\r\n+        return [\r\n+            {'size': '1-3kW', 'count': 15},\r\n+            {'size': '3-5kW', 'count': 25},\r\n+            {'size': '5-10kW', 'count': 10},\r\n+            {'size': '10kW+', 'count': 5},\r\n+        ]\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733413679573,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,140 +1,207 @@\n+# solar/views/dashboard_views.py\r\n+import logging\r\n from rest_framework.views import APIView\r\n from rest_framework.response import Response\r\n-from django.db.models import Count, Avg, Sum\r\n-from django.db.models.functions import TruncMonth\r\n-from ..models import PotentialCustomers, Panel, Inverter\r\n-from ..middleware.error_handler import AppError, ErrorTypes\r\n-import logging\r\n+from rest_framework import status\r\n+from django.contrib.auth.mixins import UserPassesTestMixin\r\n \r\n+from ..services.dashboard_service import DashboardService\r\n+from ..services.inventory_service import InventoryService\r\n+from ..services.customer_service import CustomerService\r\n+from ..middleware.error_handler import AppError\r\n+\r\n logger = logging.getLogger(__name__)\r\n \r\n-class DashboardStatsView(APIView):\r\n-    \"\"\"API endpoint for dashboard statistics.\"\"\"\r\n+class IsStaffMixin(UserPassesTestMixin):\r\n+    \"\"\"Mixin to ensure user is staff.\"\"\"\r\n+    def test_func(self):\r\n+        return self.request.user.is_staff\r\n \r\n+class DashboardMetricsView(IsStaffMixin, APIView):\r\n+    \"\"\"API endpoint for dashboard core metrics.\"\"\"\r\n+    \r\n     def get(self, request):\r\n         try:\r\n-            # Get basic counts\r\n-            stats = {\r\n-                'customers': {\r\n-                    'total': PotentialCustomers.objects.count(),\r\n-                    'monthly': self._get_monthly_customers(),\r\n-                },\r\n-                'inventory': {\r\n-                    'panels': {\r\n-                        'total': Panel.objects.count(),\r\n-                        'available': Panel.objects.filter(availability=True).count(),\r\n-                    },\r\n-                    'inverters': {\r\n-                        'total': Inverter.objects.count(),\r\n-                        'available': Inverter.objects.filter(availability=True).count(),\r\n-                    }\r\n-                },\r\n-                'system_sizes': self._get_system_size_distribution()\r\n+            # Get time range from query params\r\n+            time_range = request.query_params.get('range', '7d')  # Default to 7 days\r\n+            \r\n+            # Get all dashboard stats\r\n+            response = DashboardService.get_dashboard_stats()\r\n+            return Response(response)\r\n+\r\n+        except AppError as e:\r\n+            logger.warning(f\"Dashboard metrics fetch failed: {str(e)}\")\r\n+            return Response({\r\n+                'success': False,\r\n+                'error': {\r\n+                    'message': str(e),\r\n+                    'code': e.code,\r\n+                    'data': e.data\r\n+                }\r\n+            }, status=status.HTTP_400_BAD_REQUEST)\r\n+        except Exception as e:\r\n+            logger.exception(\"Unexpected error fetching dashboard metrics\")\r\n+            return Response({\r\n+                'success': False,\r\n+                'error': {\r\n+                    'message': 'An unexpected error occurred',\r\n+                    'code': 'SERVER_ERROR',\r\n+                }\r\n+            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\r\n+\r\n+class DashboardChartsView(IsStaffMixin, APIView):\r\n+    \"\"\"API endpoint for dashboard charts data.\"\"\"\r\n+    \r\n+    def get(self, request):\r\n+        try:\r\n+            # Get chart type from query params\r\n+            chart_type = request.query_params.get('type', 'all')\r\n+            time_range = request.query_params.get('range', '30d')\r\n+\r\n+            # Define which charts to return\r\n+            charts_to_fetch = {\r\n+                'customers': self._get_customer_charts,\r\n+                'inventory': self._get_inventory_charts,\r\n+                'revenue': self._get_revenue_charts,\r\n+                'performance': self._get_performance_charts\r\n             }\r\n \r\n+            if chart_type == 'all':\r\n+                response_data = {}\r\n+                for chart_name, fetch_func in charts_to_fetch.items():\r\n+                    response_data[chart_name] = fetch_func(time_range)\r\n+            else:\r\n+                fetch_func = charts_to_fetch.get(chart_type)\r\n+                if not fetch_func:\r\n+                    raise AppError(\r\n+                        message=f'Invalid chart type: {chart_type}',\r\n+                        code='INVALID_TYPE'\r\n+                    )\r\n+                response_data = {chart_type: fetch_func(time_range)}\r\n+\r\n             return Response({\r\n                 'success': True,\r\n-                'data': stats\r\n+                'data': response_data\r\n             })\r\n+\r\n+        except AppError as e:\r\n+            logger.warning(f\"Dashboard charts fetch failed: {str(e)}\")\r\n+            return Response({\r\n+                'success': False,\r\n+                'error': {\r\n+                    'message': str(e),\r\n+                    'code': e.code,\r\n+                    'data': e.data\r\n+                }\r\n+            }, status=status.HTTP_400_BAD_REQUEST)\r\n         except Exception as e:\r\n-            logger.exception('Error fetching dashboard stats')\r\n+            logger.exception(\"Unexpected error fetching dashboard charts\")\r\n+            return Response({\r\n+                'success': False,\r\n+                'error': {\r\n+                    'message': 'An unexpected error occurred',\r\n+                    'code': 'SERVER_ERROR',\r\n+                }\r\n+            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\r\n+\r\n+    def _get_customer_charts(self, time_range: str) -> dict:\r\n+        \"\"\"Get customer-related charts data.\"\"\"\r\n+        customer_stats = CustomerService.get_customer_stats()\r\n+        if not customer_stats['success']:\r\n             raise AppError(\r\n-                message='Failed to fetch dashboard statistics',\r\n-                code=ErrorTypes.SERVER_ERROR\r\n+                message='Failed to fetch customer stats',\r\n\\ No newline at end of file\n+                code='DATA_ERROR'\r\n             )\r\n+        return customer_stats['data']\r\n \r\n-    def _get_monthly_customers(self):\r\n-        \"\"\"Get customer registration trends by month.\"\"\"\r\n-        monthly_stats = PotentialCustomers.objects.annotate(\r\n-            month=TruncMonth('created_at')\r\n-        ).values('month').annotate(\r\n-            count=Count('id')\r\n-        ).order_by('-month')[:6]\r\n+    def _get_inventory_charts(self, time_range: str) -> dict:\r\n+        \"\"\"Get inventory-related charts data.\"\"\"\r\n+        inventory_stats = InventoryService.get_inventory_stats()\r\n+        if not inventory_stats['success']:\r\n+            raise AppError(\r\n+                message='Failed to fetch inventory stats',\r\n+                code='DATA_ERROR'\r\n+            )\r\n+        return inventory_stats['data']\r\n \r\n-        return [\r\n-            {\r\n-                'month': stat['month'].strftime('%b %Y'),\r\n-                'count': stat['count']\r\n-            }\r\n-            for stat in monthly_stats\r\n-        ]\r\n+    def _get_revenue_charts(self, time_range: str) -> dict:\r\n+        \"\"\"Get revenue-related charts data.\"\"\"\r\n+        performance_metrics = DashboardService.get_performance_metrics()\r\n+        if not performance_metrics['success']:\r\n+            raise AppError(\r\n+                message='Failed to fetch performance metrics',\r\n+                code='DATA_ERROR'\r\n+            )\r\n+        return performance_metrics['data'].get('revenue', {})\r\n \r\n-    def _get_system_size_distribution(self):\r\n-        \"\"\"Get distribution of recommended system sizes.\"\"\"\r\n-        # This is a placeholder - implement actual system size tracking\r\n-        return [\r\n-            {'size': '1-3kW', 'count': 15},\r\n-            {'size': '3-5kW', 'count': 25},\r\n-            {'size': '5-10kW', 'count': 10},\r\n-            {'size': '10kW+', 'count': 5},\r\n-        ]\n-from rest_framework.views import APIView\r\n-from rest_framework.response import Response\r\n-from django.db.models import Count, Avg, Sum\r\n-from django.db.models.functions import TruncMonth\r\n-from ..models import PotentialCustomers, Panel, Inverter\r\n-from ..middleware.error_handler import AppError, ErrorTypes\r\n-import logging\r\n+    def _get_performance_charts(self, time_range: str) -> dict:\r\n+        \"\"\"Get performance-related charts data.\"\"\"\r\n+        performance_metrics = DashboardService.get_performance_metrics()\r\n+        if not performance_metrics['success']:\r\n+            raise AppError(\r\n+                message='Failed to fetch performance metrics',\r\n+                code='DATA_ERROR'\r\n+            )\r\n+        return {\r\n+            k: v for k, v in performance_metrics['data'].items()\r\n+            if k != 'revenue'  # Revenue is handled separately\r\n+        }\r\n \r\n-logger = logging.getLogger(__name__)\r\n-\r\n-class DashboardStatsView(APIView):\r\n-    \"\"\"API endpoint for dashboard statistics.\"\"\"\r\n-\r\n+class DashboardSummaryView(IsStaffMixin, APIView):\r\n+    \"\"\"API endpoint for dashboard summary data.\"\"\"\r\n+    \r\n     def get(self, request):\r\n         try:\r\n-            # Get basic counts\r\n-            stats = {\r\n-                'customers': {\r\n-                    'total': PotentialCustomers.objects.count(),\r\n-                    'monthly': self._get_monthly_customers(),\r\n+            # Get all the metrics we need for the summary\r\n+            dashboard_stats = DashboardService.get_dashboard_stats()\r\n+            performance_metrics = DashboardService.get_performance_metrics()\r\n+            customer_stats = CustomerService.get_customer_stats()\r\n+            inventory_stats = InventoryService.get_inventory_stats()\r\n+\r\n+            # Combine all stats into a summary\r\n+            summary = {\r\n+                'quick_stats': {\r\n+                    'total_customers': customer_stats['data']['total_customers'],\r\n+                    'total_capacity': inventory_stats['data']['total_capacity'],\r\n+                    'conversion_rate': performance_metrics['data']['quote_conversion_rate'],\r\n+                    'average_satisfaction': performance_metrics['data']['customer_satisfaction']['average_rating']\r\n                 },\r\n-                'inventory': {\r\n-                    'panels': {\r\n-                        'total': Panel.objects.count(),\r\n-                        'available': Panel.objects.filter(availability=True).count(),\r\n-                    },\r\n-                    'inverters': {\r\n-                        'total': Inverter.objects.count(),\r\n-                        'available': Inverter.objects.filter(availability=True).count(),\r\n-                    }\r\n-                },\r\n-                'system_sizes': self._get_system_size_distribution()\r\n+                'trends': dashboard_stats['data']['trends'],\r\n+                'recent_activity': self._get_recent_activity(),\r\n+                'alerts': self._get_system_alerts()\r\n             }\r\n \r\n             return Response({\r\n                 'success': True,\r\n-                'data': stats\r\n+                'data': summary\r\n             })\r\n+\r\n+        except AppError as e:\r\n+            logger.warning(f\"Dashboard summary fetch failed: {str(e)}\")\r\n+            return Response({\r\n+                'success': False,\r\n+                'error': {\r\n+                    'message': str(e),\r\n+                    'code': e.code,\r\n+                    'data': e.data\r\n+                }\r\n+            }, status=status.HTTP_400_BAD_REQUEST)\r\n         except Exception as e:\r\n-            logger.exception('Error fetching dashboard stats')\r\n-            raise AppError(\r\n-                message='Failed to fetch dashboard statistics',\r\n-                code=ErrorTypes.SERVER_ERROR\r\n-            )\r\n+            logger.exception(\"Unexpected error fetching dashboard summary\")\r\n+            return Response({\r\n+                'success': False,\r\n+                'error': {\r\n+                    'message': 'An unexpected error occurred',\r\n+                    'code': 'SERVER_ERROR',\r\n+                }\r\n+            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\r\n \r\n-    def _get_monthly_customers(self):\r\n-        \"\"\"Get customer registration trends by month.\"\"\"\r\n-        monthly_stats = PotentialCustomers.objects.annotate(\r\n-            month=TruncMonth('created_at')\r\n-        ).values('month').annotate(\r\n-            count=Count('id')\r\n-        ).order_by('-month')[:6]\r\n+    def _get_recent_activity(self) -> list:\r\n+        \"\"\"Get recent system activity.\"\"\"\r\n+        # This would typically come from an activity log\r\n+        return []\r\n \r\n-        return [\r\n-            {\r\n-                'month': stat['month'].strftime('%b %Y'),\r\n-                'count': stat['count']\r\n-            }\r\n-            for stat in monthly_stats\r\n-        ]\r\n-\r\n-    def _get_system_size_distribution(self):\r\n-        \"\"\"Get distribution of recommended system sizes.\"\"\"\r\n-        # This is a placeholder - implement actual system size tracking\r\n-        return [\r\n-            {'size': '1-3kW', 'count': 15},\r\n-            {'size': '3-5kW', 'count': 25},\r\n-            {'size': '5-10kW', 'count': 10},\r\n-            {'size': '10kW+', 'count': 5},\r\n-        ]\n+    def _get_system_alerts(self) -> list:\r\n+        \"\"\"Get system alerts and notifications.\"\"\"\r\n+        # This would typically come from a notification system\r\n+        return []\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733414191766,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,21 +2,21 @@\n import logging\r\n from rest_framework.views import APIView\r\n from rest_framework.response import Response\r\n from rest_framework import status\r\n-from django.contrib.auth.mixins import UserPassesTestMixin\r\n+from django.contrib.auth.mixins import LoginRequiredMixin, UserPassesTestMixin\r\n \r\n from ..services.dashboard_service import DashboardService\r\n from ..services.inventory_service import InventoryService\r\n from ..services.customer_service import CustomerService\r\n from ..middleware.error_handler import AppError\r\n \r\n logger = logging.getLogger(__name__)\r\n \r\n-class IsStaffMixin(UserPassesTestMixin):\r\n+class IsStaffMixin(LoginRequiredMixin, UserPassesTestMixin):\r\n     \"\"\"Mixin to ensure user is staff.\"\"\"\r\n     def test_func(self):\r\n-        return self.request.user.is_staff\r\n+        return self.request.user.is_staff if hasattr(self, 'request') else False\r\n \r\n class DashboardMetricsView(IsStaffMixin, APIView):\r\n     \"\"\"API endpoint for dashboard core metrics.\"\"\"\r\n     \r\n"
                },
                {
                    "date": 1733414339280,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n \r\n class IsStaffMixin(LoginRequiredMixin, UserPassesTestMixin):\r\n     \"\"\"Mixin to ensure user is staff.\"\"\"\r\n     def test_func(self):\r\n-        return self.request.user.is_staff if hasattr(self, 'request') else False\r\n+        return self.request.user.is_staff if self.request else False  # Ensure request is accessed correctly\r\n \r\n class DashboardMetricsView(IsStaffMixin, APIView):\r\n     \"\"\"API endpoint for dashboard core metrics.\"\"\"\r\n     \r\n"
                },
                {
                    "date": 1733429492653,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n from rest_framework.views import APIView\r\n from rest_framework.response import Response\r\n from rest_framework import status\r\n from django.contrib.auth.mixins import LoginRequiredMixin, UserPassesTestMixin\r\n+from typing import Any\r\n \r\n from ..services.dashboard_service import DashboardService\r\n from ..services.inventory_service import InventoryService\r\n from ..services.customer_service import CustomerService\r\n@@ -13,10 +14,11 @@\n logger = logging.getLogger(__name__)\r\n \r\n class IsStaffMixin(LoginRequiredMixin, UserPassesTestMixin):\r\n     \"\"\"Mixin to ensure user is staff.\"\"\"\r\n-    def test_func(self):\r\n-        return self.request.user.is_staff if self.request else False  # Ensure request is accessed correctly\r\n+    def test_func(self) -> bool:\r\n+        view: Any = self\r\n+        return bool(view.request and view.request.user and view.request.user.is_staff)\r\n \r\n class DashboardMetricsView(IsStaffMixin, APIView):\r\n     \"\"\"API endpoint for dashboard core metrics.\"\"\"\r\n     \r\n"
                }
            ],
            "date": 1733408413221,
            "name": "Commit-0",
            "content": "from rest_framework.views import APIView\r\nfrom rest_framework.response import Response\r\nfrom django.db.models import Count, Avg, Sum\r\nfrom django.db.models.functions import TruncMonth\r\nfrom ..models import PotentialCustomers, Panel, Inverter\r\nfrom ..middleware.error_handler import AppError, ErrorTypes\r\nimport logging\r\n\r\nlogger = logging.getLogger(__name__)\r\n\r\nclass DashboardStatsView(APIView):\r\n    \"\"\"API endpoint for dashboard statistics.\"\"\"\r\n\r\n    def get(self, request):\r\n        try:\r\n            # Get basic counts\r\n            stats = {\r\n                'customers': {\r\n                    'total': PotentialCustomers.objects.count(),\r\n                    'monthly': self._get_monthly_customers(),\r\n                },\r\n                'inventory': {\r\n                    'panels': {\r\n                        'total': Panel.objects.count(),\r\n                        'available': Panel.objects.filter(availability=True).count(),\r\n                    },\r\n                    'inverters': {\r\n                        'total': Inverter.objects.count(),\r\n                        'available': Inverter.objects.filter(availability=True).count(),\r\n                    }\r\n                },\r\n                'system_sizes': self._get_system_size_distribution()\r\n            }\r\n\r\n            return Response({\r\n                'success': True,\r\n                'data': stats\r\n            })\r\n        except Exception as e:\r\n            logger.exception('Error fetching dashboard stats')\r\n            raise AppError(\r\n                message='Failed to fetch dashboard statistics',\r\n                code=ErrorTypes.SERVER_ERROR\r\n            )\r\n\r\n    def _get_monthly_customers(self):\r\n        \"\"\"Get customer registration trends by month.\"\"\"\r\n        monthly_stats = PotentialCustomers.objects.annotate(\r\n            month=TruncMonth('created_at')\r\n        ).values('month').annotate(\r\n            count=Count('id')\r\n        ).order_by('-month')[:6]\r\n\r\n        return [\r\n            {\r\n                'month': stat['month'].strftime('%b %Y'),\r\n                'count': stat['count']\r\n            }\r\n            for stat in monthly_stats\r\n        ]\r\n\r\n    def _get_system_size_distribution(self):\r\n        \"\"\"Get distribution of recommended system sizes.\"\"\"\r\n        # This is a placeholder - implement actual system size tracking\r\n        return [\r\n            {'size': '1-3kW', 'count': 15},\r\n            {'size': '3-5kW', 'count': 25},\r\n            {'size': '5-10kW', 'count': 10},\r\n            {'size': '10kW+', 'count': 5},\r\n        ]"
        }
    ]
}