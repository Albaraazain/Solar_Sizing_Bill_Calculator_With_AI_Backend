{
    "sourceFile": "solar/views/auth_views.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1733403319315,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733406570432,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,12 @@\n # solar/views/auth_views.py\r\n+import jwt\r\n from rest_framework.views import APIView\r\n from rest_framework.response import Response\r\n from rest_framework import status\r\n from django.contrib.auth import authenticate\r\n+\r\n+from EnergyCove import settings\r\n from ..utils.auth import generate_token\r\n \r\n class LoginView(APIView):\r\n     def post(self, request):\r\n"
                },
                {
                    "date": 1733429392899,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,30 +1,31 @@\n # solar/views/auth_views.py\r\n-import jwt\r\n+from django.contrib.auth import authenticate, get_user_model\r\n from rest_framework.views import APIView\r\n from rest_framework.response import Response\r\n from rest_framework import status\r\n-from django.contrib.auth import authenticate\r\n-\r\n+import jwt\r\n from EnergyCove import settings\r\n from ..utils.auth import generate_token\r\n \r\n+User = get_user_model()\r\n+\r\n class LoginView(APIView):\r\n     def post(self, request):\r\n         username = request.data.get('username')\r\n         password = request.data.get('password')\r\n         \r\n         user = authenticate(username=username, password=password)\r\n         if user:\r\n-            token = generate_token(user.id)\r\n-            refresh_token = generate_token(user.id, expiry_hours=168)  # 7 days\r\n+            token = generate_token(user.pk)\r\n+            refresh_token = generate_token(user.pk, expiry_hours=168)  # 7 days\r\n             return Response({\r\n                 'success': True,\r\n                 'data': {\r\n                     'token': token,\r\n                     'refreshToken': refresh_token,\r\n                     'user': {\r\n-                        'id': user.id,\r\n+                        'id': user.pk,\r\n                         'username': user.username,\r\n                         'email': user.email\r\n                     }\r\n                 }\r\n"
                },
                {
                    "date": 1733432090212,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,59 +1,33 @@\n # solar/views/auth_views.py\r\n-from django.contrib.auth import authenticate, get_user_model\r\n from rest_framework.views import APIView\r\n from rest_framework.response import Response\r\n from rest_framework import status\r\n-import jwt\r\n-from EnergyCove import settings\r\n-from ..utils.auth import generate_token\r\n+from ..services.auth_service import AuthService\r\n \r\n-User = get_user_model()\r\n-\r\n class LoginView(APIView):\r\n     def post(self, request):\r\n-        username = request.data.get('username')\r\n-        password = request.data.get('password')\r\n-        \r\n-        user = authenticate(username=username, password=password)\r\n-        if user:\r\n-            token = generate_token(user.pk)\r\n-            refresh_token = generate_token(user.pk, expiry_hours=168)  # 7 days\r\n+        try:\r\n+            username = request.data.get('username')\r\n+            password = request.data.get('password')\r\n+            \r\n+            result = AuthService.login(username=username, password=password)\r\n+            return Response(result)\r\n+            \r\n+        except Exception as e:\r\n             return Response({\r\n-                'success': True,\r\n-                'data': {\r\n-                    'token': token,\r\n-                    'refreshToken': refresh_token,\r\n-                    'user': {\r\n-                        'id': user.pk,\r\n-                        'username': user.username,\r\n-                        'email': user.email\r\n-                    }\r\n-                }\r\n-            })\r\n-        return Response({\r\n-            'success': False,\r\n-            'message': 'Invalid credentials'\r\n-        }, status=status.HTTP_401_UNAUTHORIZED)\r\n+                'success': False,\r\n+                'error': str(e)\r\n+            }, status=status.HTTP_401_UNAUTHORIZED)\r\n \r\n class RefreshTokenView(APIView):\r\n     def post(self, request):\r\n-        refresh_token = request.data.get('refreshToken')\r\n         try:\r\n-            # Verify refresh token\r\n-            payload = jwt.decode(refresh_token, settings.SECRET_KEY, algorithms=['HS256'])\r\n-            # Generate new tokens\r\n-            new_token = generate_token(payload['user_id'])\r\n-            new_refresh = generate_token(payload['user_id'], expiry_hours=168)\r\n+            refresh_token = request.data.get('refreshToken')\r\n+            result = AuthService.refresh_token(refresh_token)\r\n+            return Response(result)\r\n             \r\n+        except Exception as e:\r\n             return Response({\r\n-                'success': True,\r\n-                'data': {\r\n-                    'token': new_token,\r\n-                    'refreshToken': new_refresh\r\n-                }\r\n-            })\r\n-        except jwt.InvalidTokenError:\r\n-            return Response({\r\n                 'success': False,\r\n-                'message': 'Invalid refresh token'\r\n+                'error': str(e)\r\n             }, status=status.HTTP_401_UNAUTHORIZED)\n\\ No newline at end of file\n"
                }
            ],
            "date": 1733403319315,
            "name": "Commit-0",
            "content": "# solar/views/auth_views.py\r\nfrom rest_framework.views import APIView\r\nfrom rest_framework.response import Response\r\nfrom rest_framework import status\r\nfrom django.contrib.auth import authenticate\r\nfrom ..utils.auth import generate_token\r\n\r\nclass LoginView(APIView):\r\n    def post(self, request):\r\n        username = request.data.get('username')\r\n        password = request.data.get('password')\r\n        \r\n        user = authenticate(username=username, password=password)\r\n        if user:\r\n            token = generate_token(user.id)\r\n            refresh_token = generate_token(user.id, expiry_hours=168)  # 7 days\r\n            return Response({\r\n                'success': True,\r\n                'data': {\r\n                    'token': token,\r\n                    'refreshToken': refresh_token,\r\n                    'user': {\r\n                        'id': user.id,\r\n                        'username': user.username,\r\n                        'email': user.email\r\n                    }\r\n                }\r\n            })\r\n        return Response({\r\n            'success': False,\r\n            'message': 'Invalid credentials'\r\n        }, status=status.HTTP_401_UNAUTHORIZED)\r\n\r\nclass RefreshTokenView(APIView):\r\n    def post(self, request):\r\n        refresh_token = request.data.get('refreshToken')\r\n        try:\r\n            # Verify refresh token\r\n            payload = jwt.decode(refresh_token, settings.SECRET_KEY, algorithms=['HS256'])\r\n            # Generate new tokens\r\n            new_token = generate_token(payload['user_id'])\r\n            new_refresh = generate_token(payload['user_id'], expiry_hours=168)\r\n            \r\n            return Response({\r\n                'success': True,\r\n                'data': {\r\n                    'token': new_token,\r\n                    'refreshToken': new_refresh\r\n                }\r\n            })\r\n        except jwt.InvalidTokenError:\r\n            return Response({\r\n                'success': False,\r\n                'message': 'Invalid refresh token'\r\n            }, status=status.HTTP_401_UNAUTHORIZED)"
        }
    ]
}