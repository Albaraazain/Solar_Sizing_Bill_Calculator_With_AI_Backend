{
    "sourceFile": "solar/services/dashboard_service",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1733412019788,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733412048099,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,5 +130,87 @@\n     def _get_daily_trend(queryset, date_field: str, days: int) -> List[Dict[str, Any]]:\r\n         \"\"\"Get daily trend data.\"\"\"\r\n         return list(\r\n             queryset.filter(**{\r\n-                f'{date\n\\ No newline at end of file\n+                f'{date_field}__gte': datetime.now() - timedelta(days=days)\r\n+            })\r\n+            .annotate(date=TruncDate(date_field))\r\n+            .values('date')\r\n+            .annotate(count=Count('id'))\r\n+            .order_by('date')\r\n+        )\r\n+\r\n+    @classmethod\r\n+    def _get_popular_system_sizes(cls) -> List[Dict[str, Any]]:\r\n+        \"\"\"Get distribution of popular system sizes.\"\"\"\r\n+        # This would typically come from your quotes or installations\r\n+        # For now, returning predefined ranges\r\n+        ranges = [\r\n+            {'range': '1-3kW', 'count': 0},\r\n+            {'range': '3-5kW', 'count': 0},\r\n+            {'range': '5-10kW', 'count': 0},\r\n+            {'range': '10kW+', 'count': 0}\r\n+        ]\r\n+\r\n+        return ranges\r\n+\r\n+    @classmethod\r\n+    def _get_geographic_distribution(cls) -> List[Dict[str, Any]]:\r\n+        \"\"\"Get geographic distribution of customers.\"\"\"\r\n+        try:\r\n+            return list(\r\n+                PotentialCustomers.objects.values('address')\r\n+                .annotate(count=Count('id'))\r\n+                .order_by('-count')\r\n+            )\r\n+        except Exception:\r\n+            return []\r\n+\r\n+    @classmethod\r\n+    def get_performance_metrics(cls) -> Dict[str, Any]:\r\n+        \"\"\"Get system performance metrics.\"\"\"\r\n+        try:\r\n+            return cls.format_response({\r\n+                'quote_conversion_rate': cls._calculate_quote_conversion_rate(),\r\n+                'average_response_time': cls._calculate_response_time(),\r\n+                'customer_satisfaction': cls._get_customer_satisfaction(),\r\n+                'system_efficiency': cls._get_system_efficiency()\r\n+            })\r\n+        except Exception as e:\r\n+            cls.handle_error(e, 'METRICS_ERROR', 'Failed to fetch performance metrics')\r\n+\r\n+    @staticmethod\r\n+    def _calculate_quote_conversion_rate() -> float:\r\n+        \"\"\"Calculate quote to installation conversion rate.\"\"\"\r\n+        # This would be implemented when you have quote tracking\r\n+        return 0.0\r\n+\r\n+    @staticmethod\r\n+    def _calculate_response_time() -> float:\r\n+        \"\"\"Calculate average response time for customer inquiries.\"\"\"\r\n+        # This would be implemented when you have inquiry tracking\r\n+        return 0.0\r\n+\r\n+    @staticmethod\r\n+    def _get_customer_satisfaction() -> Dict[str, Any]:\r\n+        \"\"\"Get customer satisfaction metrics.\"\"\"\r\n+        # This would be implemented when you have feedback tracking\r\n+        return {\r\n+            'average_rating': 0.0,\r\n+            'total_ratings': 0,\r\n+            'distribution': {\r\n+                '5_star': 0,\r\n+                '4_star': 0,\r\n+                '3_star': 0,\r\n+                '2_star': 0,\r\n+                '1_star': 0\r\n+            }\r\n+        }\r\n+\r\n+    @staticmethod\r\n+    def _get_system_efficiency() -> Dict[str, Any]:\r\n+        \"\"\"Get system efficiency metrics.\"\"\"\r\n+        return {\r\n+            'average_production': 0.0,\r\n+            'peak_efficiency': 0.0,\r\n+            'maintenance_rate': 0.0\r\n+        }\n\\ No newline at end of file\n"
                }
            ],
            "date": 1733412019788,
            "name": "Commit-0",
            "content": "# solar/services/dashboard_service.py\r\nfrom typing import Dict, Any\r\nfrom datetime import datetime, timedelta\r\nfrom django.db.models import Count, Avg, Sum\r\nfrom django.db.models.functions import TruncMonth, TruncDate\r\n\r\nfrom .base_service import BaseService\r\nfrom .customer_service import CustomerService\r\nfrom .inventory_service import InventoryService\r\nfrom ..models import PotentialCustomers, Panel, Inverter\r\nfrom ..middleware.error_handler import AppError\r\n\r\nclass DashboardService(BaseService):\r\n    \"\"\"Service for handling admin dashboard statistics and analytics.\"\"\"\r\n\r\n    @classmethod\r\n    def get_dashboard_stats(cls) -> Dict[str, Any]:\r\n        \"\"\"Get comprehensive dashboard statistics.\"\"\"\r\n        try:\r\n            return cls.format_response({\r\n                'customers': cls._get_customer_metrics(),\r\n                'inventory': cls._get_inventory_metrics(),\r\n                'revenue': cls._get_revenue_metrics(),\r\n                'trends': cls._get_trend_metrics()\r\n            })\r\n        except Exception as e:\r\n            cls.handle_error(e, 'DASHBOARD_ERROR', 'Failed to fetch dashboard statistics')\r\n\r\n    @classmethod\r\n    def _get_customer_metrics(cls) -> Dict[str, Any]:\r\n        \"\"\"Get customer-related metrics.\"\"\"\r\n        now = datetime.now()\r\n        start_of_month = now.replace(day=1, hour=0, minute=0, second=0, microsecond=0)\r\n        \r\n        customers = PotentialCustomers.objects\r\n\r\n        return {\r\n            'total': customers.count(),\r\n            'this_month': customers.filter(date__gte=start_of_month).count(),\r\n            'growth': cls._calculate_growth_rate(\r\n                customers,\r\n                'date',\r\n                start_of_month - timedelta(days=30),\r\n                start_of_month\r\n            ),\r\n            'monthly_trend': cls._get_monthly_trend(customers, 'date', 6),\r\n            'daily_trend': cls._get_daily_trend(customers, 'date', 14)\r\n        }\r\n\r\n    @classmethod\r\n    def _get_inventory_metrics(cls) -> Dict[str, Any]:\r\n        \"\"\"Get inventory-related metrics.\"\"\"\r\n        inventory_stats = InventoryService.get_inventory_stats()\r\n        if not inventory_stats['success']:\r\n            raise AppError(\r\n                message='Failed to fetch inventory stats',\r\n                code='INVENTORY_ERROR'\r\n            )\r\n\r\n        return {\r\n            'panels': inventory_stats['data']['panels'],\r\n            'inverters': inventory_stats['data']['inverters'],\r\n            'total_capacity': (\r\n                inventory_stats['data']['panels']['total_power'] +\r\n                inventory_stats['data']['inverters']['total_power']\r\n            )\r\n        }\r\n\r\n    @classmethod\r\n    def _get_revenue_metrics(cls) -> Dict[str, Any]:\r\n        \"\"\"Get revenue-related metrics.\"\"\"\r\n        # This would typically connect to your financial data\r\n        # For now, returning placeholder data\r\n        return {\r\n            'total_revenue': 0,\r\n            'this_month': 0,\r\n            'growth': 0,\r\n            'average_quote': 0,\r\n            'monthly_trend': []\r\n        }\r\n\r\n    @classmethod\r\n    def _get_trend_metrics(cls) -> Dict[str, Any]:\r\n        \"\"\"Get trending metrics and insights.\"\"\"\r\n        customers = PotentialCustomers.objects\r\n        last_30_days = datetime.now() - timedelta(days=30)\r\n\r\n        return {\r\n            'customer_acquisition': {\r\n                'total': customers.filter(date__gte=last_30_days).count(),\r\n                'trend': cls._get_daily_trend(customers, 'date', 30)\r\n            },\r\n            'popular_system_sizes': cls._get_popular_system_sizes(),\r\n            'geographic_distribution': cls._get_geographic_distribution()\r\n        }\r\n\r\n    @staticmethod\r\n    def _calculate_growth_rate(queryset, date_field: str, \r\n                             start_date: datetime, end_date: datetime) -> float:\r\n        \"\"\"Calculate growth rate between two periods.\"\"\"\r\n        current_period = queryset.filter(**{\r\n            f'{date_field}__gte': start_date,\r\n            f'{date_field}__lt': end_date\r\n        }).count()\r\n\r\n        previous_period = queryset.filter(**{\r\n            f'{date_field}__gte': start_date - timedelta(days=30),\r\n            f'{date_field}__lt': start_date\r\n        }).count()\r\n\r\n        if previous_period == 0:\r\n            return 100 if current_period > 0 else 0\r\n\r\n        return ((current_period - previous_period) / previous_period) * 100\r\n\r\n    @staticmethod\r\n    def _get_monthly_trend(queryset, date_field: str, months: int) -> List[Dict[str, Any]]:\r\n        \"\"\"Get monthly trend data.\"\"\"\r\n        return list(\r\n            queryset.filter(**{\r\n                f'{date_field}__gte': datetime.now() - timedelta(days=30 * months)\r\n            })\r\n            .annotate(month=TruncMonth(date_field))\r\n            .values('month')\r\n            .annotate(count=Count('id'))\r\n            .order_by('month')\r\n        )\r\n\r\n    @staticmethod\r\n    def _get_daily_trend(queryset, date_field: str, days: int) -> List[Dict[str, Any]]:\r\n        \"\"\"Get daily trend data.\"\"\"\r\n        return list(\r\n            queryset.filter(**{\r\n                f'{date"
        }
    ]
}