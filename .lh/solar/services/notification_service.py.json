{
    "sourceFile": "solar/services/notification_service.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1733412095699,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733414191772,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,13 +111,16 @@\n \r\n             return cls.format_response(results)\r\n \r\n         except Exception as e:\r\n-            cls.handle_error(e, 'BULK_EMAIL_ERROR', 'Failed to send bulk emails')\r\n+            raise AppError(\r\n+                message='Failed to send bulk emails',\r\n+                code='BULK_EMAIL_ERROR'\r\n+            ) from e\r\n \r\n     @classmethod\r\n     def send_email(cls, recipient: str, subject: str, html_content: str, \r\n-                  cc: Optional[List[str]] = None) -> bool:\r\n+                  attachments: Optional[List[str]] = None) -> bool:\r\n         \"\"\"Send individual email.\"\"\"\r\n         try:\r\n             msg = MIMEMultipart('alternative')\r\n             msg['Subject'] = subject\r\n@@ -136,9 +139,9 @@\n \r\n             return True\r\n \r\n         except Exception as e:\r\n-            print(f\"Failed to send email: {str(e)}\")  # For debugging\r\n+            logger.error(f\"Failed to send email: {str(e)}\")\r\n             return False\r\n \r\n     @classmethod\r\n     def create_email_template(cls, template_name: str, template_content: str) -> bool:\r\n"
                },
                {
                    "date": 1733414339286,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,12 +4,15 @@\n from email.mime.text import MIMEText\r\n from email.mime.multipart import MIMEMultipart\r\n from django.conf import settings\r\n from django.template.loader import render_to_string\r\n+import logging\r\n \r\n from .base_service import BaseService\r\n from ..middleware.error_handler import AppError\r\n \r\n+logger = logging.getLogger(__name__)\r\n+\r\n class NotificationService(BaseService):\r\n     \"\"\"Service for handling notifications and alerts.\"\"\"\r\n \r\n     EMAIL_TEMPLATES = {\r\n@@ -36,8 +39,9 @@\n             return cls.send_email(recipient, subject, html_content)\r\n \r\n         except Exception as e:\r\n             cls.handle_error(e, 'EMAIL_ERROR', 'Failed to send quote email')\r\n+            return False  # Ensure a boolean is returned\r\n \r\n     @classmethod\r\n     def send_welcome_email(cls, customer_data: Dict[str, Any]) -> bool:\r\n         \"\"\"Send welcome email to new customer.\"\"\"\r\n@@ -58,8 +62,9 @@\n             return cls.send_email(customer_data['email'], subject, html_content)\r\n \r\n         except Exception as e:\r\n             cls.handle_error(e, 'EMAIL_ERROR', 'Failed to send welcome email')\r\n+            return False  # Ensure a boolean is returned\r\n \r\n     @classmethod\r\n     def send_status_update(cls, customer_email: str, status_data: Dict[str, Any]) -> bool:\r\n         \"\"\"Send status update notification.\"\"\"\r\n@@ -79,8 +84,9 @@\n             return cls.send_email(customer_email, subject, html_content)\r\n \r\n         except Exception as e:\r\n             cls.handle_error(e, 'EMAIL_ERROR', 'Failed to send status update')\r\n+            return False  # Ensure a boolean is returned\r\n \r\n     @classmethod\r\n     def send_bulk_email(cls, recipients: List[str], subject: str, \r\n                        template_name: str, template_data: Dict[str, Any]) -> Dict[str, Any]:\r\n@@ -118,9 +124,9 @@\n             ) from e\r\n \r\n     @classmethod\r\n     def send_email(cls, recipient: str, subject: str, html_content: str, \r\n-                  attachments: Optional[List[str]] = None) -> bool:\r\n+                  attachments: Optional[List[str]] = None, cc: Optional[List[str]] = None) -> bool:\r\n         \"\"\"Send individual email.\"\"\"\r\n         try:\r\n             msg = MIMEMultipart('alternative')\r\n             msg['Subject'] = subject\r\n@@ -140,9 +146,9 @@\n             return True\r\n \r\n         except Exception as e:\r\n             logger.error(f\"Failed to send email: {str(e)}\")\r\n-            return False\r\n+            return False  # Ensure a boolean is returned\r\n \r\n     @classmethod\r\n     def create_email_template(cls, template_name: str, template_content: str) -> bool:\r\n         \"\"\"Create new email template.\"\"\"\r\n@@ -158,5 +164,6 @@\n             cls.EMAIL_TEMPLATES[template_name] = template_content\r\n             return True\r\n \r\n         except Exception as e:\r\n-            cls.handle_error(e, 'TEMPLATE_ERROR', 'Failed to create template')\n\\ No newline at end of file\n+            cls.handle_error(e, 'TEMPLATE_ERROR', 'Failed to create template')\r\n+            return False  # Ensure a boolean is returned\n\\ No newline at end of file\n"
                }
            ],
            "date": 1733412095699,
            "name": "Commit-0",
            "content": "# solar/services/notification_service.py\r\nfrom typing import Dict, Any, List, Optional\r\nimport smtplib\r\nfrom email.mime.text import MIMEText\r\nfrom email.mime.multipart import MIMEMultipart\r\nfrom django.conf import settings\r\nfrom django.template.loader import render_to_string\r\n\r\nfrom .base_service import BaseService\r\nfrom ..middleware.error_handler import AppError\r\n\r\nclass NotificationService(BaseService):\r\n    \"\"\"Service for handling notifications and alerts.\"\"\"\r\n\r\n    EMAIL_TEMPLATES = {\r\n        'quote': 'email/quote.html',\r\n        'welcome': 'email/welcome.html',\r\n        'status_update': 'email/status_update.html',\r\n        'installation': 'email/installation.html'\r\n    }\r\n\r\n    @classmethod\r\n    def send_quote_email(cls, quote_data: Dict[str, Any], recipient: str) -> bool:\r\n        \"\"\"Send quote details via email.\"\"\"\r\n        try:\r\n            subject = \"Your Solar System Quote\"\r\n            template = cls.EMAIL_TEMPLATES['quote']\r\n            \r\n            html_content = render_to_string(template, {\r\n                'quote': quote_data,\r\n                'company_name': settings.COMPANY_NAME,\r\n                'contact_email': settings.CONTACT_EMAIL,\r\n                'contact_phone': settings.CONTACT_PHONE\r\n            })\r\n\r\n            return cls.send_email(recipient, subject, html_content)\r\n\r\n        except Exception as e:\r\n            cls.handle_error(e, 'EMAIL_ERROR', 'Failed to send quote email')\r\n\r\n    @classmethod\r\n    def send_welcome_email(cls, customer_data: Dict[str, Any]) -> bool:\r\n        \"\"\"Send welcome email to new customer.\"\"\"\r\n        try:\r\n            subject = f\"Welcome to {settings.COMPANY_NAME}\"\r\n            template = cls.EMAIL_TEMPLATES['welcome']\r\n            \r\n            html_content = render_to_string(template, {\r\n                'customer': customer_data,\r\n                'company_name': settings.COMPANY_NAME,\r\n                'contact_info': {\r\n                    'email': settings.CONTACT_EMAIL,\r\n                    'phone': settings.CONTACT_PHONE,\r\n                    'address': settings.COMPANY_ADDRESS\r\n                }\r\n            })\r\n\r\n            return cls.send_email(customer_data['email'], subject, html_content)\r\n\r\n        except Exception as e:\r\n            cls.handle_error(e, 'EMAIL_ERROR', 'Failed to send welcome email')\r\n\r\n    @classmethod\r\n    def send_status_update(cls, customer_email: str, status_data: Dict[str, Any]) -> bool:\r\n        \"\"\"Send status update notification.\"\"\"\r\n        try:\r\n            subject = f\"Update on Your Solar Installation\"\r\n            template = cls.EMAIL_TEMPLATES['status_update']\r\n            \r\n            html_content = render_to_string(template, {\r\n                'status': status_data,\r\n                'company_name': settings.COMPANY_NAME,\r\n                'contact_info': {\r\n                    'email': settings.CONTACT_EMAIL,\r\n                    'phone': settings.CONTACT_PHONE\r\n                }\r\n            })\r\n\r\n            return cls.send_email(customer_email, subject, html_content)\r\n\r\n        except Exception as e:\r\n            cls.handle_error(e, 'EMAIL_ERROR', 'Failed to send status update')\r\n\r\n    @classmethod\r\n    def send_bulk_email(cls, recipients: List[str], subject: str, \r\n                       template_name: str, template_data: Dict[str, Any]) -> Dict[str, Any]:\r\n        \"\"\"Send bulk emails.\"\"\"\r\n        try:\r\n            if template_name not in cls.EMAIL_TEMPLATES:\r\n                raise AppError(\r\n                    message=f'Template {template_name} not found',\r\n                    code='TEMPLATE_ERROR'\r\n                )\r\n\r\n            template = cls.EMAIL_TEMPLATES[template_name]\r\n            html_content = render_to_string(template, template_data)\r\n\r\n            results = {\r\n                'success': [],\r\n                'failed': []\r\n            }\r\n\r\n            for recipient in recipients:\r\n                try:\r\n                    if cls.send_email(recipient, subject, html_content):\r\n                        results['success'].append(recipient)\r\n                    else:\r\n                        results['failed'].append(recipient)\r\n                except Exception:\r\n                    results['failed'].append(recipient)\r\n\r\n            return cls.format_response(results)\r\n\r\n        except Exception as e:\r\n            cls.handle_error(e, 'BULK_EMAIL_ERROR', 'Failed to send bulk emails')\r\n\r\n    @classmethod\r\n    def send_email(cls, recipient: str, subject: str, html_content: str, \r\n                  cc: Optional[List[str]] = None) -> bool:\r\n        \"\"\"Send individual email.\"\"\"\r\n        try:\r\n            msg = MIMEMultipart('alternative')\r\n            msg['Subject'] = subject\r\n            msg['From'] = settings.EMAIL_HOST_USER\r\n            msg['To'] = recipient\r\n            if cc:\r\n                msg['Cc'] = ', '.join(cc)\r\n\r\n            html_part = MIMEText(html_content, 'html')\r\n            msg.attach(html_part)\r\n\r\n            with smtplib.SMTP(settings.EMAIL_HOST, settings.EMAIL_PORT) as server:\r\n                server.starttls()\r\n                server.login(settings.EMAIL_HOST_USER, settings.EMAIL_HOST_PASSWORD)\r\n                server.send_message(msg)\r\n\r\n            return True\r\n\r\n        except Exception as e:\r\n            print(f\"Failed to send email: {str(e)}\")  # For debugging\r\n            return False\r\n\r\n    @classmethod\r\n    def create_email_template(cls, template_name: str, template_content: str) -> bool:\r\n        \"\"\"Create new email template.\"\"\"\r\n        try:\r\n            if template_name in cls.EMAIL_TEMPLATES:\r\n                raise AppError(\r\n                    message=f'Template {template_name} already exists',\r\n                    code='DUPLICATE_ERROR'\r\n                )\r\n\r\n            # In a real application, you might store templates in database\r\n            # or filesystem. For now, we'll just add to the dictionary\r\n            cls.EMAIL_TEMPLATES[template_name] = template_content\r\n            return True\r\n\r\n        except Exception as e:\r\n            cls.handle_error(e, 'TEMPLATE_ERROR', 'Failed to create template')"
        }
    ]
}