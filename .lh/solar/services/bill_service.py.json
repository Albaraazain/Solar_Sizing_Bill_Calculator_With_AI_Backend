{
    "sourceFile": "solar/services/bill_service.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1733408129600,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733410406720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,108 +1,109 @@\n+# solar/services/bill_service.py\r\n+from typing import Dict, Any\r\n import math\r\n import requests\r\n-from bs4 import BeautifulSoup\r\n from django.conf import settings\r\n+\r\n from ..middleware.error_handler import AppError, ErrorTypes\r\n-from ..invoice_generator.bill_verify import verify_bill\r\n-from ..invoice_generator.bill_parser_ind import parse_electricity_bill_industrial\r\n-from ..invoice_generator.bill_parser_gen import parse_electricity_bill_general\r\n+from .bill_parser.general_parser import GeneralBillParser\r\n+from .bill_parser.industrial_parser import IndustrialBillParser\r\n \r\n class BillService:\r\n+    AVERAGE_RATE_PKR = 20  # Average rate per unit in PKR\r\n+    BASE_INSTALLATION_COST = 150000  # Base cost per kW\r\n+    CO2_PER_KWH = 0.0007  # Metric tons of CO2 per kWh\r\n+    TREES_PER_TON = 40  # Trees needed to offset 1 ton of CO2\r\n+    \r\n     @staticmethod\r\n-    def validate_bill(reference_number):\r\n-        \"\"\"Validate a bill reference number\"\"\"\r\n-        result = verify_bill(reference_number)\r\n-        if not result['exists']:\r\n-            raise AppError(\r\n-                message='Bill not found',\r\n-                code=ErrorTypes.NOT_FOUND,\r\n-                data={'reference_number': reference_number}\r\n-            )\r\n-        return result\r\n+    def validate_bill(reference_number: str) -> Dict[str, Any]:\r\n+        \"\"\"Validate bill reference number and determine bill type\"\"\"\r\n+        try:\r\n+            for bill_type in ['general', 'industrial']:\r\n+                url = f\"https://bill.pitc.com.pk/mepcobill/{bill_type}?refno={reference_number}\"\r\n+                response = requests.get(url)\r\n+                soup = BeautifulSoup(response.text, 'html.parser')\r\n+                \r\n+                if not soup.find('h2', string='Bill Not Found'):\r\n+                    return {\r\n+                        'exists': True,\r\n+                        'message': 'Bill found',\r\n+                        'source_url': f\"https://bill.pitc.com.pk/mepcobill/{bill_type}\",\r\n+                        'type': bill_type\r\n+                    }\r\n+                    \r\n+            raise AppError('Bill not found', 'NOT_FOUND', {'reference_number': reference_number})\r\n+        except requests.RequestException as e:\r\n+            raise AppError('Failed to validate bill', 'NETWORK_ERROR', {'error': str(e)})\r\n \r\n     @staticmethod\r\n-    def get_bill_details(reference_number):\r\n-        \"\"\"Get detailed information about a bill\"\"\"\r\n-        status_result = BillService.validate_bill(reference_number)\r\n+    def get_bill_details(reference_number: str) -> Dict[str, Any]:\r\n+        \"\"\"Get detailed bill information with analysis\"\"\"\r\n+        validation_result = BillService.validate_bill(reference_number)\r\n         \r\n-        # Get HTML content from the bill URL\r\n-        url = f\"{status_result['source_url']}?refno={reference_number}\"\r\n-        response = requests.get(url)\r\n-        html_content = response.text\r\n+        try:\r\n+            # Fetch bill HTML\r\n+            response = requests.get(f\"{validation_result['source_url']}?refno={reference_number}\")\r\n+            response.raise_for_status()\r\n+            \r\n+            # Parse bill using appropriate parser\r\n+            parser_class = IndustrialBillParser if validation_result['type'] == 'industrial' else GeneralBillParser\r\n+            parser = parser_class(response.text)\r\n+            bill_data = parser.parse_bill()\r\n+            \r\n+            if not bill_data:\r\n+                raise AppError('Failed to parse bill', 'PARSING_ERROR')\r\n+            \r\n+            # Calculate analysis\r\n+            yearly_units = int(bill_data['Total Yearly Units'])\r\n+            system_sizing = BillService.calculate_system_sizing(yearly_units)\r\n+            \r\n+            return {\r\n+                **bill_data,\r\n+                'systemSizing': system_sizing,\r\n+                'consumption': BillService.calculate_consumption_metrics(yearly_units),\r\n+                'savings': BillService.calculate_savings_metrics(yearly_units),\r\n+                'environmental': BillService.calculate_environmental_impact(yearly_units)\r\n+            }\r\n+            \r\n+        except requests.RequestException as e:\r\n+            raise AppError('Failed to fetch bill details', 'NETWORK_ERROR', {'error': str(e)})\r\n+        except Exception as e:\r\n+            raise AppError('Failed to process bill', 'PROCESSING_ERROR', {'error': str(e)})\r\n \r\n-        # Parse bill based on type\r\n-        if status_result['source_url'].endswith('industrial'):\r\n-            bill_data = parse_electricity_bill_industrial(html_content)\r\n-        else:\r\n-            bill_data = parse_electricity_bill_general(html_content)\r\n-\r\n-        # Calculate system sizes\r\n-        yearly_units = int(bill_data['Total Yearly Units'])\r\n-        system_sizing = BillService.calculate_system_sizing(yearly_units)\r\n-\r\n-        # Enhance data with calculated fields\r\n-        return BillService.enhance_bill_data(bill_data, system_sizing)\r\n-\r\n     @staticmethod\r\n-    def analyze_bill(reference_number):\r\n-        \"\"\"Analyze a bill and provide detailed insights\"\"\"\r\n-        bill_details = BillService.get_bill_details(reference_number)\r\n-        yearly_units = int(bill_details['Total Yearly Units'])\r\n+    def calculate_system_sizing(yearly_units: int) -> Dict[str, float]:\r\n+        \"\"\"Calculate recommended system sizes based on yearly consumption\"\"\"\r\n+        daily_units = yearly_units / 365\r\n+        base_kw = daily_units / 4  # 4 kWh per kW per day in Pakistan\r\n         \r\n         return {\r\n-            'consumption': BillService.calculate_consumption_metrics(yearly_units),\r\n-            'systemSize': BillService.calculate_system_sizing(yearly_units),\r\n-            'savings': BillService.calculate_savings_metrics(yearly_units),\r\n-            'environmental': BillService.calculate_environmental_impact(yearly_units)\r\n+            'recommended': math.ceil(base_kw * 1.5),  # 50% buffer\r\n+            'smaller': math.ceil(base_kw * 1.3),      # 30% buffer\r\n+            'larger': math.ceil(base_kw * 1.7)        # 70% buffer\r\n         }\r\n \r\n-    # Helper methods\r\n     @staticmethod\r\n-    def calculate_system_sizing(yearly_units):\r\n-        daily_avg = yearly_units / 365\r\n-        system_size_kw = daily_avg / 4\r\n-        return {\r\n-            'recommended': math.ceil(system_size_kw * 1.5),\r\n-            'smaller': math.ceil(system_size_kw * 1.3),\r\n-            'larger': math.ceil(system_size_kw * 1.7)\r\n-        }\r\n-\r\n-    @staticmethod\r\n-    def enhance_bill_data(bill_data, system_sizing):\r\n-        \"\"\"Enhance bill data with calculated fields\"\"\"\r\n-        return {\r\n-            **bill_data,\r\n-            'customerName': bill_data.get('Name', ''),\r\n-            'unitsConsumed': int(bill_data.get('Units Consumed', 0)),\r\n-            'dueDate': bill_data.get('Due Date', ''),\r\n-            'issueDate': bill_data.get('Issue Date', ''),\r\n-            'amount': float(bill_data.get('Payable Within Due Date', '0').replace('PKR ', '').replace(',', '')),\r\n-            'systemSizing': system_sizing\r\n-        }\r\n-\r\n-    @staticmethod\r\n-    def calculate_consumption_metrics(yearly_units):\r\n-        \"\"\"Calculate consumption related metrics\"\"\"\r\n+    def calculate_consumption_metrics(yearly_units: int) -> Dict[str, float]:\r\n+        \"\"\"Calculate consumption metrics from yearly units\"\"\"\r\n         daily = yearly_units / 365\r\n         monthly = yearly_units / 12\r\n+        \r\n         return {\r\n             'daily': round(daily, 2),\r\n             'monthly': round(monthly, 2),\r\n             'yearly': yearly_units,\r\n-            'peak': round(daily * 1.4, 2)  # Estimated peak consumption\r\n+            'peak': round(daily * 1.4, 2)  # Estimated peak based on typical usage patterns\r\n         }\r\n \r\n     @staticmethod\r\n-    def calculate_savings_metrics(yearly_units):\r\n-        \"\"\"Calculate financial savings metrics\"\"\"\r\n-        avg_rate = 20  # Average rate per unit in PKR\r\n-        monthly_savings = (yearly_units / 12) * avg_rate\r\n-        yearly_savings = yearly_units * avg_rate\r\n-        installation_cost = 150000  # Example base cost per kW\r\n+    def calculate_savings_metrics(yearly_units: int) -> Dict[str, float]:\r\n+        \"\"\"Calculate financial metrics and savings estimates\"\"\"\r\n+        monthly_savings = (yearly_units / 12) * BillService.AVERAGE_RATE_PKR\r\n+        yearly_savings = yearly_units * BillService.AVERAGE_RATE_PKR\r\n         system_size = math.ceil((yearly_units / 365 / 4) * 1.5)\r\n-        total_cost = installation_cost * system_size\r\n-\r\n+        total_cost = BillService.BASE_INSTALLATION_COST * system_size\r\n+        \r\n         return {\r\n             'monthly': round(monthly_savings, 2),\r\n             'yearly': round(yearly_savings, 2),\r\n             'paybackPeriod': round(total_cost / yearly_savings, 1),\r\n@@ -110,28 +111,24 @@\n             'roi': round((yearly_savings / total_cost) * 100, 1)\r\n         }\r\n \r\n     @staticmethod\r\n-    def calculate_environmental_impact(yearly_units):\r\n+    def calculate_environmental_impact(yearly_units: int) -> Dict[str, float]:\r\n         \"\"\"Calculate environmental impact metrics\"\"\"\r\n-        # Using standard conversion factors\r\n-        co2_per_kwh = 0.0007  # Metric tons of CO2 per kWh\r\n-        trees_per_ton = 40  # Trees needed to offset 1 ton of CO2\r\n-\r\n-        co2_reduction = yearly_units * co2_per_kwh\r\n-        trees_equivalent = co2_reduction * trees_per_ton\r\n-\r\n+        co2_reduction = yearly_units * BillService.CO2_PER_KWH\r\n+        trees_equivalent = co2_reduction * BillService.TREES_PER_TON\r\n+        \r\n         return {\r\n             'co2Reduction': round(co2_reduction, 2),\r\n             'treesEquivalent': round(trees_equivalent),\r\n-            'homesEquivalent': round(yearly_units / 12000),  # Average home consumption\r\n-            'carbonFootprintReduction': round(co2_reduction * 1000, 2)  # in kg\r\n+            'homesEquivalent': round(yearly_units / 12000),  # Average home consumes 12000 kWh/year\r\n+            'carbonFootprintReduction': round(co2_reduction * 1000, 2)  # Convert to kg\r\n         }\r\n \r\n     @staticmethod\r\n-    def calculate_monthly_production(system_size):\r\n-        \"\"\"Calculate estimated monthly production\"\"\"\r\n-        base_production = system_size * 4 * 30  # 4 kWh per kW per day\r\n+    def calculate_monthly_production(system_size: float) -> list:\r\n+        \"\"\"Calculate estimated monthly production with seasonal variations\"\"\"\r\n+        base_daily = system_size * 4  # 4 kWh per kW per day average\r\n         seasonal_factors = {\r\n             'winter': 0.7,  # Nov-Feb\r\n             'spring': 0.9,  # Mar-Apr\r\n             'summer': 1.2,  # May-Aug\r\n@@ -147,9 +144,9 @@\n \r\n         return [\r\n             {\r\n                 'month': month,\r\n-                'production': round(base_production * seasonal_factors[season]),\r\n+                'production': round(base_daily * 30 * seasonal_factors[season]),\r\n                 'efficiency': round(seasonal_factors[season] * 100, 1)\r\n             }\r\n             for month, season in months\r\n         ]\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733411294227,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,134 +1,211 @@\n # solar/services/bill_service.py\r\n-from typing import Dict, Any\r\n import math\r\n import requests\r\n+from typing import Dict, Any\r\n from django.conf import settings\r\n \r\n-from ..middleware.error_handler import AppError, ErrorTypes\r\n-from .bill_parser.general_parser import GeneralBillParser\r\n-from .bill_parser.industrial_parser import IndustrialBillParser\r\n+from .base_service import BaseService\r\n+from .bill_parser import get_parser_for_bill\r\n+from ..middleware.error_handler import AppError\r\n \r\n-class BillService:\r\n-    AVERAGE_RATE_PKR = 20  # Average rate per unit in PKR\r\n-    BASE_INSTALLATION_COST = 150000  # Base cost per kW\r\n+class BillService(BaseService):\r\n+    \"\"\"Service for handling electricity bill operations.\"\"\"\r\n+\r\n+    BASE_URL = \"https://bill.pitc.com.pk/mepcobill\"\r\n+    BILL_TYPES = ['general', 'industrial']\r\n+\r\n+    # Constants for calculations\r\n+    KWH_PER_KW_PER_DAY = 4  # Average daily production per kW in Pakistan\r\n+    AVERAGE_RATE_PKR = 20  # Average rate per unit\r\n     CO2_PER_KWH = 0.0007  # Metric tons of CO2 per kWh\r\n     TREES_PER_TON = 40  # Trees needed to offset 1 ton of CO2\r\n     \r\n-    @staticmethod\r\n-    def validate_bill(reference_number: str) -> Dict[str, Any]:\r\n-        \"\"\"Validate bill reference number and determine bill type\"\"\"\r\n+    @classmethod\r\n+    def validate_bill(cls, reference_number: str) -> Dict[str, Any]:\r\n+        \"\"\"\r\n+        Validate bill reference number and determine bill type.\r\n+        \r\n+        Args:\r\n+            reference_number: Bill reference number to validate\r\n+            \r\n+        Returns:\r\n+            Dict containing validation results\r\n+            \r\n+        Raises:\r\n+            AppError: If bill validation fails\r\n+        \"\"\"\r\n         try:\r\n-            for bill_type in ['general', 'industrial']:\r\n-                url = f\"https://bill.pitc.com.pk/mepcobill/{bill_type}?refno={reference_number}\"\r\n+            for bill_type in cls.BILL_TYPES:\r\n+                url = f\"{cls.BASE_URL}/{bill_type}?refno={reference_number}\"\r\n                 response = requests.get(url)\r\n-                soup = BeautifulSoup(response.text, 'html.parser')\r\n-                \r\n-                if not soup.find('h2', string='Bill Not Found'):\r\n-                    return {\r\n-                        'exists': True,\r\n-                        'message': 'Bill found',\r\n-                        'source_url': f\"https://bill.pitc.com.pk/mepcobill/{bill_type}\",\r\n-                        'type': bill_type\r\n-                    }\r\n+                if response.status_code != 200:\r\n+                    continue\r\n                     \r\n-            raise AppError('Bill not found', 'NOT_FOUND', {'reference_number': reference_number})\r\n+                if \"Bill Not Found\" not in response.text:\r\n+                    return cls.format_response({\r\n+                        'isValid': True,\r\n+                        'referenceNumber': reference_number,\r\n+                        'type': bill_type,\r\n+                        'source_url': url\r\n+                    })\r\n+\r\n+            raise AppError(\r\n+                message='Bill not found',\r\n+                code='NOT_FOUND',\r\n+                data={'reference_number': reference_number}\r\n+            )\r\n+            \r\n         except requests.RequestException as e:\r\n-            raise AppError('Failed to validate bill', 'NETWORK_ERROR', {'error': str(e)})\r\n+            cls.handle_error(e, 'NETWORK_ERROR', 'Failed to validate bill')\r\n \r\n-    @staticmethod\r\n-    def get_bill_details(reference_number: str) -> Dict[str, Any]:\r\n-        \"\"\"Get detailed bill information with analysis\"\"\"\r\n-        validation_result = BillService.validate_bill(reference_number)\r\n+    @classmethod\r\n+    def get_bill_details(cls, reference_number: str) -> Dict[str, Any]:\r\n+        \"\"\"\r\n+        Get detailed bill information with analysis.\r\n         \r\n+        Args:\r\n+            reference_number: Bill reference number\r\n+            \r\n+        Returns:\r\n+            Dict containing bill details and analysis\r\n+            \r\n+        Raises:\r\n+            AppError: If bill fetch or processing fails\r\n+        \"\"\"\r\n         try:\r\n+            # First validate the bill\r\n+            validation = cls.validate_bill(reference_number)\r\n+            if not validation['data']['isValid']:\r\n+                raise AppError(\r\n+                    message='Invalid bill reference',\r\n+                    code='VALIDATION_ERROR'\r\n+                )\r\n+\r\n             # Fetch bill HTML\r\n-            response = requests.get(f\"{validation_result['source_url']}?refno={reference_number}\")\r\n-            response.raise_for_status()\r\n-            \r\n+            response = requests.get(validation['data']['source_url'])\r\n+            if response.status_code != 200:\r\n+                raise AppError(\r\n+                    message='Failed to fetch bill',\r\n+                    code='FETCH_ERROR'\r\n+                )\r\n+\r\n+# solar/services/bill_service.py (continued)\r\n             # Parse bill using appropriate parser\r\n-            parser_class = IndustrialBillParser if validation_result['type'] == 'industrial' else GeneralBillParser\r\n-            parser = parser_class(response.text)\r\n+            parser = get_parser_for_bill(\r\n+                validation['data']['type'],\r\n+                response.text\r\n+            )\r\n             bill_data = parser.parse_bill()\r\n-            \r\n+\r\n             if not bill_data:\r\n-                raise AppError('Failed to parse bill', 'PARSING_ERROR')\r\n-            \r\n-            # Calculate analysis\r\n+                raise AppError(\r\n+                    message='Failed to parse bill data',\r\n+                    code='PARSING_ERROR'\r\n+                )\r\n+\r\n+            # Calculate system sizing and enhancements\r\n             yearly_units = int(bill_data['Total Yearly Units'])\r\n-            system_sizing = BillService.calculate_system_sizing(yearly_units)\r\n+            system_sizing = cls.calculate_system_sizing(yearly_units)\r\n             \r\n-            return {\r\n-                **bill_data,\r\n-                'systemSizing': system_sizing,\r\n-                'consumption': BillService.calculate_consumption_metrics(yearly_units),\r\n-                'savings': BillService.calculate_savings_metrics(yearly_units),\r\n-                'environmental': BillService.calculate_environmental_impact(yearly_units)\r\n-            }\r\n+            return cls.format_response(\r\n+                cls._enhance_bill_data(bill_data, system_sizing)\r\n+            )\r\n+\r\n+        except Exception as e:\r\n+            cls.handle_error(e, 'PROCESSING_ERROR', 'Failed to process bill')\r\n+\r\n+    @classmethod\r\n+    def analyze_bill(cls, reference_number: str) -> Dict[str, Any]:\r\n+        \"\"\"\r\n+        Analyze bill and provide detailed insights.\r\n+        \r\n+        Args:\r\n+            reference_number: Bill reference number\r\n             \r\n-        except requests.RequestException as e:\r\n-            raise AppError('Failed to fetch bill details', 'NETWORK_ERROR', {'error': str(e)})\r\n+        Returns:\r\n+            Dict containing analysis results\r\n+            \r\n+        Raises:\r\n+            AppError: If analysis fails\r\n+        \"\"\"\r\n+        try:\r\n+            bill_details = cls.get_bill_details(reference_number)\r\n+            yearly_units = int(bill_details['data']['Total Yearly Units'])\r\n+\r\n+            return cls.format_response({\r\n+                'consumption': cls.calculate_consumption_metrics(yearly_units),\r\n+                'systemSize': cls.calculate_system_sizing(yearly_units),\r\n+                'savings': cls.calculate_savings_metrics(yearly_units),\r\n+                'environmental': cls.calculate_environmental_impact(yearly_units),\r\n+                'production': cls.calculate_monthly_production(\r\n+                    cls.calculate_system_sizing(yearly_units)['recommended']\r\n+                )\r\n+            })\r\n+\r\n         except Exception as e:\r\n-            raise AppError('Failed to process bill', 'PROCESSING_ERROR', {'error': str(e)})\r\n+            cls.handle_error(e, 'ANALYSIS_ERROR', 'Failed to analyze bill')\r\n \r\n-    @staticmethod\r\n-    def calculate_system_sizing(yearly_units: int) -> Dict[str, float]:\r\n-        \"\"\"Calculate recommended system sizes based on yearly consumption\"\"\"\r\n+    @classmethod\r\n+    def calculate_system_sizing(cls, yearly_units: int) -> Dict[str, float]:\r\n+        \"\"\"Calculate recommended system sizes based on yearly consumption.\"\"\"\r\n         daily_units = yearly_units / 365\r\n-        base_kw = daily_units / 4  # 4 kWh per kW per day in Pakistan\r\n+        base_kw = daily_units / cls.KWH_PER_KW_PER_DAY\r\n         \r\n         return {\r\n             'recommended': math.ceil(base_kw * 1.5),  # 50% buffer\r\n             'smaller': math.ceil(base_kw * 1.3),      # 30% buffer\r\n             'larger': math.ceil(base_kw * 1.7)        # 70% buffer\r\n         }\r\n \r\n-    @staticmethod\r\n-    def calculate_consumption_metrics(yearly_units: int) -> Dict[str, float]:\r\n-        \"\"\"Calculate consumption metrics from yearly units\"\"\"\r\n-        daily = yearly_units / 365\r\n-        monthly = yearly_units / 12\r\n+    @classmethod\r\n+    def calculate_consumption_metrics(cls, yearly_units: int) -> Dict[str, float]:\r\n+        \"\"\"Calculate consumption-related metrics.\"\"\"\r\n+        daily_avg = yearly_units / 365\r\n+        monthly_avg = yearly_units / 12\r\n         \r\n         return {\r\n-            'daily': round(daily, 2),\r\n-            'monthly': round(monthly, 2),\r\n+            'daily': round(daily_avg, 2),\r\n+            'monthly': round(monthly_avg, 2),\r\n             'yearly': yearly_units,\r\n-            'peak': round(daily * 1.4, 2)  # Estimated peak based on typical usage patterns\r\n+            'peak': round(daily_avg * 1.4, 2)  # Estimated peak\r\n         }\r\n \r\n-    @staticmethod\r\n-    def calculate_savings_metrics(yearly_units: int) -> Dict[str, float]:\r\n-        \"\"\"Calculate financial metrics and savings estimates\"\"\"\r\n-        monthly_savings = (yearly_units / 12) * BillService.AVERAGE_RATE_PKR\r\n-        yearly_savings = yearly_units * BillService.AVERAGE_RATE_PKR\r\n-        system_size = math.ceil((yearly_units / 365 / 4) * 1.5)\r\n-        total_cost = BillService.BASE_INSTALLATION_COST * system_size\r\n+    @classmethod\r\n+    def calculate_savings_metrics(cls, yearly_units: int) -> Dict[str, Any]:\r\n+        \"\"\"Calculate financial savings metrics.\"\"\"\r\n+        monthly_savings = (yearly_units / 12) * cls.AVERAGE_RATE_PKR\r\n+        yearly_savings = yearly_units * cls.AVERAGE_RATE_PKR\r\n         \r\n+        system_size = math.ceil((yearly_units / 365 / cls.KWH_PER_KW_PER_DAY) * 1.5)\r\n+        installation_cost = 150000  # Base cost per kW\r\n+        total_cost = installation_cost * system_size\r\n+\r\n         return {\r\n             'monthly': round(monthly_savings, 2),\r\n             'yearly': round(yearly_savings, 2),\r\n             'paybackPeriod': round(total_cost / yearly_savings, 1),\r\n             'estimatedCost': total_cost,\r\n             'roi': round((yearly_savings / total_cost) * 100, 1)\r\n         }\r\n \r\n-    @staticmethod\r\n-    def calculate_environmental_impact(yearly_units: int) -> Dict[str, float]:\r\n-        \"\"\"Calculate environmental impact metrics\"\"\"\r\n-        co2_reduction = yearly_units * BillService.CO2_PER_KWH\r\n-        trees_equivalent = co2_reduction * BillService.TREES_PER_TON\r\n-        \r\n+    @classmethod\r\n+    def calculate_environmental_impact(cls, yearly_units: int) -> Dict[str, float]:\r\n+        \"\"\"Calculate environmental impact metrics.\"\"\"\r\n+        co2_reduction = yearly_units * cls.CO2_PER_KWH\r\n+        trees_equivalent = co2_reduction * cls.TREES_PER_TON\r\n+\r\n         return {\r\n             'co2Reduction': round(co2_reduction, 2),\r\n             'treesEquivalent': round(trees_equivalent),\r\n-            'homesEquivalent': round(yearly_units / 12000),  # Average home consumes 12000 kWh/year\r\n+            'homesEquivalent': round(yearly_units / 12000),  # Avg home usage\r\n             'carbonFootprintReduction': round(co2_reduction * 1000, 2)  # Convert to kg\r\n         }\r\n \r\n-    @staticmethod\r\n-    def calculate_monthly_production(system_size: float) -> list:\r\n-        \"\"\"Calculate estimated monthly production with seasonal variations\"\"\"\r\n-        base_daily = system_size * 4  # 4 kWh per kW per day average\r\n+    @classmethod\r\n+    def calculate_monthly_production(cls, system_size: float) -> List[Dict[str, Any]]:\r\n+        \"\"\"Calculate estimated monthly production with seasonal variations.\"\"\"\r\n+        base_production = system_size * cls.KWH_PER_KW_PER_DAY * 30\r\n         seasonal_factors = {\r\n             'winter': 0.7,  # Nov-Feb\r\n             'spring': 0.9,  # Mar-Apr\r\n             'summer': 1.2,  # May-Aug\r\n@@ -141,12 +218,33 @@\n             ('Jul', 'summer'), ('Aug', 'summer'), ('Sep', 'fall'),\r\n             ('Oct', 'fall'), ('Nov', 'winter'), ('Dec', 'winter')\r\n         ]\r\n \r\n-        return [\r\n-            {\r\n-                'month': month,\r\n-                'production': round(base_daily * 30 * seasonal_factors[season]),\r\n-                'efficiency': round(seasonal_factors[season] * 100, 1)\r\n+        return [{\r\n+            'month': month,\r\n+            'production': round(base_production * seasonal_factors[season]),\r\n\\ No newline at end of file\n+            'efficiency': round(seasonal_factors[season] * 100, 1)\r\n+        } for month, season in months]\r\n+\r\n+    @staticmethod\r\n+    def _enhance_bill_data(bill_data: Dict[str, Any], system_sizing: Dict[str, float]) -> Dict[str, Any]:\r\n+        \"\"\"Enhance bill data with calculated fields.\"\"\"\r\n+        try:\r\n+            return {\r\n+                **bill_data,\r\n+                'customerName': bill_data.get('Name', ''),\r\n+                'unitsConsumed': int(bill_data.get('Units Consumed', 0)),\r\n+                'dueDate': bill_data.get('Due Date', ''),\r\n+                'issueDate': bill_data.get('Issue Date', ''),\r\n+                'amount': float(\r\n+                    bill_data.get('Payable Within Due Date', '0')\r\n+                    .replace('PKR ', '')\r\n+                    .replace(',', '')\r\n+                ),\r\n+                'systemSizing': system_sizing\r\n             }\r\n-            for month, season in months\r\n-        ]\n+        except (ValueError, AttributeError) as e:\r\n+            raise AppError(\r\n+                message='Failed to process bill data',\r\n+                code='DATA_PROCESSING_ERROR',\r\n+                data={'error': str(e)}\r\n+            )\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733411952328,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,9 +88,8 @@\n                     message='Failed to fetch bill',\r\n                     code='FETCH_ERROR'\r\n                 )\r\n \r\n-# solar/services/bill_service.py (continued)\r\n             # Parse bill using appropriate parser\r\n             parser = get_parser_for_bill(\r\n                 validation['data']['type'],\r\n                 response.text\r\n"
                },
                {
                    "date": 1733430351670,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,249 @@\n+# solar/services/bill_service.py\r\n+import math\r\n+import requests\r\n+from typing import Dict, Any, List\r\n+from django.conf import settings\r\n+\r\n+from .base_service import BaseService\r\n+from .bill_parser import get_parser_for_bill\r\n+from ..middleware.error_handler import AppError\r\n+\r\n+class BillService(BaseService):\r\n+    \"\"\"Service for handling electricity bill operations.\"\"\"\r\n+\r\n+    BASE_URL = \"https://bill.pitc.com.pk/mepcobill\"\r\n+    BILL_TYPES = ['general', 'industrial']\r\n+\r\n+    # Constants for calculations\r\n+    KWH_PER_KW_PER_DAY = 4  # Average daily production per kW in Pakistan\r\n+    AVERAGE_RATE_PKR = 20  # Average rate per unit\r\n+    CO2_PER_KWH = 0.0007  # Metric tons of CO2 per kWh\r\n+    TREES_PER_TON = 40  # Trees needed to offset 1 ton of CO2\r\n+    \r\n+    @classmethod\r\n+    def validate_bill(cls, reference_number: str) -> Dict[str, Any]:\r\n+        \"\"\"\r\n+        Validate bill reference number and determine bill type.\r\n+        \r\n+        Args:\r\n+            reference_number: Bill reference number to validate\r\n+            \r\n+        Returns:\r\n+            Dict containing validation results\r\n+            \r\n+        Raises:\r\n+            AppError: If bill validation fails\r\n+        \"\"\"\r\n+        try:\r\n+            for bill_type in cls.BILL_TYPES:\r\n+                url = f\"{cls.BASE_URL}/{bill_type}?refno={reference_number}\"\r\n+                response = requests.get(url)\r\n+                if response.status_code != 200:\r\n+                    continue\r\n+                    \r\n+                if \"Bill Not Found\" not in response.text:\r\n+                    return cls.format_response({\r\n+                        'isValid': True,\r\n+                        'referenceNumber': reference_number,\r\n+                        'type': bill_type,\r\n+                        'source_url': url\r\n+                    })\r\n+\r\n+            raise AppError(\r\n+                message='Bill not found',\r\n+                code='NOT_FOUND',\r\n+                data={'reference_number': reference_number}\r\n+            )\r\n+            \r\n+        except requests.RequestException as e:\r\n+            cls.handle_error(e, 'NETWORK_ERROR', 'Failed to validate bill')\r\n+\r\n+    @classmethod\r\n+    def get_bill_details(cls, reference_number: str) -> Dict[str, Any]:\r\n+        \"\"\"\r\n+        Get detailed bill information with analysis.\r\n+        \r\n+        Args:\r\n+            reference_number: Bill reference number\r\n+            \r\n+        Returns:\r\n+            Dict containing bill details and analysis\r\n+            \r\n+        Raises:\r\n+            AppError: If bill fetch or processing fails\r\n+        \"\"\"\r\n+        try:\r\n+            # First validate the bill\r\n+            validation = cls.validate_bill(reference_number)\r\n+            if not validation['data']['isValid']:\r\n+                raise AppError(\r\n+                    message='Invalid bill reference',\r\n+                    code='VALIDATION_ERROR'\r\n+                )\r\n+\r\n+            # Fetch bill HTML\r\n+            response = requests.get(validation['data']['source_url'])\r\n+            if response.status_code != 200:\r\n+                raise AppError(\r\n+                    message='Failed to fetch bill',\r\n+                    code='FETCH_ERROR'\r\n+                )\r\n+\r\n+            # Parse bill using appropriate parser\r\n+            parser = get_parser_for_bill(\r\n+                validation['data']['type'],\r\n+                response.text\r\n+            )\r\n+            bill_data = parser.parse_bill()\r\n+\r\n+            if not bill_data:\r\n+                raise AppError(\r\n+                    message='Failed to parse bill data',\r\n+                    code='PARSING_ERROR'\r\n+                )\r\n+\r\n+            # Calculate system sizing and enhancements\r\n+            yearly_units = int(bill_data['Total Yearly Units'])\r\n+            system_sizing = cls.calculate_system_sizing(yearly_units)\r\n+            \r\n+            return cls.format_response(\r\n+                cls._enhance_bill_data(bill_data, system_sizing)\r\n+            )\r\n+\r\n+        except Exception as e:\r\n+            cls.handle_error(e, 'PROCESSING_ERROR', 'Failed to process bill')\r\n+\r\n+    @classmethod\r\n+    def analyze_bill(cls, reference_number: str) -> Dict[str, Any]:\r\n+        \"\"\"\r\n+        Analyze bill and provide detailed insights.\r\n+        \r\n+        Args:\r\n+            reference_number: Bill reference number\r\n+            \r\n+        Returns:\r\n+            Dict containing analysis results\r\n+            \r\n+        Raises:\r\n+            AppError: If analysis fails\r\n+        \"\"\"\r\n+        try:\r\n+            bill_details = cls.get_bill_details(reference_number)\r\n+            yearly_units = int(bill_details['data']['Total Yearly Units'])\r\n+\r\n+            return cls.format_response({\r\n+                'consumption': cls.calculate_consumption_metrics(yearly_units),\r\n+                'systemSize': cls.calculate_system_sizing(yearly_units),\r\n+                'savings': cls.calculate_savings_metrics(yearly_units),\r\n+                'environmental': cls.calculate_environmental_impact(yearly_units),\r\n+                'production': cls.calculate_monthly_production(\r\n+                    cls.calculate_system_sizing(yearly_units)['recommended']\r\n+                )\r\n+            })\r\n+\r\n+        except Exception as e:\r\n+            cls.handle_error(e, 'ANALYSIS_ERROR', 'Failed to analyze bill')\r\n+\r\n+    @classmethod\r\n+    def calculate_system_sizing(cls, yearly_units: int) -> Dict[str, float]:\r\n+        \"\"\"Calculate recommended system sizes based on yearly consumption.\"\"\"\r\n+        daily_units = yearly_units / 365\r\n+        base_kw = daily_units / cls.KWH_PER_KW_PER_DAY\r\n+        \r\n+        return {\r\n+            'recommended': math.ceil(base_kw * 1.5),  # 50% buffer\r\n+            'smaller': math.ceil(base_kw * 1.3),      # 30% buffer\r\n+            'larger': math.ceil(base_kw * 1.7)        # 70% buffer\r\n+        }\r\n+\r\n+    @classmethod\r\n+    def calculate_consumption_metrics(cls, yearly_units: int) -> Dict[str, float]:\r\n+        \"\"\"Calculate consumption-related metrics.\"\"\"\r\n+        daily_avg = yearly_units / 365\r\n+        monthly_avg = yearly_units / 12\r\n+        \r\n+        return {\r\n+            'daily': round(daily_avg, 2),\r\n+            'monthly': round(monthly_avg, 2),\r\n+            'yearly': yearly_units,\r\n+            'peak': round(daily_avg * 1.4, 2)  # Estimated peak\r\n+        }\r\n+\r\n+    @classmethod\r\n+    def calculate_savings_metrics(cls, yearly_units: int) -> Dict[str, Any]:\r\n+        \"\"\"Calculate financial savings metrics.\"\"\"\r\n+        monthly_savings = (yearly_units / 12) * cls.AVERAGE_RATE_PKR\r\n+        yearly_savings = yearly_units * cls.AVERAGE_RATE_PKR\r\n+        \r\n+        system_size = math.ceil((yearly_units / 365 / cls.KWH_PER_KW_PER_DAY) * 1.5)\r\n+        installation_cost = 150000  # Base cost per kW\r\n+        total_cost = installation_cost * system_size\r\n+\r\n+        return {\r\n+            'monthly': round(monthly_savings, 2),\r\n+            'yearly': round(yearly_savings, 2),\r\n+            'paybackPeriod': round(total_cost / yearly_savings, 1),\r\n+            'estimatedCost': total_cost,\r\n+            'roi': round((yearly_savings / total_cost) * 100, 1)\r\n+        }\r\n+\r\n+    @classmethod\r\n+    def calculate_environmental_impact(cls, yearly_units: int) -> Dict[str, float]:\r\n+        \"\"\"Calculate environmental impact metrics.\"\"\"\r\n+        co2_reduction = yearly_units * cls.CO2_PER_KWH\r\n+        trees_equivalent = co2_reduction * cls.TREES_PER_TON\r\n+\r\n+        return {\r\n+            'co2Reduction': round(co2_reduction, 2),\r\n+            'treesEquivalent': round(trees_equivalent),\r\n+            'homesEquivalent': round(yearly_units / 12000),  # Avg home usage\r\n+            'carbonFootprintReduction': round(co2_reduction * 1000, 2)  # Convert to kg\r\n+        }\r\n+\r\n+    @classmethod\r\n+    def calculate_monthly_production(cls, system_size: float) -> List[Dict[str, Any]]:\r\n+        \"\"\"Calculate estimated monthly production with seasonal variations.\"\"\"\r\n+        base_production = system_size * cls.KWH_PER_KW_PER_DAY * 30\r\n+        seasonal_factors = {\r\n+            'winter': 0.7,  # Nov-Feb\r\n+            'spring': 0.9,  # Mar-Apr\r\n+            'summer': 1.2,  # May-Aug\r\n+            'fall': 0.8     # Sep-Oct\r\n+        }\r\n+\r\n+        months = [\r\n+            ('Jan', 'winter'), ('Feb', 'winter'), ('Mar', 'spring'),\r\n+            ('Apr', 'spring'), ('May', 'summer'), ('Jun', 'summer'),\r\n+            ('Jul', 'summer'), ('Aug', 'summer'), ('Sep', 'fall'),\r\n+            ('Oct', 'fall'), ('Nov', 'winter'), ('Dec', 'winter')\r\n+        ]\r\n+\r\n+        return [{\r\n+            'month': month,\r\n+            'production': round(base_production * seasonal_factors[season]),\r\n+            'efficiency': round(seasonal_factors[season] * 100, 1)\r\n+        } for month, season in months]\r\n+\r\n+    @staticmethod\r\n+    def _enhance_bill_data(bill_data: Dict[str, Any], system_sizing: Dict[str, float]) -> Dict[str, Any]:\r\n+        \"\"\"Enhance bill data with calculated fields.\"\"\"\r\n+        try:\r\n+            return {\r\n+                **bill_data,\r\n+                'customerName': bill_data.get('Name', ''),\r\n+                'unitsConsumed': int(bill_data.get('Units Consumed', 0)),\r\n+                'dueDate': bill_data.get('Due Date', ''),\r\n+                'issueDate': bill_data.get('Issue Date', ''),\r\n+                'amount': float(\r\n+                    bill_data.get('Payable Within Due Date', '0')\r\n+                    .replace('PKR ', '')\r\n+                    .replace(',', '')\r\n+                ),\r\n+                'systemSizing': system_sizing\r\n+            }\r\n+        except (ValueError, AttributeError) as e:\r\n+            raise AppError(\r\n+                message='Failed to process bill data',\r\n+                code='DATA_PROCESSING_ERROR',\r\n+                data={'error': str(e)}\r\n+            )\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733430575210,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n from django.conf import settings\r\n \r\n from .base_service import BaseService\r\n from .bill_parser import get_parser_for_bill\r\n-from ..middleware.error_handler import AppError\r\n+from ..middleware.error_handler import AppError, ErrorTypes\r\n \r\n class BillService(BaseService):\r\n     \"\"\"Service for handling electricity bill operations.\"\"\"\r\n \r\n@@ -39,9 +39,9 @@\n                 url = f\"{cls.BASE_URL}/{bill_type}?refno={reference_number}\"\r\n                 response = requests.get(url)\r\n                 if response.status_code != 200:\r\n                     continue\r\n-                    \r\n+\r\n                 if \"Bill Not Found\" not in response.text:\r\n                     return cls.format_response({\r\n                         'isValid': True,\r\n                         'referenceNumber': reference_number,\r\n@@ -50,14 +50,18 @@\n                     })\r\n \r\n             raise AppError(\r\n                 message='Bill not found',\r\n-                code='NOT_FOUND',\r\n+                code=ErrorTypes.NOT_FOUND,\r\n                 data={'reference_number': reference_number}\r\n             )\r\n-            \r\n+\r\n         except requests.RequestException as e:\r\n-            cls.handle_error(e, 'NETWORK_ERROR', 'Failed to validate bill')\r\n+            raise AppError(\r\n+                message='Failed to validate bill',\r\n+                code=ErrorTypes.NETWORK_ERROR,\r\n+                data={'original_error': str(e)},\r\n+            ) from e\r\n \r\n     @classmethod\r\n     def get_bill_details(cls, reference_number: str) -> Dict[str, Any]:\r\n         \"\"\"\r\n@@ -77,17 +81,17 @@\n             validation = cls.validate_bill(reference_number)\r\n             if not validation['data']['isValid']:\r\n                 raise AppError(\r\n                     message='Invalid bill reference',\r\n-                    code='VALIDATION_ERROR'\r\n+                    code=ErrorTypes.VALIDATION_ERROR\r\n                 )\r\n \r\n             # Fetch bill HTML\r\n             response = requests.get(validation['data']['source_url'])\r\n             if response.status_code != 200:\r\n                 raise AppError(\r\n                     message='Failed to fetch bill',\r\n-                    code='FETCH_ERROR'\r\n+                    code=ErrorTypes.SERVICE_ERROR\r\n                 )\r\n \r\n             # Parse bill using appropriate parser\r\n             parser = get_parser_for_bill(\r\n@@ -98,21 +102,27 @@\n \r\n             if not bill_data:\r\n                 raise AppError(\r\n                     message='Failed to parse bill data',\r\n-                    code='PARSING_ERROR'\r\n+                    code=ErrorTypes.SERVICE_ERROR\r\n                 )\r\n \r\n             # Calculate system sizing and enhancements\r\n             yearly_units = int(bill_data['Total Yearly Units'])\r\n             system_sizing = cls.calculate_system_sizing(yearly_units)\r\n-            \r\n+\r\n             return cls.format_response(\r\n                 cls._enhance_bill_data(bill_data, system_sizing)\r\n             )\r\n \r\n+        except AppError:\r\n+            raise\r\n         except Exception as e:\r\n-            cls.handle_error(e, 'PROCESSING_ERROR', 'Failed to process bill')\r\n+            raise AppError(\r\n+                message='Failed to process bill',\r\n+                code=ErrorTypes.SERVER_ERROR,\r\n+                data={'original_error': str(e)},\r\n+            ) from e\r\n \r\n     @classmethod\r\n     def analyze_bill(cls, reference_number: str) -> Dict[str, Any]:\r\n         \"\"\"\r\n@@ -140,10 +150,16 @@\n                     cls.calculate_system_sizing(yearly_units)['recommended']\r\n                 )\r\n             })\r\n \r\n+        except AppError:\r\n+            raise\r\n         except Exception as e:\r\n-            cls.handle_error(e, 'ANALYSIS_ERROR', 'Failed to analyze bill')\r\n+            raise AppError(\r\n+                message='Failed to analyze bill',\r\n+                code=ErrorTypes.SERVER_ERROR,\r\n+                data={'original_error': str(e)},\r\n+            ) from e\r\n \r\n     @classmethod\r\n     def calculate_system_sizing(cls, yearly_units: int) -> Dict[str, float]:\r\n         \"\"\"Calculate recommended system sizes based on yearly consumption.\"\"\"\r\n@@ -244,6 +260,6 @@\n         except (ValueError, AttributeError) as e:\r\n             raise AppError(\r\n                 message='Failed to process bill data',\r\n                 code='DATA_PROCESSING_ERROR',\r\n-                data={'error': str(e)}\r\n-            )\n\\ No newline at end of file\n+                data={'error': str(e)},\r\n+            ) from e\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733430582604,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -261,254 +261,5 @@\n             raise AppError(\r\n                 message='Failed to process bill data',\r\n                 code='DATA_PROCESSING_ERROR',\r\n                 data={'error': str(e)},\r\n-            ) from e\n-# solar/services/bill_service.py\r\n-import math\r\n-import requests\r\n-from typing import Dict, Any\r\n-from django.conf import settings\r\n-\r\n-from .base_service import BaseService\r\n-from .bill_parser import get_parser_for_bill\r\n-from ..middleware.error_handler import AppError\r\n-\r\n-class BillService(BaseService):\r\n-    \"\"\"Service for handling electricity bill operations.\"\"\"\r\n-\r\n-    BASE_URL = \"https://bill.pitc.com.pk/mepcobill\"\r\n-    BILL_TYPES = ['general', 'industrial']\r\n-\r\n-    # Constants for calculations\r\n-    KWH_PER_KW_PER_DAY = 4  # Average daily production per kW in Pakistan\r\n-    AVERAGE_RATE_PKR = 20  # Average rate per unit\r\n-    CO2_PER_KWH = 0.0007  # Metric tons of CO2 per kWh\r\n-    TREES_PER_TON = 40  # Trees needed to offset 1 ton of CO2\r\n-    \r\n-    @classmethod\r\n-    def validate_bill(cls, reference_number: str) -> Dict[str, Any]:\r\n-        \"\"\"\r\n-        Validate bill reference number and determine bill type.\r\n-        \r\n-        Args:\r\n-            reference_number: Bill reference number to validate\r\n-            \r\n-        Returns:\r\n-            Dict containing validation results\r\n-            \r\n-        Raises:\r\n-            AppError: If bill validation fails\r\n-        \"\"\"\r\n-        try:\r\n-            for bill_type in cls.BILL_TYPES:\r\n-                url = f\"{cls.BASE_URL}/{bill_type}?refno={reference_number}\"\r\n-                response = requests.get(url)\r\n-                if response.status_code != 200:\r\n-                    continue\r\n-                    \r\n-                if \"Bill Not Found\" not in response.text:\r\n-                    return cls.format_response({\r\n-                        'isValid': True,\r\n-                        'referenceNumber': reference_number,\r\n-                        'type': bill_type,\r\n-                        'source_url': url\r\n-                    })\r\n-\r\n-            raise AppError(\r\n-                message='Bill not found',\r\n-                code='NOT_FOUND',\r\n-                data={'reference_number': reference_number}\r\n-            )\r\n-            \r\n-        except requests.RequestException as e:\r\n-            cls.handle_error(e, 'NETWORK_ERROR', 'Failed to validate bill')\r\n-\r\n-    @classmethod\r\n-    def get_bill_details(cls, reference_number: str) -> Dict[str, Any]:\r\n-        \"\"\"\r\n-        Get detailed bill information with analysis.\r\n-        \r\n-        Args:\r\n-            reference_number: Bill reference number\r\n-            \r\n-        Returns:\r\n-            Dict containing bill details and analysis\r\n-            \r\n-        Raises:\r\n-            AppError: If bill fetch or processing fails\r\n-        \"\"\"\r\n-        try:\r\n-            # First validate the bill\r\n-            validation = cls.validate_bill(reference_number)\r\n-            if not validation['data']['isValid']:\r\n-                raise AppError(\r\n-                    message='Invalid bill reference',\r\n-                    code='VALIDATION_ERROR'\r\n-                )\r\n-\r\n-            # Fetch bill HTML\r\n-            response = requests.get(validation['data']['source_url'])\r\n-            if response.status_code != 200:\r\n-                raise AppError(\r\n-                    message='Failed to fetch bill',\r\n-                    code='FETCH_ERROR'\r\n-                )\r\n-\r\n-            # Parse bill using appropriate parser\r\n-            parser = get_parser_for_bill(\r\n-                validation['data']['type'],\r\n-                response.text\r\n-            )\r\n-            bill_data = parser.parse_bill()\r\n-\r\n-            if not bill_data:\r\n-                raise AppError(\r\n-                    message='Failed to parse bill data',\r\n-                    code='PARSING_ERROR'\r\n-                )\r\n-\r\n-            # Calculate system sizing and enhancements\r\n-            yearly_units = int(bill_data['Total Yearly Units'])\r\n-            system_sizing = cls.calculate_system_sizing(yearly_units)\r\n-            \r\n-            return cls.format_response(\r\n-                cls._enhance_bill_data(bill_data, system_sizing)\r\n-            )\r\n-\r\n-        except Exception as e:\r\n-            cls.handle_error(e, 'PROCESSING_ERROR', 'Failed to process bill')\r\n-\r\n-    @classmethod\r\n-    def analyze_bill(cls, reference_number: str) -> Dict[str, Any]:\r\n-        \"\"\"\r\n-        Analyze bill and provide detailed insights.\r\n-        \r\n-        Args:\r\n-            reference_number: Bill reference number\r\n-            \r\n-        Returns:\r\n-            Dict containing analysis results\r\n-            \r\n-        Raises:\r\n-            AppError: If analysis fails\r\n-        \"\"\"\r\n-        try:\r\n-            bill_details = cls.get_bill_details(reference_number)\r\n-            yearly_units = int(bill_details['data']['Total Yearly Units'])\r\n-\r\n-            return cls.format_response({\r\n-                'consumption': cls.calculate_consumption_metrics(yearly_units),\r\n-                'systemSize': cls.calculate_system_sizing(yearly_units),\r\n-                'savings': cls.calculate_savings_metrics(yearly_units),\r\n-                'environmental': cls.calculate_environmental_impact(yearly_units),\r\n-                'production': cls.calculate_monthly_production(\r\n-                    cls.calculate_system_sizing(yearly_units)['recommended']\r\n-                )\r\n-            })\r\n-\r\n-        except Exception as e:\r\n-            cls.handle_error(e, 'ANALYSIS_ERROR', 'Failed to analyze bill')\r\n-\r\n-    @classmethod\r\n-    def calculate_system_sizing(cls, yearly_units: int) -> Dict[str, float]:\r\n-        \"\"\"Calculate recommended system sizes based on yearly consumption.\"\"\"\r\n-        daily_units = yearly_units / 365\r\n-        base_kw = daily_units / cls.KWH_PER_KW_PER_DAY\r\n-        \r\n-        return {\r\n-            'recommended': math.ceil(base_kw * 1.5),  # 50% buffer\r\n-            'smaller': math.ceil(base_kw * 1.3),      # 30% buffer\r\n-            'larger': math.ceil(base_kw * 1.7)        # 70% buffer\r\n-        }\r\n-\r\n-    @classmethod\r\n-    def calculate_consumption_metrics(cls, yearly_units: int) -> Dict[str, float]:\r\n-        \"\"\"Calculate consumption-related metrics.\"\"\"\r\n-        daily_avg = yearly_units / 365\r\n-        monthly_avg = yearly_units / 12\r\n-        \r\n-        return {\r\n-            'daily': round(daily_avg, 2),\r\n-            'monthly': round(monthly_avg, 2),\r\n-            'yearly': yearly_units,\r\n-            'peak': round(daily_avg * 1.4, 2)  # Estimated peak\r\n-        }\r\n-\r\n-    @classmethod\r\n-    def calculate_savings_metrics(cls, yearly_units: int) -> Dict[str, Any]:\r\n-        \"\"\"Calculate financial savings metrics.\"\"\"\r\n-        monthly_savings = (yearly_units / 12) * cls.AVERAGE_RATE_PKR\r\n-        yearly_savings = yearly_units * cls.AVERAGE_RATE_PKR\r\n-        \r\n-        system_size = math.ceil((yearly_units / 365 / cls.KWH_PER_KW_PER_DAY) * 1.5)\r\n-        installation_cost = 150000  # Base cost per kW\r\n-        total_cost = installation_cost * system_size\r\n-\r\n-        return {\r\n-            'monthly': round(monthly_savings, 2),\r\n-            'yearly': round(yearly_savings, 2),\r\n-            'paybackPeriod': round(total_cost / yearly_savings, 1),\r\n-            'estimatedCost': total_cost,\r\n-            'roi': round((yearly_savings / total_cost) * 100, 1)\r\n-        }\r\n-\r\n-    @classmethod\r\n-    def calculate_environmental_impact(cls, yearly_units: int) -> Dict[str, float]:\r\n-        \"\"\"Calculate environmental impact metrics.\"\"\"\r\n-        co2_reduction = yearly_units * cls.CO2_PER_KWH\r\n-        trees_equivalent = co2_reduction * cls.TREES_PER_TON\r\n-\r\n-        return {\r\n-            'co2Reduction': round(co2_reduction, 2),\r\n-            'treesEquivalent': round(trees_equivalent),\r\n-            'homesEquivalent': round(yearly_units / 12000),  # Avg home usage\r\n-            'carbonFootprintReduction': round(co2_reduction * 1000, 2)  # Convert to kg\r\n-        }\r\n-\r\n-    @classmethod\r\n-    def calculate_monthly_production(cls, system_size: float) -> List[Dict[str, Any]]:\r\n-        \"\"\"Calculate estimated monthly production with seasonal variations.\"\"\"\r\n-        base_production = system_size * cls.KWH_PER_KW_PER_DAY * 30\r\n-        seasonal_factors = {\r\n-            'winter': 0.7,  # Nov-Feb\r\n-            'spring': 0.9,  # Mar-Apr\r\n-            'summer': 1.2,  # May-Aug\r\n-            'fall': 0.8     # Sep-Oct\r\n-        }\r\n-\r\n-        months = [\r\n-            ('Jan', 'winter'), ('Feb', 'winter'), ('Mar', 'spring'),\r\n-            ('Apr', 'spring'), ('May', 'summer'), ('Jun', 'summer'),\r\n-            ('Jul', 'summer'), ('Aug', 'summer'), ('Sep', 'fall'),\r\n-            ('Oct', 'fall'), ('Nov', 'winter'), ('Dec', 'winter')\r\n-        ]\r\n-\r\n-        return [{\r\n-            'month': month,\r\n-            'production': round(base_production * seasonal_factors[season]),\r\n-            'efficiency': round(seasonal_factors[season] * 100, 1)\r\n-        } for month, season in months]\r\n-\r\n-    @staticmethod\r\n-    def _enhance_bill_data(bill_data: Dict[str, Any], system_sizing: Dict[str, float]) -> Dict[str, Any]:\r\n-        \"\"\"Enhance bill data with calculated fields.\"\"\"\r\n-        try:\r\n-            return {\r\n-                **bill_data,\r\n-                'customerName': bill_data.get('Name', ''),\r\n-                'unitsConsumed': int(bill_data.get('Units Consumed', 0)),\r\n-                'dueDate': bill_data.get('Due Date', ''),\r\n-                'issueDate': bill_data.get('Issue Date', ''),\r\n-                'amount': float(\r\n-                    bill_data.get('Payable Within Due Date', '0')\r\n-                    .replace('PKR ', '')\r\n-                    .replace(',', '')\r\n-                ),\r\n-                'systemSizing': system_sizing\r\n-            }\r\n-        except (ValueError, AttributeError) as e:\r\n-            raise AppError(\r\n-                message='Failed to process bill data',\r\n-                code='DATA_PROCESSING_ERROR',\r\n-                data={'error': str(e)}\r\n-            )\n\\ No newline at end of file\n+            ) from e\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733433797293,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,337 @@\n+# solar/services/bill_service.py\r\n+import math\r\n+import requests\r\n+from typing import Dict, Any, List\r\n+from django.conf import settings\r\n+\r\n+from .base_service import BaseService\r\n+from .bill_parser import get_parser_for_bill\r\n+from ..middleware.error_handler import AppError, ErrorTypes\r\n+\r\n+class BillService(BaseService):\r\n+    \"\"\"Service for handling electricity bill operations.\"\"\"\r\n+\r\n+    BASE_URL = \"https://bill.pitc.com.pk/mepcobill\"\r\n+    BILL_TYPES = ['general', 'industrial']\r\n+\r\n+    # Constants for calculations\r\n+    KWH_PER_KW_PER_DAY = 4  # Average daily production per kW in Pakistan\r\n+    AVERAGE_RATE_PKR = 20  # Average rate per unit\r\n+    CO2_PER_KWH = 0.0007  # Metric tons of CO2 per kWh\r\n+    TREES_PER_TON = 40  # Trees needed to offset 1 ton of CO2\r\n+    \r\n+    @classmethod\r\n+    def validate_bill(cls, reference_number: str) -> Dict[str, Any]:\r\n+        \"\"\"\r\n+        Validate bill reference number and determine bill type.\r\n+        \r\n+        Args:\r\n+            reference_number: Bill reference number to validate\r\n+            \r\n+        Returns:\r\n+            Dict containing validation results\r\n+            \r\n+        Raises:\r\n+            AppError: If bill validation fails\r\n+        \"\"\"\r\n+        try:\r\n+            for bill_type in cls.BILL_TYPES:\r\n+                url = f\"{cls.BASE_URL}/{bill_type}?refno={reference_number}\"\r\n+                response = requests.get(url)\r\n+                if response.status_code != 200:\r\n+                    continue\r\n+\r\n+                if \"Bill Not Found\" not in response.text:\r\n+                    return cls.format_response({\r\n+                        'isValid': True,\r\n+                        'referenceNumber': reference_number,\r\n+                        'type': bill_type,\r\n+                        'source_url': url\r\n+                    })\r\n+\r\n+            raise AppError(\r\n+                message='Bill not found',\r\n+                code=ErrorTypes.NOT_FOUND,\r\n+                data={'reference_number': reference_number}\r\n+            )\r\n+\r\n+        except requests.RequestException as e:\r\n+            raise AppError(\r\n+                message='Failed to validate bill',\r\n+                code=ErrorTypes.NETWORK_ERROR,\r\n+                data={'original_error': str(e)},\r\n+            ) from e\r\n+\r\n+    @classmethod\r\n+    def get_bill_details(cls, reference_number: str) -> Dict[str, Any]:\r\n+        \"\"\"\r\n+        Get detailed bill information with analysis.\r\n+        \r\n+        Args:\r\n+            reference_number: Bill reference number\r\n+            \r\n+        Returns:\r\n+            Dict containing bill details and analysis\r\n+            \r\n+        Raises:\r\n+            AppError: If bill fetch or processing fails\r\n+        \"\"\"\r\n+        try:\r\n+            # First validate the bill\r\n+            validation = cls.validate_bill(reference_number)\r\n+            if not validation['data']['isValid']:\r\n+                raise AppError(\r\n+                    message='Invalid bill reference',\r\n+                    code=ErrorTypes.VALIDATION_ERROR\r\n+                )\r\n+\r\n+            # Fetch bill HTML\r\n+            response = requests.get(validation['data']['source_url'])\r\n+            if response.status_code != 200:\r\n+                raise AppError(\r\n+                    message='Failed to fetch bill',\r\n+                    code=ErrorTypes.SERVICE_ERROR\r\n+                )\r\n+\r\n+            # Parse bill using appropriate parser\r\n+            parser = get_parser_for_bill(\r\n+                validation['data']['type'],\r\n+                response.text\r\n+            )\r\n+            bill_data = parser.parse_bill()\r\n+\r\n+            if not bill_data:\r\n+                raise AppError(\r\n+                    message='Failed to parse bill data',\r\n+                    code=ErrorTypes.SERVICE_ERROR\r\n+                )\r\n+\r\n+            # Calculate system sizing and enhancements\r\n+            yearly_units = int(bill_data['Total Yearly Units'])\r\n+            system_sizing = cls.calculate_system_sizing(yearly_units)\r\n+\r\n+            return cls.format_response(\r\n+                cls._enhance_bill_data(bill_data, system_sizing)\r\n+            )\r\n+\r\n+        except AppError:\r\n+            raise\r\n+        except Exception as e:\r\n+            raise AppError(\r\n+                message='Failed to process bill',\r\n+                code=ErrorTypes.SERVER_ERROR,\r\n+                data={'original_error': str(e)},\r\n+            ) from e\r\n+\r\n+    @classmethod\r\n+    def analyze_bill(cls, reference_number: str) -> Dict[str, Any]:\r\n+        \"\"\"\r\n+        Analyze bill and provide detailed insights.\r\n+        \r\n+        Args:\r\n+            reference_number: Bill reference number\r\n+            \r\n+        Returns:\r\n+            Dict containing analysis results\r\n+            \r\n+        Raises:\r\n+            AppError: If analysis fails\r\n+        \"\"\"\r\n+        try:\r\n+            bill_details = cls.get_bill_details(reference_number)\r\n+            yearly_units = int(bill_details['data']['Total Yearly Units'])\r\n+\r\n+            return cls.format_response({\r\n+                'consumption': cls.calculate_consumption_metrics(yearly_units),\r\n+                'systemSize': cls.calculate_system_sizing(yearly_units),\r\n+                'savings': cls.calculate_savings_metrics(yearly_units),\r\n+                'environmental': cls.calculate_environmental_impact(yearly_units),\r\n+                'production': cls.calculate_monthly_production(\r\n+                    cls.calculate_system_sizing(yearly_units)['recommended']\r\n+                )\r\n+            })\r\n+\r\n+        except AppError:\r\n+            raise\r\n+        except Exception as e:\r\n+            raise AppError(\r\n+                message='Failed to analyze bill',\r\n+                code=ErrorTypes.SERVER_ERROR,\r\n+                data={'original_error': str(e)},\r\n+            ) from e\r\n+\r\n+    @classmethod\r\n+    def calculate_system_sizing(cls, yearly_units: int) -> Dict[str, float]:\r\n+        \"\"\"Calculate recommended system sizes based on yearly consumption.\"\"\"\r\n+        daily_units = yearly_units / 365\r\n+        base_kw = daily_units / cls.KWH_PER_KW_PER_DAY\r\n+        \r\n+        return {\r\n+            'recommended': math.ceil(base_kw * 1.5),  # 50% buffer\r\n+            'smaller': math.ceil(base_kw * 1.3),      # 30% buffer\r\n+            'larger': math.ceil(base_kw * 1.7)        # 70% buffer\r\n+        }\r\n+\r\n+    @classmethod\r\n+    def calculate_consumption_metrics(cls, yearly_units: int) -> Dict[str, float]:\r\n+        \"\"\"Calculate consumption-related metrics.\"\"\"\r\n+        daily_avg = yearly_units / 365\r\n+        monthly_avg = yearly_units / 12\r\n+        \r\n+        return {\r\n+            'daily': round(daily_avg, 2),\r\n+            'monthly': round(monthly_avg, 2),\r\n+            'yearly': yearly_units,\r\n+            'peak': round(daily_avg * 1.4, 2)  # Estimated peak\r\n+        }\r\n+\r\n+    @classmethod\r\n+    def calculate_savings_metrics(cls, yearly_units: int) -> Dict[str, Any]:\r\n+        \"\"\"Calculate financial savings metrics.\"\"\"\r\n+        monthly_savings = (yearly_units / 12) * cls.AVERAGE_RATE_PKR\r\n+        yearly_savings = yearly_units * cls.AVERAGE_RATE_PKR\r\n+        \r\n+        system_size = math.ceil((yearly_units / 365 / cls.KWH_PER_KW_PER_DAY) * 1.5)\r\n+        installation_cost = 150000  # Base cost per kW\r\n+        total_cost = installation_cost * system_size\r\n+\r\n+        return {\r\n+            'monthly': round(monthly_savings, 2),\r\n+            'yearly': round(yearly_savings, 2),\r\n+            'paybackPeriod': round(total_cost / yearly_savings, 1),\r\n+            'estimatedCost': total_cost,\r\n+            'roi': round((yearly_savings / total_cost) * 100, 1)\r\n+        }\r\n+\r\n+    @classmethod\r\n+    def calculate_environmental_impact(cls, yearly_units: int) -> Dict[str, float]:\r\n+        \"\"\"Calculate environmental impact metrics.\"\"\"\r\n+        co2_reduction = yearly_units * cls.CO2_PER_KWH\r\n+        trees_equivalent = co2_reduction * cls.TREES_PER_TON\r\n+\r\n+        return {\r\n+            'co2Reduction': round(co2_reduction, 2),\r\n+            'treesEquivalent': round(trees_equivalent),\r\n+            'homesEquivalent': round(yearly_units / 12000),  # Avg home usage\r\n+            'carbonFootprintReduction': round(co2_reduction * 1000, 2)  # Convert to kg\r\n+        }\r\n+\r\n+    @classmethod\r\n+    def calculate_monthly_production(cls, system_size: float) -> List[Dict[str, Any]]:\r\n+        \"\"\"Calculate estimated monthly production with seasonal variations.\"\"\"\r\n+        base_production = system_size * cls.KWH_PER_KW_PER_DAY * 30\r\n+        seasonal_factors = {\r\n+            'winter': 0.7,  # Nov-Feb\r\n+            'spring': 0.9,  # Mar-Apr\r\n+            'summer': 1.2,  # May-Aug\r\n+            'fall': 0.8     # Sep-Oct\r\n+        }\r\n+\r\n+        months = [\r\n+            ('Jan', 'winter'), ('Feb', 'winter'), ('Mar', 'spring'),\r\n+            ('Apr', 'spring'), ('May', 'summer'), ('Jun', 'summer'),\r\n+            ('Jul', 'summer'), ('Aug', 'summer'), ('Sep', 'fall'),\r\n+            ('Oct', 'fall'), ('Nov', 'winter'), ('Dec', 'winter')\r\n+        ]\r\n+\r\n+        return [{\r\n+            'month': month,\r\n+            'production': round(base_production * seasonal_factors[season]),\r\n+            'efficiency': round(seasonal_factors[season] * 100, 1)\r\n+        } for month, season in months]\r\n+\r\n+    @classmethod\r\n+    def get_bill_history(cls, reference_number: str) -> Dict[str, Any]:\r\n+        \"\"\"\r\n+        Get historical bill data for a reference number.\r\n+        \r\n+        Args:\r\n+            reference_number: Bill reference number\r\n+            \r\n+        Returns:\r\n+            Dict containing bill history data\r\n+            \r\n+        Raises:\r\n+            AppError: If history fetch fails\r\n+        \"\"\"\r\n+        try:\r\n+            # First validate the bill\r\n+            validation = cls.validate_bill(reference_number)\r\n+            if not validation['data']['isValid']:\r\n+                raise AppError(\r\n+                    message='Invalid bill reference',\r\n+                    code=ErrorTypes.VALIDATION_ERROR\r\n+                )\r\n+\r\n+            # Fetch bill details for the last 12 months\r\n+            url = f\"{cls.BASE_URL}/history/{validation['data']['type']}?refno={reference_number}\"\r\n+            response = requests.get(url)\r\n+            \r\n+            if response.status_code != 200:\r\n+                raise AppError(\r\n+                    message='Failed to fetch bill history',\r\n+                    code=ErrorTypes.SERVICE_ERROR\r\n+                )\r\n+\r\n+            # Parse and process historical data\r\n+            history_data = []\r\n+            yearly_total = 0\r\n+            monthly_avg = 0\r\n+            \r\n+            # Process the response data\r\n+            # Note: This is a placeholder - adjust according to actual API response\r\n+            if response.json().get('history'):\r\n+                history = response.json()['history']\r\n+                yearly_total = sum(month['units'] for month in history)\r\n+                monthly_avg = yearly_total / len(history) if history else 0\r\n+                history_data = [{\r\n+                    'month': item['month'],\r\n+                    'year': item['year'],\r\n+                    'units': item['units'],\r\n+                    'amount': item['amount'],\r\n+                    'dueDate': item['dueDate'],\r\n+                    'status': item['status']\r\n+                } for item in history]\r\n+\r\n+            return cls.format_response({\r\n+                'history': history_data,\r\n+                'summary': {\r\n+                    'yearlyTotal': yearly_total,\r\n+                    'monthlyAverage': round(monthly_avg, 2),\r\n+                    'totalMonths': len(history_data),\r\n+                    'referenceNumber': reference_number\r\n+                }\r\n+            })\r\n+\r\n+        except AppError:\r\n+            raise\r\n+        except Exception as e:\r\n+            raise AppError(\r\n+                message='Failed to process bill history',\r\n+                code=ErrorTypes.SERVER_ERROR,\r\n+                data={'original_error': str(e)},\r\n+            ) from e\r\n+\r\n+    @staticmethod\r\n+    def _enhance_bill_data(bill_data: Dict[str, Any], system_sizing: Dict[str, float]) -> Dict[str, Any]:\r\n+        \"\"\"Enhance bill data with calculated fields.\"\"\"\r\n+        try:\r\n+            return {\r\n+                **bill_data,\r\n+                'customerName': bill_data.get('Name', ''),\r\n+                'unitsConsumed': int(bill_data.get('Units Consumed', 0)),\r\n+                'dueDate': bill_data.get('Due Date', ''),\r\n+                'issueDate': bill_data.get('Issue Date', ''),\r\n+                'amount': float(\r\n+                    bill_data.get('Payable Within Due Date', '0')\r\n+                    .replace('PKR ', '')\r\n+                    .replace(',', '')\r\n+                ),\r\n+                'systemSizing': system_sizing\r\n+            }\r\n+        except (ValueError, AttributeError) as e:\r\n+            raise AppError(\r\n+                message='Failed to process bill data',\r\n+                code='DATA_PROCESSING_ERROR',\r\n+                data={'error': str(e)},\r\n+            ) from e\n\\ No newline at end of file\n"
                }
            ],
            "date": 1733408129600,
            "name": "Commit-0",
            "content": "import math\r\nimport requests\r\nfrom bs4 import BeautifulSoup\r\nfrom django.conf import settings\r\nfrom ..middleware.error_handler import AppError, ErrorTypes\r\nfrom ..invoice_generator.bill_verify import verify_bill\r\nfrom ..invoice_generator.bill_parser_ind import parse_electricity_bill_industrial\r\nfrom ..invoice_generator.bill_parser_gen import parse_electricity_bill_general\r\n\r\nclass BillService:\r\n    @staticmethod\r\n    def validate_bill(reference_number):\r\n        \"\"\"Validate a bill reference number\"\"\"\r\n        result = verify_bill(reference_number)\r\n        if not result['exists']:\r\n            raise AppError(\r\n                message='Bill not found',\r\n                code=ErrorTypes.NOT_FOUND,\r\n                data={'reference_number': reference_number}\r\n            )\r\n        return result\r\n\r\n    @staticmethod\r\n    def get_bill_details(reference_number):\r\n        \"\"\"Get detailed information about a bill\"\"\"\r\n        status_result = BillService.validate_bill(reference_number)\r\n        \r\n        # Get HTML content from the bill URL\r\n        url = f\"{status_result['source_url']}?refno={reference_number}\"\r\n        response = requests.get(url)\r\n        html_content = response.text\r\n\r\n        # Parse bill based on type\r\n        if status_result['source_url'].endswith('industrial'):\r\n            bill_data = parse_electricity_bill_industrial(html_content)\r\n        else:\r\n            bill_data = parse_electricity_bill_general(html_content)\r\n\r\n        # Calculate system sizes\r\n        yearly_units = int(bill_data['Total Yearly Units'])\r\n        system_sizing = BillService.calculate_system_sizing(yearly_units)\r\n\r\n        # Enhance data with calculated fields\r\n        return BillService.enhance_bill_data(bill_data, system_sizing)\r\n\r\n    @staticmethod\r\n    def analyze_bill(reference_number):\r\n        \"\"\"Analyze a bill and provide detailed insights\"\"\"\r\n        bill_details = BillService.get_bill_details(reference_number)\r\n        yearly_units = int(bill_details['Total Yearly Units'])\r\n        \r\n        return {\r\n            'consumption': BillService.calculate_consumption_metrics(yearly_units),\r\n            'systemSize': BillService.calculate_system_sizing(yearly_units),\r\n            'savings': BillService.calculate_savings_metrics(yearly_units),\r\n            'environmental': BillService.calculate_environmental_impact(yearly_units)\r\n        }\r\n\r\n    # Helper methods\r\n    @staticmethod\r\n    def calculate_system_sizing(yearly_units):\r\n        daily_avg = yearly_units / 365\r\n        system_size_kw = daily_avg / 4\r\n        return {\r\n            'recommended': math.ceil(system_size_kw * 1.5),\r\n            'smaller': math.ceil(system_size_kw * 1.3),\r\n            'larger': math.ceil(system_size_kw * 1.7)\r\n        }\r\n\r\n    @staticmethod\r\n    def enhance_bill_data(bill_data, system_sizing):\r\n        \"\"\"Enhance bill data with calculated fields\"\"\"\r\n        return {\r\n            **bill_data,\r\n            'customerName': bill_data.get('Name', ''),\r\n            'unitsConsumed': int(bill_data.get('Units Consumed', 0)),\r\n            'dueDate': bill_data.get('Due Date', ''),\r\n            'issueDate': bill_data.get('Issue Date', ''),\r\n            'amount': float(bill_data.get('Payable Within Due Date', '0').replace('PKR ', '').replace(',', '')),\r\n            'systemSizing': system_sizing\r\n        }\r\n\r\n    @staticmethod\r\n    def calculate_consumption_metrics(yearly_units):\r\n        \"\"\"Calculate consumption related metrics\"\"\"\r\n        daily = yearly_units / 365\r\n        monthly = yearly_units / 12\r\n        return {\r\n            'daily': round(daily, 2),\r\n            'monthly': round(monthly, 2),\r\n            'yearly': yearly_units,\r\n            'peak': round(daily * 1.4, 2)  # Estimated peak consumption\r\n        }\r\n\r\n    @staticmethod\r\n    def calculate_savings_metrics(yearly_units):\r\n        \"\"\"Calculate financial savings metrics\"\"\"\r\n        avg_rate = 20  # Average rate per unit in PKR\r\n        monthly_savings = (yearly_units / 12) * avg_rate\r\n        yearly_savings = yearly_units * avg_rate\r\n        installation_cost = 150000  # Example base cost per kW\r\n        system_size = math.ceil((yearly_units / 365 / 4) * 1.5)\r\n        total_cost = installation_cost * system_size\r\n\r\n        return {\r\n            'monthly': round(monthly_savings, 2),\r\n            'yearly': round(yearly_savings, 2),\r\n            'paybackPeriod': round(total_cost / yearly_savings, 1),\r\n            'estimatedCost': total_cost,\r\n            'roi': round((yearly_savings / total_cost) * 100, 1)\r\n        }\r\n\r\n    @staticmethod\r\n    def calculate_environmental_impact(yearly_units):\r\n        \"\"\"Calculate environmental impact metrics\"\"\"\r\n        # Using standard conversion factors\r\n        co2_per_kwh = 0.0007  # Metric tons of CO2 per kWh\r\n        trees_per_ton = 40  # Trees needed to offset 1 ton of CO2\r\n\r\n        co2_reduction = yearly_units * co2_per_kwh\r\n        trees_equivalent = co2_reduction * trees_per_ton\r\n\r\n        return {\r\n            'co2Reduction': round(co2_reduction, 2),\r\n            'treesEquivalent': round(trees_equivalent),\r\n            'homesEquivalent': round(yearly_units / 12000),  # Average home consumption\r\n            'carbonFootprintReduction': round(co2_reduction * 1000, 2)  # in kg\r\n        }\r\n\r\n    @staticmethod\r\n    def calculate_monthly_production(system_size):\r\n        \"\"\"Calculate estimated monthly production\"\"\"\r\n        base_production = system_size * 4 * 30  # 4 kWh per kW per day\r\n        seasonal_factors = {\r\n            'winter': 0.7,  # Nov-Feb\r\n            'spring': 0.9,  # Mar-Apr\r\n            'summer': 1.2,  # May-Aug\r\n            'fall': 0.8     # Sep-Oct\r\n        }\r\n\r\n        months = [\r\n            ('Jan', 'winter'), ('Feb', 'winter'), ('Mar', 'spring'),\r\n            ('Apr', 'spring'), ('May', 'summer'), ('Jun', 'summer'),\r\n            ('Jul', 'summer'), ('Aug', 'summer'), ('Sep', 'fall'),\r\n            ('Oct', 'fall'), ('Nov', 'winter'), ('Dec', 'winter')\r\n        ]\r\n\r\n        return [\r\n            {\r\n                'month': month,\r\n                'production': round(base_production * seasonal_factors[season]),\r\n                'efficiency': round(seasonal_factors[season] * 100, 1)\r\n            }\r\n            for month, season in months\r\n        ]"
        }
    ]
}