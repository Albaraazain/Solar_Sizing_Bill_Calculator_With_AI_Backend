{
    "sourceFile": "solar/services/base_service.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1733410902506,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733430455750,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,5 +64,5 @@\n             'data': data\r\n         }\r\n         if message:\r\n             response['message'] = message\r\n-            \n\\ No newline at end of file\n+        return response  # Add missing return statement\r\n"
                },
                {
                    "date": 1733430581272,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,34 +1,12 @@\n # solar/services/base_service.py\r\n from typing import Any, Dict, List, Optional\r\n-from ..middleware.error_handler import AppError\r\n+from ..middleware.error_handler import AppError, ErrorTypes\r\n \r\n class BaseService:\r\n     \"\"\"Base class for all services providing common functionality.\"\"\"\r\n     \r\n     @staticmethod\r\n-    def handle_error(error: Exception, code: str, message: Optional[str] = None) -> None:\r\n-        \"\"\"\r\n-        Standardized error handling for services.\r\n-        \r\n-        Args:\r\n-            error: The exception that occurred\r\n-            code: Error code for categorizing the error\r\n-            message: Optional custom error message\r\n-        \r\n-        Raises:\r\n-            AppError: Standardized application error\r\n-        \"\"\"\r\n-        if isinstance(error, AppError):\r\n-            raise error\r\n-            \r\n-        raise AppError(\r\n-            message=message or str(error),\r\n-            code=code,\r\n-            data={'original_error': str(error)}\r\n-        )\r\n-\r\n-    @staticmethod\r\n     def validate_data(data: Dict[str, Any], required_fields: List[str]) -> None:\r\n         \"\"\"\r\n         Validate that all required fields are present in data.\r\n         \r\n@@ -38,13 +16,14 @@\n             \r\n         Raises:\r\n             AppError: If any required fields are missing\r\n         \"\"\"\r\n-        missing_fields = [field for field in required_fields if field not in data]\r\n-        if missing_fields:\r\n+        if missing_fields := [\r\n+            field for field in required_fields if field not in data\r\n+        ]:\r\n             raise AppError(\r\n                 message='Missing required fields',\r\n-                code='VALIDATION_ERROR',\r\n+                code=ErrorTypes.VALIDATION_ERROR,\r\n                 data={'missing_fields': missing_fields}\r\n             )\r\n             \r\n     @staticmethod \r\n@@ -64,5 +43,5 @@\n             'data': data\r\n         }\r\n         if message:\r\n             response['message'] = message\r\n-        return response  # Add missing return statement\r\n+        return response\r\n"
                },
                {
                    "date": 1733430989046,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,31 @@\n \r\n class BaseService:\r\n     \"\"\"Base class for all services providing common functionality.\"\"\"\r\n     \r\n+    @classmethod\r\n+    def handle_error(cls, error: Exception, code: str, message: str = None, data: Dict = None) -> None:\r\n+        \"\"\"\r\n+        Handle errors consistently across services\r\n+        \r\n+        Args:\r\n+            error: The original exception\r\n+            code: Error code\r\n+            message: Optional custom message\r\n+            data: Optional additional error data\r\n+        \r\n+        Raises:\r\n+            AppError: Transformed application error\r\n+        \"\"\"\r\n+        if isinstance(error, AppError):\r\n+            raise error\r\n+        \r\n+        raise AppError(\r\n+            message=message or str(error),\r\n+            code=code,\r\n+            data=data or {'original_error': str(error)}\r\n+        )\r\n+    \r\n     @staticmethod\r\n     def validate_data(data: Dict[str, Any], required_fields: List[str]) -> None:\r\n         \"\"\"\r\n         Validate that all required fields are present in data.\r\n"
                },
                {
                    "date": 1733431695788,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,13 @@\n # solar/services/base_service.py\r\n-from typing import Any, Dict, List, Optional\r\n+from typing import Any, Dict, List, Optional, Union\r\n from ..middleware.error_handler import AppError, ErrorTypes\r\n \r\n class BaseService:\r\n     \"\"\"Base class for all services providing common functionality.\"\"\"\r\n     \r\n     @classmethod\r\n-    def handle_error(cls, error: Exception, code: str, message: str = None, data: Dict = None) -> None:\r\n+    def handle_error(cls, error: Exception, code: str, message: str = '', data: Optional[Dict] = None) -> None:\r\n         \"\"\"\r\n         Handle errors consistently across services\r\n         \r\n         Args:\r\n"
                }
            ],
            "date": 1733410902506,
            "name": "Commit-0",
            "content": "# solar/services/base_service.py\r\nfrom typing import Any, Dict, List, Optional\r\nfrom ..middleware.error_handler import AppError\r\n\r\nclass BaseService:\r\n    \"\"\"Base class for all services providing common functionality.\"\"\"\r\n    \r\n    @staticmethod\r\n    def handle_error(error: Exception, code: str, message: Optional[str] = None) -> None:\r\n        \"\"\"\r\n        Standardized error handling for services.\r\n        \r\n        Args:\r\n            error: The exception that occurred\r\n            code: Error code for categorizing the error\r\n            message: Optional custom error message\r\n        \r\n        Raises:\r\n            AppError: Standardized application error\r\n        \"\"\"\r\n        if isinstance(error, AppError):\r\n            raise error\r\n            \r\n        raise AppError(\r\n            message=message or str(error),\r\n            code=code,\r\n            data={'original_error': str(error)}\r\n        )\r\n\r\n    @staticmethod\r\n    def validate_data(data: Dict[str, Any], required_fields: List[str]) -> None:\r\n        \"\"\"\r\n        Validate that all required fields are present in data.\r\n        \r\n        Args:\r\n            data: Dictionary containing data to validate\r\n            required_fields: List of field names that must be present\r\n            \r\n        Raises:\r\n            AppError: If any required fields are missing\r\n        \"\"\"\r\n        missing_fields = [field for field in required_fields if field not in data]\r\n        if missing_fields:\r\n            raise AppError(\r\n                message='Missing required fields',\r\n                code='VALIDATION_ERROR',\r\n                data={'missing_fields': missing_fields}\r\n            )\r\n            \r\n    @staticmethod \r\n    def format_response(data: Any, message: Optional[str] = None) -> Dict[str, Any]:\r\n        \"\"\"\r\n        Format standard response structure.\r\n        \r\n        Args:\r\n            data: Response data to format\r\n            message: Optional success message\r\n            \r\n        Returns:\r\n            Dict containing formatted response\r\n        \"\"\"\r\n        response = {\r\n            'success': True,\r\n            'data': data\r\n        }\r\n        if message:\r\n            response['message'] = message\r\n            "
        }
    ]
}