{
    "sourceFile": "solar/services/bill_parser/industrial_parser.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1733410359196,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733411084110,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,27 +1,49 @@\n # solar/services/bill_parser/industrial_parser.py\r\n+from typing import Dict\r\n from .base_parser import BillParser\r\n \r\n class IndustrialBillParser(BillParser):\r\n-    def extract_name(self):\r\n-        name_section = self.soup.find(string=lambda s: \"NAME & ADDRESS\" in s if s else False)\r\n-        return (name_section.find_next(\"td\").get_text(strip=True).replace(\"\\n\", \"\") \r\n-                if name_section else \"Not Found\")\r\n+    \"\"\"Parser for industrial consumer electricity bills.\"\"\"\r\n+    \r\n+    def extract_name(self) -> str:\r\n+        name_section = self.soup.find(\r\n+            string=lambda s: \"NAME & ADDRESS\" in s if s else False\r\n+        )\r\n+        if not name_section:\r\n+            return \"Not Found\"\r\n+            \r\n+        name_td = name_section.find_next(\"td\")\r\n+        return (name_td.get_text(strip=True).replace(\"\\n\", \"\") \r\n+                if name_td else \"Not Found\")\r\n \r\n-    def extract_monthly_units(self):\r\n+    def extract_monthly_units(self) -> Dict[str, str]:\r\n+        # Find table with monthly data\r\n         tables = self.soup.find_all(\"table\")\r\n+        target_table = None\r\n\\ No newline at end of file\n+        \r\n         for table in tables:\r\n-            headers = [td.get_text(strip=True).upper() for td in table.find_all(\"td\")]\r\n+            headers = [td.get_text(strip=True).upper() \r\n+                      for td in table.find_all(\"td\")]\r\n             if \"MONTH\" in headers and \"KWH UNITS\" in headers:\r\n-                return self._process_monthly_units_table(table)\r\n-        return {month: \"0\" for month in self.year_data}\r\n+                target_table = table\r\n+                break\r\n \r\n-    def _process_monthly_units_table(self, table):\r\n+        if not target_table:\r\n+            return {month: \"0\" for month in self.year_data}\r\n+\r\n+        # Process table rows\r\n         monthly_units = {}\r\n-        rows = table.find_all(\"tr\")[1:]  # Skip header row\r\n+        rows = target_table.find_all(\"tr\")[1:]  # Skip header\r\n+        \r\n         for row in rows:\r\n             cells = row.find_all(\"td\")\r\n-            if len(cells) >= 3:  # Industrial bills have MDI column between Month and KWH\r\n-                month = cells[0].get_text(strip=True)[:3] + cells[0].get_text(strip=True)[-2:]\r\n-                units = cells[2].get_text(strip=True)  # KWH Units is in third column\r\n-                monthly_units[month] = units if units.isdigit() else \"0\"\r\n-        return {month: monthly_units.get(month, \"0\") for month in self.year_data}\n+            if len(cells) >= 3:  # Industrial bills have MDI column\r\n+                month = (cells[0].get_text(strip=True)[:3] + \r\n+                        cells[0].get_text(strip=True)[-2:])\r\n+                units = cells[2].get_text(strip=True)  # KWH Units in third column\r\n+                if month in self.year_data:\r\n+                    monthly_units[month] = units if units.isdigit() else \"0\"\r\n+\r\n+        # Ensure all months are covered\r\n+        return {month: monthly_units.get(month, \"0\") \r\n+                for month in self.year_data}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1733410359196,
            "name": "Commit-0",
            "content": "# solar/services/bill_parser/industrial_parser.py\r\nfrom .base_parser import BillParser\r\n\r\nclass IndustrialBillParser(BillParser):\r\n    def extract_name(self):\r\n        name_section = self.soup.find(string=lambda s: \"NAME & ADDRESS\" in s if s else False)\r\n        return (name_section.find_next(\"td\").get_text(strip=True).replace(\"\\n\", \"\") \r\n                if name_section else \"Not Found\")\r\n\r\n    def extract_monthly_units(self):\r\n        tables = self.soup.find_all(\"table\")\r\n        for table in tables:\r\n            headers = [td.get_text(strip=True).upper() for td in table.find_all(\"td\")]\r\n            if \"MONTH\" in headers and \"KWH UNITS\" in headers:\r\n                return self._process_monthly_units_table(table)\r\n        return {month: \"0\" for month in self.year_data}\r\n\r\n    def _process_monthly_units_table(self, table):\r\n        monthly_units = {}\r\n        rows = table.find_all(\"tr\")[1:]  # Skip header row\r\n        for row in rows:\r\n            cells = row.find_all(\"td\")\r\n            if len(cells) >= 3:  # Industrial bills have MDI column between Month and KWH\r\n                month = cells[0].get_text(strip=True)[:3] + cells[0].get_text(strip=True)[-2:]\r\n                units = cells[2].get_text(strip=True)  # KWH Units is in third column\r\n                monthly_units[month] = units if units.isdigit() else \"0\"\r\n        return {month: monthly_units.get(month, \"0\") for month in self.year_data}"
        }
    ]
}