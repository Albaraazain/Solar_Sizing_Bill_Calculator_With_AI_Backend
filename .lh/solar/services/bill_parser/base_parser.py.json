{
    "sourceFile": "solar/services/bill_parser/base_parser.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1733162249015,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733410546885,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,58 +1,29 @@\n-# solar/services/bill_parser/base_parser.py\r\n+# solar/services/base_service.py\r\n+from typing import Any, Dict, List, Optional\r\n+from django.db.models import Model\r\n+from ..middleware.error_handler import AppError\r\n \r\n-from abc import ABC, abstractmethod\r\n-from bs4 import BeautifulSoup\r\n-import datetime\r\n-\r\n-class BillParser(ABC):\r\n-    def __init__(self, html_content):\r\n-        self.soup = BeautifulSoup(html_content, \"html.parser\")\r\n-        self.year_data = []\r\n+class BaseService:\r\n+    \"\"\"Base class for all services providing common functionality\"\"\"\r\n     \r\n-    @abstractmethod\r\n-    def extract_name(self):\r\n-        pass\r\n-    \r\n-    @abstractmethod\r\n-    def extract_monthly_units(self):\r\n-        pass\r\n-    \r\n-    def generate_year_data(self, issue_date_str):\r\n-        months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\r\n-                \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\r\n-        try:\r\n-            issue_date = datetime.datetime.strptime(issue_date_str, \"%d %b %y\")\r\n-            start_month_index = issue_date.month - 1\r\n-            start_year = issue_date.year - 1\r\n-            self.year_data = []\r\n+    @staticmethod\r\n+    def handle_error(error: Exception, code: str, message: Optional[str] = None) -> None:\r\n+        \"\"\"Standardized error handling for services\"\"\"\r\n+        if isinstance(error, AppError):\r\n+            raise error\r\n+        raise AppError(\r\n+            message=message or str(error),\r\n+            code=code,\r\n+            data={'original_error': str(error)}\r\n+        )\r\n \r\n-            for i in range(12):\r\n-                month = months[(start_month_index + i) % 12]\r\n-                year = start_year if (start_month_index + i) < 12 else start_year + 1\r\n-                self.year_data.append(f\"{month}{year % 100:02d}\")\r\n-\r\n-            return self.year_data\r\n-        except Exception as e:\r\n-            print(f\"Error generating year data: {e}\")\r\n-            return []\r\n-\r\n-    def parse_bill(self):\r\n-        try:\r\n-            result = {\r\n-                \"Name\": self.extract_name(),\r\n\\ No newline at end of file\n-                \"Payable Within Due Date\": self.extract_payable_within_due_date(),\r\n-                \"Units Consumed\": self.extract_units_consumed(),\r\n-                \"Issue Date\": self.extract_issue_date(),\r\n-                \"Due Date\": self.extract_due_date(),\r\n-                \"Monthly Units\": self.extract_monthly_units(),\r\n-            }\r\n-            \r\n-            # Calculate additional metrics\r\n-            if result[\"Monthly Units\"]:\r\n-                result[\"Total Yearly Units\"] = sum(int(units) for units in result[\"Monthly Units\"].values() if units.isdigit())\r\n-                result[\"Max Units\"] = max(int(units) for units in result[\"Monthly Units\"].values() if units.isdigit())\r\n-            \r\n-            return result\r\n-        except Exception as e:\r\n-            print(f\"Error parsing bill: {e}\")\r\n-            return None\n+    @staticmethod\r\n+    def validate_data(data: Dict[str, Any], required_fields: List[str]) -> None:\r\n+        \"\"\"Validate that all required fields are present in data\"\"\"\r\n+        missing_fields = [field for field in required_fields if field not in data]\r\n+        if missing_fields:\r\n+            raise AppError(\r\n+                message='Missing required fields',\r\n+                code='VALIDATION_ERROR',\r\n+                data={'missing_fields': missing_fields}\r\n+            )\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733410648979,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,29 +1,58 @@\n-# solar/services/base_service.py\r\n-from typing import Any, Dict, List, Optional\r\n-from django.db.models import Model\r\n-from ..middleware.error_handler import AppError\r\n+# solar/services/bill_parser/base_parser.py\r\n \r\n-class BaseService:\r\n-    \"\"\"Base class for all services providing common functionality\"\"\"\r\n+from abc import ABC, abstractmethod\r\n+from bs4 import BeautifulSoup\r\n+import datetime\r\n+\r\n+class BillParser(ABC):\r\n+    def __init__(self, html_content):\r\n+        self.soup = BeautifulSoup(html_content, \"html.parser\")\r\n+        self.year_data = []\r\n     \r\n-    @staticmethod\r\n-    def handle_error(error: Exception, code: str, message: Optional[str] = None) -> None:\r\n-        \"\"\"Standardized error handling for services\"\"\"\r\n-        if isinstance(error, AppError):\r\n-            raise error\r\n-        raise AppError(\r\n-            message=message or str(error),\r\n-            code=code,\r\n-            data={'original_error': str(error)}\r\n-        )\r\n+    @abstractmethod\r\n+    def extract_name(self):\r\n\\ No newline at end of file\n+        pass\r\n+    \r\n+    @abstractmethod\r\n+    def extract_monthly_units(self):\r\n+        pass\r\n+    \r\n+    def generate_year_data(self, issue_date_str):\r\n+        months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\r\n+                \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\r\n+        try:\r\n+            issue_date = datetime.datetime.strptime(issue_date_str, \"%d %b %y\")\r\n+            start_month_index = issue_date.month - 1\r\n+            start_year = issue_date.year - 1\r\n+            self.year_data = []\r\n \r\n-    @staticmethod\r\n-    def validate_data(data: Dict[str, Any], required_fields: List[str]) -> None:\r\n-        \"\"\"Validate that all required fields are present in data\"\"\"\r\n-        missing_fields = [field for field in required_fields if field not in data]\r\n-        if missing_fields:\r\n-            raise AppError(\r\n-                message='Missing required fields',\r\n-                code='VALIDATION_ERROR',\r\n-                data={'missing_fields': missing_fields}\r\n-            )\n+            for i in range(12):\r\n+                month = months[(start_month_index + i) % 12]\r\n+                year = start_year if (start_month_index + i) < 12 else start_year + 1\r\n+                self.year_data.append(f\"{month}{year % 100:02d}\")\r\n+\r\n+            return self.year_data\r\n+        except Exception as e:\r\n+            print(f\"Error generating year data: {e}\")\r\n+            return []\r\n+\r\n+    def parse_bill(self):\r\n+        try:\r\n+            result = {\r\n+                \"Name\": self.extract_name(),\r\n+                \"Payable Within Due Date\": self.extract_payable_within_due_date(),\r\n+                \"Units Consumed\": self.extract_units_consumed(),\r\n+                \"Issue Date\": self.extract_issue_date(),\r\n+                \"Due Date\": self.extract_due_date(),\r\n+                \"Monthly Units\": self.extract_monthly_units(),\r\n+            }\r\n+            \r\n+            # Calculate additional metrics\r\n+            if result[\"Monthly Units\"]:\r\n+                result[\"Total Yearly Units\"] = sum(int(units) for units in result[\"Monthly Units\"].values() if units.isdigit())\r\n+                result[\"Max Units\"] = max(int(units) for units in result[\"Monthly Units\"].values() if units.isdigit())\r\n+            \r\n+            return result\r\n+        except Exception as e:\r\n+            print(f\"Error parsing bill: {e}\")\r\n+            return None\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733411042710,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,58 +1,153 @@\n # solar/services/bill_parser/base_parser.py\r\n-\r\n from abc import ABC, abstractmethod\r\n+from datetime import datetime\r\n+from typing import Dict, Any, List\r\n from bs4 import BeautifulSoup\r\n-import datetime\r\n \r\n class BillParser(ABC):\r\n-    def __init__(self, html_content):\r\n+    \"\"\"Abstract base class for bill parsers.\"\"\"\r\n+    \r\n+    def __init__(self, html_content: str):\r\n         self.soup = BeautifulSoup(html_content, \"html.parser\")\r\n         self.year_data = []\r\n-    \r\n+        self.issue_date = None\r\n+\r\n     @abstractmethod\r\n-    def extract_name(self):\r\n+    def extract_name(self) -> str:\r\n+        \"\"\"Extract customer name from bill.\"\"\"\r\n         pass\r\n-    \r\n+\r\n     @abstractmethod\r\n-    def extract_monthly_units(self):\r\n+    def extract_monthly_units(self) -> Dict[str, str]:\r\n+        \"\"\"Extract monthly consumption units.\"\"\"\r\n         pass\r\n-    \r\n-    def generate_year_data(self, issue_date_str):\r\n+\r\n+    def parse_bill(self) -> Dict[str, Any]:\r\n+        \"\"\"Parse bill and extract all relevant information.\"\"\"\r\n+        try:\r\n+            # Extract issue date first as it's needed for year data\r\n+            self.issue_date = self.extract_issue_date()\r\n+            if self.issue_date:\r\n+                self.year_data = self.generate_year_data(self.issue_date)\r\n+\r\n+            result = {\r\n+                \"Name\": self.extract_name(),\r\n+                \"Payable Within Due Date\": self.extract_payable_amount(),\r\n+                \"Units Consumed\": self.extract_units_consumed(),\r\n+                \"Issue Date\": self.issue_date,\r\n+                \"Due Date\": self.extract_due_date(),\r\n+                \"Subdivision\": self.extract_subdivision(),\r\n+                \"Monthly Units\": self.extract_monthly_units()\r\n+            }\r\n+\r\n+            # Calculate aggregates\r\n+            if result[\"Monthly Units\"]:\r\n+                monthly_units = [\r\n+                    int(units) for units in result[\"Monthly Units\"].values() \r\n+                    if units.isdigit()\r\n+                ]\r\n+                if monthly_units:\r\n\\ No newline at end of file\n+                    result[\"Total Yearly Units\"] = sum(monthly_units)\r\n+                    result[\"Max Units\"] = max(monthly_units)\r\n+\r\n+            return result\r\n+        except Exception as e:\r\n+            print(f\"Error parsing bill: {e}\")\r\n+            return None\r\n+\r\n+    def extract_payable_amount(self) -> str:\r\n+        \"\"\"Extract payable amount from bill.\"\"\"\r\n+        section = self.soup.find(string=lambda s: \"PAYABLE WITHIN DUE DATE\" in s if s else False)\r\n+        if not section:\r\n+            return \"Not Found\"\r\n+            \r\n+        parent_td = section.find_parent(\"td\")\r\n+        if not parent_td:\r\n+            return \"Not Found\"\r\n+            \r\n+        amount_td = parent_td.find_next_sibling(\"td\")\r\n+        return amount_td.get_text(strip=True) if amount_td else \"Not Found\"\r\n+\r\n+    def extract_units_consumed(self) -> str:\r\n+        \"\"\"Extract current month's units consumed.\"\"\"\r\n+        units_section = self.soup.find('b', string=lambda text: text and 'UNITS CONSUMED' in text)\r\n+        if not units_section:\r\n+            return \"Not Found\"\r\n+            \r\n+        units_td = units_section.find_next('td')\r\n+        return units_td.get_text(strip=True) if units_td else \"Not Found\"\r\n+\r\n+    def extract_due_date(self) -> str:\r\n+        \"\"\"Extract bill due date.\"\"\"\r\n+        header_row = self._find_date_header_row()\r\n+        if not header_row:\r\n+            return \"Not Found\"\r\n+\r\n+        data_row = header_row.find_next_sibling(\"tr\")\r\n+        if not data_row:\r\n+            return \"Not Found\"\r\n+\r\n+        headers = [td.get_text(strip=True).upper() for td in header_row.find_all(\"td\")]\r\n+        try:\r\n+            due_idx = headers.index(\"DUE DATE\")\r\n+            return data_row.find_all(\"td\")[due_idx].get_text(strip=True)\r\n+        except (ValueError, IndexError):\r\n+            return \"Not Found\"\r\n+\r\n+    def extract_issue_date(self) -> str:\r\n+        \"\"\"Extract bill issue date.\"\"\"\r\n+        header_row = self._find_date_header_row()\r\n+        if not header_row:\r\n+            return \"Not Found\"\r\n+\r\n+        data_row = header_row.find_next_sibling(\"tr\")\r\n+        if not data_row:\r\n+            return \"Not Found\"\r\n+\r\n+        headers = [td.get_text(strip=True).upper() for td in header_row.find_all(\"td\")]\r\n+        try:\r\n+            issue_idx = headers.index(\"ISSUE DATE\")\r\n+            return data_row.find_all(\"td\")[issue_idx].get_text(strip=True)\r\n+        except (ValueError, IndexError):\r\n+            return \"Not Found\"\r\n+\r\n+    def extract_subdivision(self) -> str:\r\n+        \"\"\"Extract subdivision information.\"\"\"\r\n+        section = self.soup.find(string=lambda s: \"SUB DIVISION\" in s if s else False)\r\n+        if not section:\r\n+            return \"Not Found\"\r\n+            \r\n+        parent_td = section.find_parent(\"td\")\r\n+        if not parent_td:\r\n+            return \"Not Found\"\r\n+            \r\n+        subdivision_td = parent_td.find_next_sibling(\"td\")\r\n+        return subdivision_td.get_text(strip=True) if subdivision_td else \"Not Found\"\r\n+\r\n+    def _find_date_header_row(self):\r\n+        \"\"\"Helper to find the row containing date headers.\"\"\"\r\n+        for tr in self.soup.find_all(\"tr\"):\r\n+            headers = [td.get_text(strip=True).upper() for td in tr.find_all(\"td\")]\r\n+            if \"ISSUE DATE\" in headers and \"DUE DATE\" in headers:\r\n+                return tr\r\n+        return None\r\n+\r\n+    def generate_year_data(self, issue_date_str: str) -> List[str]:\r\n+        \"\"\"Generate list of month-year combinations based on issue date.\"\"\"\r\n         months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\r\n-                \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\r\n+                 \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\r\n         try:\r\n-            issue_date = datetime.datetime.strptime(issue_date_str, \"%d %b %y\")\r\n+            issue_date = datetime.strptime(issue_date_str, \"%d %b %y\")\r\n             start_month_index = issue_date.month - 1\r\n             start_year = issue_date.year - 1\r\n-            self.year_data = []\r\n+            year_data = []\r\n \r\n             for i in range(12):\r\n                 month = months[(start_month_index + i) % 12]\r\n                 year = start_year if (start_month_index + i) < 12 else start_year + 1\r\n-                self.year_data.append(f\"{month}{year % 100:02d}\")\r\n+                year_data.append(f\"{month}{year % 100:02d}\")\r\n \r\n-            return self.year_data\r\n+            return year_data\r\n         except Exception as e:\r\n             print(f\"Error generating year data: {e}\")\r\n-            return []\r\n-\r\n-    def parse_bill(self):\r\n-        try:\r\n-            result = {\r\n-                \"Name\": self.extract_name(),\r\n-                \"Payable Within Due Date\": self.extract_payable_within_due_date(),\r\n-                \"Units Consumed\": self.extract_units_consumed(),\r\n-                \"Issue Date\": self.extract_issue_date(),\r\n-                \"Due Date\": self.extract_due_date(),\r\n-                \"Monthly Units\": self.extract_monthly_units(),\r\n-            }\r\n-            \r\n-            # Calculate additional metrics\r\n-            if result[\"Monthly Units\"]:\r\n-                result[\"Total Yearly Units\"] = sum(int(units) for units in result[\"Monthly Units\"].values() if units.isdigit())\r\n-                result[\"Max Units\"] = max(int(units) for units in result[\"Monthly Units\"].values() if units.isdigit())\r\n-            \r\n-            return result\r\n-        except Exception as e:\r\n-            print(f\"Error parsing bill: {e}\")\r\n-            return None\n+            return []\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733431077049,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n # solar/services/bill_parser/base_parser.py\r\n from abc import ABC, abstractmethod\r\n from datetime import datetime\r\n-from typing import Dict, Any, List\r\n+from typing import Dict, Any, List, Optional\r\n from bs4 import BeautifulSoup\r\n \r\n class BillParser(ABC):\r\n     \"\"\"Abstract base class for bill parsers.\"\"\"\r\n@@ -21,9 +21,9 @@\n     def extract_monthly_units(self) -> Dict[str, str]:\r\n         \"\"\"Extract monthly consumption units.\"\"\"\r\n         pass\r\n \r\n-    def parse_bill(self) -> Dict[str, Any]:\r\n+    def parse_bill(self) -> Optional[Dict[str, Any]]:\r\n         \"\"\"Parse bill and extract all relevant information.\"\"\"\r\n         try:\r\n             # Extract issue date first as it's needed for year data\r\n             self.issue_date = self.extract_issue_date()\r\n@@ -69,9 +69,9 @@\n         return amount_td.get_text(strip=True) if amount_td else \"Not Found\"\r\n \r\n     def extract_units_consumed(self) -> str:\r\n         \"\"\"Extract current month's units consumed.\"\"\"\r\n-        units_section = self.soup.find('b', string=lambda text: text and 'UNITS CONSUMED' in text)\r\n+        units_section = self.soup.find('b', string=lambda text: bool(text and 'UNITS CONSUMED' in text))\r\n         if not units_section:\r\n             return \"Not Found\"\r\n             \r\n         units_td = units_section.find_next('td')\r\n"
                },
                {
                    "date": 1733431155593,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,13 +41,13 @@\n             }\r\n \r\n             # Calculate aggregates\r\n             if result[\"Monthly Units\"]:\r\n-                monthly_units = [\r\n-                    int(units) for units in result[\"Monthly Units\"].values() \r\n+                if monthly_units := [\r\n+                    int(units)\r\n+                    for units in result[\"Monthly Units\"].values()\r\n                     if units.isdigit()\r\n-                ]\r\n-                if monthly_units:\r\n+                ]:\r\n                     result[\"Total Yearly Units\"] = sum(monthly_units)\r\n                     result[\"Max Units\"] = max(monthly_units)\r\n \r\n             return result\r\n@@ -136,18 +136,22 @@\n         \"\"\"Generate list of month-year combinations based on issue date.\"\"\"\r\n         months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\r\n                  \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\r\n         try:\r\n-            issue_date = datetime.strptime(issue_date_str, \"%d %b %y\")\r\n-            start_month_index = issue_date.month - 1\r\n-            start_year = issue_date.year - 1\r\n-            year_data = []\r\n+            return self._compute_month_year_combinations(issue_date_str, months)\r\n+        except Exception as e:\r\n+            print(f\"Error generating year data: {e}\")\r\n+            return []\r\n \r\n-            for i in range(12):\r\n-                month = months[(start_month_index + i) % 12]\r\n-                year = start_year if (start_month_index + i) < 12 else start_year + 1\r\n-                year_data.append(f\"{month}{year % 100:02d}\")\r\n+    def _compute_month_year_combinations(self, issue_date_str: str, months: List[str]) -> List[str]:\r\n\\ No newline at end of file\n+        \"\"\"Compute the list of month-year combinations for the past 12 months.\"\"\"\r\n+        issue_date = datetime.strptime(issue_date_str, \"%d %b %y\")\r\n+        start_month_index = issue_date.month - 1\r\n+        start_year = issue_date.year - 1\r\n+        year_data = []\r\n \r\n-            return year_data\r\n-        except Exception as e:\r\n-            print(f\"Error generating year data: {e}\")\r\n-            return []\n+        for i in range(12):\r\n+            month = months[(start_month_index + i) % 12]\r\n+            year = start_year if (start_month_index + i) < 12 else start_year + 1\r\n+            year_data.append(f\"{month}{year % 100:02d}\")\r\n+\r\n+        return year_data\n\\ No newline at end of file\n"
                }
            ],
            "date": 1733162249015,
            "name": "Commit-0",
            "content": "# solar/services/bill_parser/base_parser.py\r\n\r\nfrom abc import ABC, abstractmethod\r\nfrom bs4 import BeautifulSoup\r\nimport datetime\r\n\r\nclass BillParser(ABC):\r\n    def __init__(self, html_content):\r\n        self.soup = BeautifulSoup(html_content, \"html.parser\")\r\n        self.year_data = []\r\n    \r\n    @abstractmethod\r\n    def extract_name(self):\r\n        pass\r\n    \r\n    @abstractmethod\r\n    def extract_monthly_units(self):\r\n        pass\r\n    \r\n    def generate_year_data(self, issue_date_str):\r\n        months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\r\n                \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\r\n        try:\r\n            issue_date = datetime.datetime.strptime(issue_date_str, \"%d %b %y\")\r\n            start_month_index = issue_date.month - 1\r\n            start_year = issue_date.year - 1\r\n            self.year_data = []\r\n\r\n            for i in range(12):\r\n                month = months[(start_month_index + i) % 12]\r\n                year = start_year if (start_month_index + i) < 12 else start_year + 1\r\n                self.year_data.append(f\"{month}{year % 100:02d}\")\r\n\r\n            return self.year_data\r\n        except Exception as e:\r\n            print(f\"Error generating year data: {e}\")\r\n            return []\r\n\r\n    def parse_bill(self):\r\n        try:\r\n            result = {\r\n                \"Name\": self.extract_name(),\r\n                \"Payable Within Due Date\": self.extract_payable_within_due_date(),\r\n                \"Units Consumed\": self.extract_units_consumed(),\r\n                \"Issue Date\": self.extract_issue_date(),\r\n                \"Due Date\": self.extract_due_date(),\r\n                \"Monthly Units\": self.extract_monthly_units(),\r\n            }\r\n            \r\n            # Calculate additional metrics\r\n            if result[\"Monthly Units\"]:\r\n                result[\"Total Yearly Units\"] = sum(int(units) for units in result[\"Monthly Units\"].values() if units.isdigit())\r\n                result[\"Max Units\"] = max(int(units) for units in result[\"Monthly Units\"].values() if units.isdigit())\r\n            \r\n            return result\r\n        except Exception as e:\r\n            print(f\"Error parsing bill: {e}\")\r\n            return None"
        }
    ]
}