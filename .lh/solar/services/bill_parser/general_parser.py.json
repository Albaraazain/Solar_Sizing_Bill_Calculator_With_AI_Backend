{
    "sourceFile": "solar/services/bill_parser/general_parser.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1733410322178,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733410423017,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,31 +65,4 @@\n                 units = cells[1].get_text(strip=True)\r\n                 monthly_units[month] = units if units.isdigit() else \"0\"\r\n         return {month: monthly_units.get(month, \"0\") for month in self.year_data}\r\n \r\n-# solar/services/bill_parser/industrial_parser.py\r\n-from .base_parser import BillParser\r\n-\r\n-class IndustrialBillParser(BillParser):\r\n-    def extract_name(self):\r\n-        name_section = self.soup.find(string=lambda s: \"NAME & ADDRESS\" in s if s else False)\r\n-        return (name_section.find_next(\"td\").get_text(strip=True).replace(\"\\n\", \"\") \r\n-                if name_section else \"Not Found\")\r\n-\r\n-    def extract_monthly_units(self):\r\n-        tables = self.soup.find_all(\"table\")\r\n-        for table in tables:\r\n-            headers = [td.get_text(strip=True).upper() for td in table.find_all(\"td\")]\r\n-            if \"MONTH\" in headers and \"KWH UNITS\" in headers:\r\n-                return self._process_monthly_units_table(table)\r\n-        return {month: \"0\" for month in self.year_data}\r\n-\r\n-    def _process_monthly_units_table(self, table):\r\n-        monthly_units = {}\r\n-        rows = table.find_all(\"tr\")[1:]  # Skip header row\r\n-        for row in rows:\r\n-            cells = row.find_all(\"td\")\r\n-            if len(cells) >= 3:  # Industrial bills have MDI column between Month and KWH\r\n-                month = cells[0].get_text(strip=True)[:3] + cells[0].get_text(strip=True)[-2:]\r\n-                units = cells[2].get_text(strip=True)  # KWH Units is in third column\r\n-                monthly_units[month] = units if units.isdigit() else \"0\"\r\n-        return {month: monthly_units.get(month, \"0\") for month in self.year_data}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733412299032,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,68 +1,49 @@\n # solar/services/bill_parser/general_parser.py\r\n+from typing import Dict\r\n from .base_parser import BillParser\r\n \r\n class GeneralBillParser(BillParser):\r\n-    def extract_name(self):\r\n-        name_section = self.soup.find(string=lambda s: \"NAME & ADDRESS\" in s if s else False)\r\n-        return (name_section.find_next(\"span\").get_text(strip=True).replace(\"\\n\", \"\") \r\n-                if name_section else \"Not Found\")\r\n-\r\n-    def extract_payable_within_due_date(self):\r\n-        payable_section = self.soup.find(string=lambda s: \"PAYABLE WITHIN DUE DATE\" in s if s else False)\r\n-        if not payable_section:\r\n+    \"\"\"Parser for general consumer electricity bills.\"\"\"\r\n+    \r\n+    def extract_name(self) -> str:\r\n+        name_section = self.soup.find(\r\n+            string=lambda s: \"NAME & ADDRESS\" in s if s else False\r\n+        )\r\n+        if not name_section:\r\n             return \"Not Found\"\r\n-        parent_td = payable_section.find_parent(\"td\")\r\n-        return parent_td.find_next_sibling(\"td\").get_text(strip=True) if parent_td else \"Not Found\"\r\n+            \r\n+        name_span = name_section.find_next(\"span\")\r\n+        return (name_span.get_text(strip=True).replace(\"\\n\", \"\") \r\n+                if name_span else \"Not Found\")\r\n \r\n-    def extract_units_consumed(self):\r\n-        units_section = self.soup.find('b', string=lambda text: text and 'UNITS CONSUMED' in text)\r\n-        return units_section.find_next('td').text.strip() if units_section else \"Not Found\"\r\n-\r\n-    def extract_issue_date(self):\r\n-        header_row = self._find_date_header_row()\r\n-        if header_row and (data_row := header_row.find_next_sibling(\"tr\")):\r\n-            header_texts = [td.get_text(strip=True).upper() for td in header_row.find_all(\"td\")]\r\n-            try:\r\n-                issue_idx = header_texts.index(\"ISSUE DATE\")\r\n-                return data_row.find_all(\"td\")[issue_idx].get_text(strip=True)\r\n-            except (ValueError, IndexError):\r\n-                return \"Not Found\"\r\n-        return \"Not Found\"\r\n-\r\n-    def extract_due_date(self):\r\n-        header_row = self._find_date_header_row()\r\n-        if header_row and (data_row := header_row.find_next_sibling(\"tr\")):\r\n-            header_texts = [td.get_text(strip=True).upper() for td in header_row.find_all(\"td\")]\r\n-            try:\r\n-                due_idx = header_texts.index(\"DUE DATE\")\r\n-                return data_row.find_all(\"td\")[due_idx].get_text(strip=True)\r\n-            except (ValueError, IndexError):\r\n-                return \"Not Found\"\r\n-        return \"Not Found\"\r\n-\r\n-    def _find_date_header_row(self):\r\n-        for tr in self.soup.find_all(\"tr\"):\r\n-            texts = [td.get_text(strip=True).upper() for td in tr.find_all(\"td\")]\r\n-            if \"ISSUE DATE\" in texts and \"DUE DATE\" in texts:\r\n-                return tr\r\n-        return None\r\n-\r\n-    def extract_monthly_units(self):\r\n+    def extract_monthly_units(self) -> Dict[str, str]:\r\n+        # Find table with monthly data\r\n         tables = self.soup.find_all(\"table\")\r\n+        target_table = None\r\n+        \r\n         for table in tables:\r\n-            headers = [td.get_text(strip=True).upper() for td in table.find_all(\"td\")]\r\n+            headers = [td.get_text(strip=True).upper() \r\n+                      for td in table.find_all(\"td\")]\r\n             if \"MONTH\" in headers and \"UNITS\" in headers:\r\n-                return self._process_monthly_units_table(table)\r\n-        return {month: \"0\" for month in self.year_data}\r\n+                target_table = table\r\n+                break\r\n \r\n-    def _process_monthly_units_table(self, table):\r\n+        if not target_table:\r\n+            return {month: \"0\" for month in self.year_data}\r\n+\r\n+        # Process table rows\r\n         monthly_units = {}\r\n-        rows = table.find_all(\"tr\")[1:]  # Skip header row\r\n+        rows = target_table.find_all(\"tr\")[1:]  # Skip header\r\n+        \r\n         for row in rows:\r\n             cells = row.find_all(\"td\")\r\n             if len(cells) >= 2:\r\n-                month = cells[0].get_text(strip=True)[:3] + cells[0].get_text(strip=True)[-2:]\r\n+                month = (cells[0].get_text(strip=True)[:3] + \r\n+                        cells[0].get_text(strip=True)[-2:])\r\n                 units = cells[1].get_text(strip=True)\r\n-                monthly_units[month] = units if units.isdigit() else \"0\"\r\n-        return {month: monthly_units.get(month, \"0\") for month in self.year_data}\r\n+                if month in self.year_data:\r\n+                    monthly_units[month] = units if units.isdigit() else \"0\"\r\n \r\n+        # Ensure all months are covered\r\n+        return {month: monthly_units.get(month, \"0\") \r\n+                for month in self.year_data}\r\n"
                }
            ],
            "date": 1733410322178,
            "name": "Commit-0",
            "content": "# solar/services/bill_parser/general_parser.py\r\nfrom .base_parser import BillParser\r\n\r\nclass GeneralBillParser(BillParser):\r\n    def extract_name(self):\r\n        name_section = self.soup.find(string=lambda s: \"NAME & ADDRESS\" in s if s else False)\r\n        return (name_section.find_next(\"span\").get_text(strip=True).replace(\"\\n\", \"\") \r\n                if name_section else \"Not Found\")\r\n\r\n    def extract_payable_within_due_date(self):\r\n        payable_section = self.soup.find(string=lambda s: \"PAYABLE WITHIN DUE DATE\" in s if s else False)\r\n        if not payable_section:\r\n            return \"Not Found\"\r\n        parent_td = payable_section.find_parent(\"td\")\r\n        return parent_td.find_next_sibling(\"td\").get_text(strip=True) if parent_td else \"Not Found\"\r\n\r\n    def extract_units_consumed(self):\r\n        units_section = self.soup.find('b', string=lambda text: text and 'UNITS CONSUMED' in text)\r\n        return units_section.find_next('td').text.strip() if units_section else \"Not Found\"\r\n\r\n    def extract_issue_date(self):\r\n        header_row = self._find_date_header_row()\r\n        if header_row and (data_row := header_row.find_next_sibling(\"tr\")):\r\n            header_texts = [td.get_text(strip=True).upper() for td in header_row.find_all(\"td\")]\r\n            try:\r\n                issue_idx = header_texts.index(\"ISSUE DATE\")\r\n                return data_row.find_all(\"td\")[issue_idx].get_text(strip=True)\r\n            except (ValueError, IndexError):\r\n                return \"Not Found\"\r\n        return \"Not Found\"\r\n\r\n    def extract_due_date(self):\r\n        header_row = self._find_date_header_row()\r\n        if header_row and (data_row := header_row.find_next_sibling(\"tr\")):\r\n            header_texts = [td.get_text(strip=True).upper() for td in header_row.find_all(\"td\")]\r\n            try:\r\n                due_idx = header_texts.index(\"DUE DATE\")\r\n                return data_row.find_all(\"td\")[due_idx].get_text(strip=True)\r\n            except (ValueError, IndexError):\r\n                return \"Not Found\"\r\n        return \"Not Found\"\r\n\r\n    def _find_date_header_row(self):\r\n        for tr in self.soup.find_all(\"tr\"):\r\n            texts = [td.get_text(strip=True).upper() for td in tr.find_all(\"td\")]\r\n            if \"ISSUE DATE\" in texts and \"DUE DATE\" in texts:\r\n                return tr\r\n        return None\r\n\r\n    def extract_monthly_units(self):\r\n        tables = self.soup.find_all(\"table\")\r\n        for table in tables:\r\n            headers = [td.get_text(strip=True).upper() for td in table.find_all(\"td\")]\r\n            if \"MONTH\" in headers and \"UNITS\" in headers:\r\n                return self._process_monthly_units_table(table)\r\n        return {month: \"0\" for month in self.year_data}\r\n\r\n    def _process_monthly_units_table(self, table):\r\n        monthly_units = {}\r\n        rows = table.find_all(\"tr\")[1:]  # Skip header row\r\n        for row in rows:\r\n            cells = row.find_all(\"td\")\r\n            if len(cells) >= 2:\r\n                month = cells[0].get_text(strip=True)[:3] + cells[0].get_text(strip=True)[-2:]\r\n                units = cells[1].get_text(strip=True)\r\n                monthly_units[month] = units if units.isdigit() else \"0\"\r\n        return {month: monthly_units.get(month, \"0\") for month in self.year_data}\r\n\r\n# solar/services/bill_parser/industrial_parser.py\r\nfrom .base_parser import BillParser\r\n\r\nclass IndustrialBillParser(BillParser):\r\n    def extract_name(self):\r\n        name_section = self.soup.find(string=lambda s: \"NAME & ADDRESS\" in s if s else False)\r\n        return (name_section.find_next(\"td\").get_text(strip=True).replace(\"\\n\", \"\") \r\n                if name_section else \"Not Found\")\r\n\r\n    def extract_monthly_units(self):\r\n        tables = self.soup.find_all(\"table\")\r\n        for table in tables:\r\n            headers = [td.get_text(strip=True).upper() for td in table.find_all(\"td\")]\r\n            if \"MONTH\" in headers and \"KWH UNITS\" in headers:\r\n                return self._process_monthly_units_table(table)\r\n        return {month: \"0\" for month in self.year_data}\r\n\r\n    def _process_monthly_units_table(self, table):\r\n        monthly_units = {}\r\n        rows = table.find_all(\"tr\")[1:]  # Skip header row\r\n        for row in rows:\r\n            cells = row.find_all(\"td\")\r\n            if len(cells) >= 3:  # Industrial bills have MDI column between Month and KWH\r\n                month = cells[0].get_text(strip=True)[:3] + cells[0].get_text(strip=True)[-2:]\r\n                units = cells[2].get_text(strip=True)  # KWH Units is in third column\r\n                monthly_units[month] = units if units.isdigit() else \"0\"\r\n        return {month: monthly_units.get(month, \"0\") for month in self.year_data}"
        }
    ]
}