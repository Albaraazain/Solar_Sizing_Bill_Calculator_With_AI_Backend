{
    "sourceFile": "solar/views.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1733402288260,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1733402288260,
            "name": "Commit-0",
            "content": "from django.shortcuts import render, redirect\nfrom django.urls import reverse\nfrom solar.invoice_generator.Bill_Reader import bill_reader\nfrom solar.invoice_generator.invoicemaker import generate_invoice\nfrom solar.invoice_generator.bill_verify import verify_bill\nfrom solar.invoice_generator.bill_parser_ind import parse_electricity_bill_industrial\nfrom solar.invoice_generator.bill_parser_gen import parse_electricity_bill_general\nfrom solar.models import Panel, Inverter, PotentialCustomers, variableCosts, BracketCosts\nimport math\nfrom django.http import JsonResponse\nfrom django.contrib.auth.decorators import user_passes_test\nfrom django.views.decorators.csrf import csrf_exempt\nfrom django.shortcuts import get_object_or_404\nfrom rest_framework.views import APIView\nfrom rest_framework.response import Response\nfrom rest_framework import status\nimport json\nimport requests\nfrom bs4 import BeautifulSoup\n\nclass BillValidateAPIView(APIView):\n    def post(self, request):\n        reference_number = request.data.get(\"reference_number\")\n        if not reference_number:\n            return Response({\n                \"success\": False,\n                \"data\": {\n                    \"isValid\": False,\n                    \"message\": \"Reference number is required\"\n                }\n            }, status=status.HTTP_400_BAD_REQUEST)\n\n        try:\n            # Verify bill using existing function\n            result = verify_bill(reference_number)\n            \n            return Response({\n                \"success\": True,\n                \"data\": {\n                    \"isValid\": result['exists'],\n                    \"referenceNumber\": reference_number,\n                    \"message\": \"Bill validation successful\"\n                }\n            }, status=status.HTTP_200_OK)\n        except Exception as e:\n            return Response({\n                \"success\": False,\n                \"data\": {\n                    \"isValid\": False,\n                    \"message\": str(e)\n                }\n            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\nclass GetBillDataAPIView(APIView):\n    def get(self, request, reference_number):\n        if not reference_number:\n            return Response({\n                \"status\": \"error\",\n                \"message\": \"Reference number is required.\"\n            }, status=status.HTTP_400_BAD_REQUEST)\n\n        status_result = verify_bill(reference_number)\n        if not status_result['exists']:\n            return Response({\n                \"status\": \"error\",\n                \"message\": \"Bill not found.\"\n            }, status=status.HTTP_400_BAD_REQUEST)\n\n        url = status_result.get(\"source_url\")\n        if not url:\n            return Response({\n                \"status\": \"error\",\n                \"message\": \"Valid URL not found.\"\n            }, status=status.HTTP_400_BAD_REQUEST)\n\n        full_url = f\"{url}?refno={reference_number}\"\n\n        try:\n            response = requests.get(full_url)\n            response.raise_for_status()\n            response.encoding = response.apparent_encoding  # Ensure proper encoding\n        except requests.RequestException as e:\n            return Response({\n                \"status\": \"error\",\n                \"message\": str(e)\n            }, status=status.HTTP_400_BAD_REQUEST)\n\n        soup = BeautifulSoup(response.text, 'html.parser')  # Use .text for decoded content\n        html_content = soup.prettify()\n\n        # Optional: clean up escape sequences\n        html_content = html_content.replace(\"\\r\", \"\").replace(\"\\n\", \"\")\n        #print(html_content)\n        if (status_result['source_url'] == \"https://bill.pitc.com.pk/mepcobill/industrial\"):\n            json_data = parse_electricity_bill_industrial(html_content)\n        else:\n            json_data = parse_electricity_bill_general(html_content)\n\n        yearly_units = int(json_data['Total Yearly Units'])\n        yearly_avg = yearly_units / 12\n\n        print(yearly_avg)\n        system_size_kw = (yearly_avg / 30) / 4\n        print(system_size_kw)\n        system_size_recommended = math.ceil(system_size_kw * 1.5)\n        system_size_smaller = math.ceil(system_size_kw * 1.3)\n        system_size_larger = math.ceil(system_size_kw * 1.7)\n        json_data['Recommended System Size'] = system_size_recommended\n        json_data['Smaller System Size'] = system_size_smaller\n        json_data['Larger System Size'] = system_size_larger  \n        return Response({\n            \"status\": \"success\",\n            \"data\": json_data\n        }, status=status.HTTP_200_OK)\n    \ndef index(request):\n    return render(request, 'solar/index.html')\n\ndef quotation(request):\n    return render(request, 'solar/quotation.html')\n\n#DEPRECATED\ndef generate_invoice_view(request):\n    if request.method == 'POST':\n        reference_number = request.POST.get('reference_number')\n        phone_number = request.POST.get('phone_number')\n        address = request.POST.get('address')\n        \n        try:\n            invoice_data = bill_reader(reference_number)\n            name = invoice_data['Name']\n            #panel_power = 545  # 545 watts per panel\n            panel = Panel.objects.get(default_choice=True)\n            panel_power = panel.power\n            panel_price = panel.price\n            panel_brand = panel.brand\n            potential_customer = PotentialCustomers.objects.create(\n                name=name, address=address, phone=phone_number, reference_number=reference_number)\n            potential_customer.save()\n\n            # Calculate recommended system size based on the customer's consumption\n            daily_energy = (panel_power * 9) / 1000  # 9 hours of sunlight\n            annual_energy = daily_energy * 365\n            total_power_of_1_panel = float(annual_energy) * 0.8  # 80% efficiency per panel\n            panels_needed = math.ceil((int(invoice_data['Max Units']) * 12) / total_power_of_1_panel)\n            system_size_recommended = math.ceil((panels_needed * panel_power) / 1000)\n\n            # Calculate sizes for smaller and larger systems\n            system_size_smaller = max(system_size_recommended - 2, 1)  # Ensure at least 1kW\n            system_size_larger = system_size_recommended + 2\n\n            # Pricing calculations for all three systems\n            # Find the inverter with the same power or closest to the system size\n            inverters_rec = Inverter.objects.filter(power__gte=system_size_recommended).order_by('power')\n            if inverters_rec.exists():\n                inverter_rec = inverters_rec.first()\n                print(inverter_rec)\n                inverter_price_rec = inverter_rec.price\n            else:\n                # Handle the case when no inverter is available with the required power\n                inverter_price_rec = 0\n            inverters_small = Inverter.objects.filter(power__gte=system_size_smaller).order_by('power')\n            if inverters_small.exists():\n                inverter_small = inverters_small.first()\n                print(inverter_small)\n                inverter_price_small = inverter_small.price\n            else:\n                # Handle the case when no inverter is available with the required power\n                inverter_price_small = 0\n            inverters_large = Inverter.objects.filter(power__gte=system_size_larger).order_by('power')\n            if inverters_large.exists():\n                inverter_large = inverters_large.first()\n                print(inverter_large)\n                inverter_price_large = inverter_large.price\n            else:\n                # Handle the case when no inverter is available with the required power\n                inverter_price_large = 0\n            net_metering = variableCosts.objects.filter(cost_name='Net Metering').first().cost\n            installation_cost_per_watt = variableCosts.objects.filter(cost_name='Installation Cost per Watt').first().cost\n            frame_cost_per_watt = variableCosts.objects.filter(cost_name='Frame Cost per Watt').first().cost\n            \n            cabling_cost = 50000\n            electrical_and_mechanical_cost = 50000\n\n            # Total cost calculation for each system\n            def calculate_total_cost(system_size, inverter_price, installation_cost, frame_cost):\n                print(system_size, inverter_price, installation_cost, frame_cost)\n                print(system_size * panel_price * panel_power)  \n                return (system_size * panel_price * panel_power) + inverter_price + net_metering + installation_cost + frame_cost + cabling_cost + electrical_and_mechanical_cost\n            \n            installation_rec = system_size_recommended * installation_cost_per_watt * 1000\n            installation_small = system_size_smaller * installation_cost_per_watt * 1000\n            installation_large = system_size_larger * installation_cost_per_watt * 1000\n            frame_cost_rec = system_size_recommended * frame_cost_per_watt * 1000\n            frame_cost_small = system_size_smaller * frame_cost_per_watt * 1000\n            frame_cost_large = system_size_larger * frame_cost_per_watt * 1000\n            total_cost_recommended = calculate_total_cost(panels_needed, inverter_price_rec, installation_rec, frame_cost_rec)\n            total_cost_smaller = calculate_total_cost(math.ceil(system_size_smaller * 1000 / panel_power), inverter_price_small, installation_small, frame_cost_small)\n            total_cost_larger = calculate_total_cost(math.ceil(system_size_larger * 1000 / panel_power), inverter_price_large, installation_large, frame_cost_large)\n\n            # Prepare response data for all three systems\n            response_data = {\n                'name': name,\n                'address': address,\n                'phone': phone_number,\n                'reference_number': reference_number,\n                'electricity_bill': invoice_data['Payable Within Due Date'],\n                'monthly_units': invoice_data['Units Consumed'],\n                'yearly_units': invoice_data['Total Yearly Units'],\n                'panel_price': panel_price,\n                'panel_brand': panel_brand,\n                'panel_power': panel_power,\n                'net_metering': net_metering,               \n                # Recommended system\n                'recommended': {\n                    'system_size': system_size_recommended,\n\n                    'panel_quantity': panels_needed,\n                    'inverter_brand': inverter_rec.brand,\n                    'inverter_price_rec': inverter_price_rec,\n                    'frame_cost': frame_cost_rec,\n                    'installation_cost': installation_rec,\n                    'total_cost': total_cost_recommended,\n                    'cabling_cost': 50000,\n                    'electrical_and_mechanical_cost': 50000\n                },\n                # Smaller system\n                'smaller': {\n                    'system_size': system_size_smaller,\n                    'panel_quantity': math.ceil(system_size_smaller * 1000 / panel_power),\n                    'inverter_brand': inverter_small.brand,\n                    'frame_cost': frame_cost_small,\n                    'installation_cost': installation_small,\n                    'total_cost': total_cost_smaller,\n                    'inverter_price_small': inverter_price_small,\n                    'cabling_cost': 50000,\n                    'electrical_and_mechanical_cost': 50000\n                },\n                # Larger system\n                'larger': {\n                    'system_size': system_size_larger,\n                    'panel_quantity': math.ceil(system_size_larger * 1000 / panel_power),\n                    'inverter_brand': inverter_large.brand,\n                    'frame_cost': frame_cost_large,\n                    'installation_cost': installation_large,\n                    'total_cost': total_cost_larger,\n                    'inverter_price_large': inverter_price_large,\n                    'cabling_cost': 50000,\n                    'electrical_and_mechanical_cost': 50000\n                }\n            }\n            \n            return JsonResponse(response_data)\n\n        except Exception as e:\n            return render(request, 'index.html', {'error_message': str(e)})\n\n    return redirect(reverse('your_form_page_name'))\n\nclass GenerateInvoiceForSystem(APIView):\n    def get(self, request, *args, **kwargs):\n        try:\n            # Extract system_size from the kwargs\n            system_size = int(kwargs.get('system_size', 0))\n            if not system_size:\n                return Response({'error': 'No system size provided'}, status=status.HTTP_400_BAD_REQUEST)\n            \n            # The rest of your logic remains the same\n            panel = Panel.objects.get(default_choice=True)\n            panel_power = panel.power\n            panel_price = panel.price\n            panel_brand = panel.brand\n            panels_needed = math.ceil((system_size * 1000) / panel_power)\n            inverters = Inverter.objects.filter(power__gte=system_size).order_by('power')\n            if inverters.exists():\n                inverter = inverters.first()\n                inverter_price = inverter.price\n                inverter_brand = inverter.brand\n            else:\n                # Handle the case when no inverter is available with the required power\n                inverter_price = 0\n           # variableCosts queries with validation\n            net_metering_record = variableCosts.objects.filter(cost_name='Net Metering').first()\n            if not net_metering_record:\n                return Response({'error': 'Net Metering cost is missing in the database'}, status=status.HTTP_400_BAD_REQUEST)\n            net_metering = net_metering_record.cost\n\n            installation_cost_record = variableCosts.objects.filter(cost_name='Installation Cost per Watt').first()\n            if not installation_cost_record:\n                return Response({'error': 'Installation Cost per Watt is missing in the database'}, status=status.HTTP_400_BAD_REQUEST)\n            installation_cost_per_watt = installation_cost_record.cost\n            total_installation_cost = installation_cost_per_watt * system_size * 1000\n\n            frame_cost_record = variableCosts.objects.filter(cost_name='Frame Cost per Watt').first()\n            if not frame_cost_record:\n                return Response({'error': 'Frame Cost per Watt is missing in the database'}, status=status.HTTP_400_BAD_REQUEST)\n            frame_cost_per_watt = frame_cost_record.cost\n            total_frame_cost = frame_cost_per_watt * system_size * 1000\n\n            labor_cost_record = variableCosts.objects.filter(cost_name='Labor Cost').first()\n            if not labor_cost_record:\n                return Response({'error': 'Labor Cost is missing in the database'}, status=status.HTTP_400_BAD_REQUEST)\n            labor_cost = labor_cost_record.cost\n            total_labor_cost = labor_cost * system_size * 1000\n\n            # BracketCosts queries with validation\n            DC_Cable_Costs = BracketCosts.objects.filter(Type='DC Cables').order_by('SystemRange')\n            print(DC_Cable_Costs)\n            selected_DC_Cable_Cost = None\n            for cost in DC_Cable_Costs:\n                print(cost.SystemRange)\n                print(system_size)\n                if cost.SystemRange <= system_size:\n                    selected_DC_Cable_Cost = cost\n                    print(selected_DC_Cable_Cost, \"Has been selected\")\n                else:\n                    break\n            if not selected_DC_Cable_Cost:\n                return Response({'error': 'DC Cable cost is missing or not suitable for the system size'}, status=status.HTTP_400_BAD_REQUEST)\n\n            AC_Cable_Costs = BracketCosts.objects.filter(Type='AC Cables').order_by('SystemRange')\n            selected_AC_Cable_Cost = None\n            for cost in AC_Cable_Costs:\n                if cost.SystemRange <= system_size:\n                    selected_AC_Cable_Cost = cost\n                else:\n                    break\n            if not selected_AC_Cable_Cost:\n                return Response({'error': 'AC Cable cost is missing or not suitable for the system size'}, status=status.HTTP_400_BAD_REQUEST)\n\n            Accessories_Costs = BracketCosts.objects.filter(Type='Accessories').order_by('SystemRange')\n            selected_Accessories_Cost = None\n            for cost in Accessories_Costs:\n                if cost.SystemRange <= system_size:\n                    selected_Accessories_Cost = cost\n                else:\n                    break\n            if not selected_Accessories_Cost:\n                return Response({'error': 'Accessories cost is missing or not suitable for the system size'}, status=status.HTTP_400_BAD_REQUEST)\n\n            \n            total_cost = (panels_needed * panel_price) + inverter_price + net_metering + total_installation_cost + total_frame_cost + selected_DC_Cable_Cost.cost + selected_AC_Cable_Cost.cost + selected_Accessories_Cost.cost + total_labor_cost\n            # Your logic to generate invoice based on input_string\n            invoice_data = {\n                'panel_price': panel_price,\n                'panel_brand': panel_brand,\n                'panel_power': panel_power,\n                'panels_needed': panels_needed,\n                'inverter_brand': inverter_brand,\n                'inverter_price': inverter_price,\n                'net_metering': net_metering,\n                'installation_cost': total_installation_cost,\n                'frame_cost': total_frame_cost,\n                'dc_cable_cost': selected_DC_Cable_Cost.cost,\n                'ac_cable_cost': selected_AC_Cable_Cost.cost,\n                'accessories_cost': selected_Accessories_Cost.cost,\n                'labor_cost': total_labor_cost,\n                'total_cost': total_cost,\n                'invoice': 'Generated invoice data here'  # Replace with actual invoice generation logic\n            }\n            \n            return Response(invoice_data, status=status.HTTP_200_OK)\n        except Exception as e:\n            return Response({'error': str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\n\n#@user_passes_test(lambda u: u.is_staff)\ndef control_panel(request):\n    return render(request, 'solar/control_panel.html')\n\n#@user_passes_test(lambda u: u.is_staff)\ndef panels(request):\n    if request.method == 'GET':\n        panels = Panel.objects.all().values()\n        return JsonResponse(list(panels), safe=False)\n    elif request.method == 'POST':\n        data = json.loads(request.body)\n        panel = Panel.objects.create(\n            brand=data['brand'],\n            price=data['price'],\n            power=data['power'],\n        )\n        return JsonResponse({'message': 'Panel added successfully!'})\n    \ndef set_default_panel(request, panel_id):\n    # Set all default_choice fields to False\n    Panel.objects.update(default_choice=False)\n\n    # Set the selected panel's default_choice to True\n    try:\n        panel = Panel.objects.get(id=panel_id)\n        panel.default_choice = True\n        panel.save()\n        return JsonResponse({'success': True})\n    except Panel.DoesNotExist:\n        return JsonResponse({'success': False, 'error': 'Panel not found'}, status=404)\n\n#@user_passes_test(lambda u: u.is_staff)\ndef inverters(request):\n    if request.method == 'GET':\n        inverters = Inverter.objects.all().values()\n        return JsonResponse(list(inverters), safe=False)\n    elif request.method == 'POST':\n        data = json.loads(request.body)\n        inverter = Inverter.objects.create(\n            brand=data['brand'],\n            price=data['price'],\n            power=data['power'],\n            availability=data['availability']\n        )\n        return JsonResponse({'message': 'Inverter added successfully!'})\n\n#@user_passes_test(lambda u: u.is_staff)\ndef customers(request):\n    customers = PotentialCustomers.objects.all().values()\n    return JsonResponse(list(customers), safe=False)\n\n@csrf_exempt\n#@user_passes_test(lambda u: u.is_staff)\ndef panel_list(request):\n    if request.method == 'GET':\n        panels = Panel.objects.all().values()\n        return JsonResponse(list(panels), safe=False)\n    elif request.method == 'POST':\n        data = json.loads(request.body)\n        panel = Panel.objects.create(\n            brand=data['brand'],\n            price=data['price'],\n            power=data['power'],\n            availability=data['availability']\n        )\n        return JsonResponse({\"id\": panel.id}, status=201)\n\n@csrf_exempt\n#@user_passes_test(lambda u: u.is_staff)\ndef panel_detail(request, id):\n    panel = get_object_or_404(Panel, id=id)\n    if request.method == 'PUT':\n        data = json.loads(request.body)\n        panel.brand = data['brand']\n        panel.price = data['price']\n        panel.power = data['power']\n        panel.availability = data['availability']\n        panel.save()\n        return JsonResponse({\"id\": panel.id}, status=200)\n    elif request.method == 'DELETE':\n        panel.delete()\n        return JsonResponse({\"id\": id}, status=200)\n\n@csrf_exempt\n#@user_passes_test(lambda u: u.is_staff)\ndef inverter_list(request):\n    if request.method == 'GET':\n        inverters = Inverter.objects.all().values()\n        return JsonResponse(list(inverters), safe=False)\n    elif request.method == 'POST':\n        data = json.loads(request.body)\n        inverter = Inverter.objects.create(\n            brand=data['brand'],\n            price=data['price'],\n            power=data['power'],\n            availability=data['availability']\n        )\n        return JsonResponse({\"id\": inverter.id}, status=201)\n\n@csrf_exempt\n#@user_passes_test(lambda u: u.is_staff)\ndef inverter_detail(request, id):\n    inverter = get_object_or_404(Inverter, id=id)\n    if request.method == 'PUT':\n        data = json.loads(request.body)\n        inverter.brand = data['brand']\n        inverter.price = data['price']\n        inverter.power = data['power']\n        inverter.availability = data['availability']\n        inverter.save()\n        return JsonResponse({\"id\": inverter.id}, status=200)\n    elif request.method == 'DELETE':\n        inverter.delete()\n        return JsonResponse({\"id\": id}, status=200)\n\n@csrf_exempt\n#@user_passes_test(lambda u: u.is_staff)\ndef set_prices(request):\n    if request.method == 'POST':\n        data = json.loads(request.body)\n        variableCosts.objects.update_or_create(\n            cost_name='Frame Cost per Watt', defaults={'cost': data['pricePerWatt']}\n        )\n        variableCosts.objects.update_or_create(\n            cost_name='Installation Cost per Watt', defaults={'cost': data['installationCost']}\n        )\n        variableCosts.objects.update_or_create(\n            cost_name='Net Metering', defaults={'cost': data['netMetering']}\n        )\n        return JsonResponse({\"status\": \"success\"}, status=200)\n\n@csrf_exempt\n#@user_passes_test(lambda u: u.is_staff)\ndef customer_list(request):\n    if request.method == 'GET':\n        customers = PotentialCustomers.objects.all().values()\n        return JsonResponse(list(customers), safe=False)\n\n@csrf_exempt\n#@user_passes_test(lambda u: u.is_staff)\ndef get_prices(request):\n    if request.method == 'GET':\n        frame_cost = variableCosts.objects.filter(cost_name='Frame Cost per Watt').first()\n        installation_cost = variableCosts.objects.filter(cost_name='Installation Cost per Watt').first()\n        net_metering = variableCosts.objects.filter(cost_name='Net Metering').first()\n        print(net_metering.cost)\n        response_data = {\n            'frame_cost_per_watt': frame_cost.cost if frame_cost else '',\n            'installation_cost_per_watt': installation_cost.cost if installation_cost else '',\n            'net_metering': net_metering.cost if net_metering else ''\n        }\n        return JsonResponse(response_data, safe=False)\n"
        }
    ]
}