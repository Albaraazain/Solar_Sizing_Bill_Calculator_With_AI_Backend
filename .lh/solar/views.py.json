{
    "sourceFile": "solar/views.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1733402288260,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733402413718,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,579 @@\n+from django.shortcuts import render, redirect\n+from django.urls import reverse\n+from solar.invoice_generator.Bill_Reader import bill_reader\n+from solar.invoice_generator.invoicemaker import generate_invoice\n+from solar.invoice_generator.bill_verify import verify_bill\n+from solar.invoice_generator.bill_parser_ind import parse_electricity_bill_industrial\n+from solar.invoice_generator.bill_parser_gen import parse_electricity_bill_general\n+from solar.models import Panel, Inverter, PotentialCustomers, variableCosts, BracketCosts\n+import math\n+from django.http import JsonResponse\n+from django.contrib.auth.decorators import user_passes_test\n+from django.views.decorators.csrf import csrf_exempt\n+from django.shortcuts import get_object_or_404\n+from rest_framework.views import APIView\n+from rest_framework.response import Response\n+from rest_framework import status\n+import json\n+import requests\n+from bs4 import BeautifulSoup\n+\n+class BillValidateAPIView(APIView):\n+    def post(self, request):\n+        reference_number = request.data.get(\"reference_number\")\n+        if not reference_number:\n+            return Response({\n+                \"success\": False,\n+                \"data\": {\n+                    \"isValid\": False,\n+                    \"message\": \"Reference number is required\"\n+                }\n+            }, status=status.HTTP_400_BAD_REQUEST)\n+\n+        try:\n+            # Verify bill using existing function\n+            result = verify_bill(reference_number)\n+            \n+            return Response({\n+                \"success\": True,\n+                \"data\": {\n+                    \"isValid\": result['exists'],\n+                    \"referenceNumber\": reference_number,\n+                    \"message\": \"Bill validation successful\"\n+                }\n+            }, status=status.HTTP_200_OK)\n+        except Exception as e:\n+            return Response({\n+                \"success\": False,\n+                \"data\": {\n+                    \"isValid\": False,\n+                    \"message\": str(e)\n+                }\n+            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n+            \n+class BillDetailsAPIView(APIView):\n+    def get(self, request, reference_number=None):\n+        if not reference_number:\n+            return Response({\n+                \"success\": False,\n+                \"message\": \"Reference number is required\"\n+            }, status=status.HTTP_400_BAD_REQUEST)\n+\n+        try:\n+            # Get bill details using your existing functions\n+            status_result = verify_bill(reference_number)\n+            if not status_result['exists']:\n+                return Response({\n+                    \"success\": False,\n+                    \"message\": \"Bill not found\"\n+                }, status=status.HTTP_404_NOT_FOUND)\n+\n+            # Get HTML content from the bill URL\n+            url = f\"{status_result['source_url']}?refno={reference_number}\"\n+            response = requests.get(url)\n+            html_content = response.text\n+\n+            # Parse bill based on type\n+            if status_result['source_url'].endswith('industrial'):\n+                bill_data = parse_electricity_bill_industrial(html_content)\n+            else:\n+                bill_data = parse_electricity_bill_general(html_content)\n+\n+            # Calculate system sizes\n+            yearly_units = int(bill_data['Total Yearly Units'])\n+            daily_avg = yearly_units / 365\n+            system_size_kw = daily_avg / 4  # Assuming 4 kWh per kW per day\n+\n+            # Add calculated fields\n+            enhanced_data = {\n+                **bill_data,\n+                \"customerName\": bill_data.get(\"Name\", \"\"),\n+                \"unitsConsumed\": int(bill_data.get(\"Units Consumed\", 0)),\n+                \"dueDate\": bill_data.get(\"Due Date\", \"\"),\n+                \"issueDate\": bill_data.get(\"Issue Date\", \"\"),\n+                \"amount\": float(bill_data.get(\"Payable Within Due Date\", \"0\").replace(\"PKR \", \"\").replace(\",\", \"\")),\n+                \"systemSizing\": {\n+                    \"recommended\": math.ceil(system_size_kw * 1.5),\n+                    \"smaller\": math.ceil(system_size_kw * 1.3),\n+                    \"larger\": math.ceil(system_size_kw * 1.7)\n+                }\n+            }\n+\n+            return Response({\n+                \"success\": True,\n+                \"data\": enhanced_data\n+            }, status=status.HTTP_200_OK)\n+\n+        except Exception as e:\n+            return Response({\n+                \"success\": False,\n+                \"message\": str(e)\n+            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n+\n+\n+\n+class GetBillDataAPIView(APIView):\n+    def get(self, request, reference_number):\n+        if not reference_number:\n+            return Response({\n+                \"status\": \"error\",\n+                \"message\": \"Reference number is required.\"\n+            }, status=status.HTTP_400_BAD_REQUEST)\n+\n+        status_result = verify_bill(reference_number)\n+        if not status_result['exists']:\n+            return Response({\n+                \"status\": \"error\",\n+                \"message\": \"Bill not found.\"\n+            }, status=status.HTTP_400_BAD_REQUEST)\n+\n+        url = status_result.get(\"source_url\")\n+        if not url:\n+            return Response({\n+                \"status\": \"error\",\n+                \"message\": \"Valid URL not found.\"\n+            }, status=status.HTTP_400_BAD_REQUEST)\n+\n+        full_url = f\"{url}?refno={reference_number}\"\n+\n+        try:\n+            response = requests.get(full_url)\n+            response.raise_for_status()\n+            response.encoding = response.apparent_encoding  # Ensure proper encoding\n+        except requests.RequestException as e:\n+            return Response({\n+                \"status\": \"error\",\n+                \"message\": str(e)\n+            }, status=status.HTTP_400_BAD_REQUEST)\n+\n+        soup = BeautifulSoup(response.text, 'html.parser')  # Use .text for decoded content\n+        html_content = soup.prettify()\n+\n+        # Optional: clean up escape sequences\n+        html_content = html_content.replace(\"\\r\", \"\").replace(\"\\n\", \"\")\n+        #print(html_content)\n+        if (status_result['source_url'] == \"https://bill.pitc.com.pk/mepcobill/industrial\"):\n+            json_data = parse_electricity_bill_industrial(html_content)\n+        else:\n+            json_data = parse_electricity_bill_general(html_content)\n+\n+        yearly_units = int(json_data['Total Yearly Units'])\n+        yearly_avg = yearly_units / 12\n+\n+        print(yearly_avg)\n+        system_size_kw = (yearly_avg / 30) / 4\n+        print(system_size_kw)\n+        system_size_recommended = math.ceil(system_size_kw * 1.5)\n+        system_size_smaller = math.ceil(system_size_kw * 1.3)\n+        system_size_larger = math.ceil(system_size_kw * 1.7)\n+        json_data['Recommended System Size'] = system_size_recommended\n+        json_data['Smaller System Size'] = system_size_smaller\n+        json_data['Larger System Size'] = system_size_larger  \n+        return Response({\n+            \"status\": \"success\",\n+            \"data\": json_data\n+        }, status=status.HTTP_200_OK)\n+    \n+def index(request):\n+    return render(request, 'solar/index.html')\n+\n+def quotation(request):\n+    return render(request, 'solar/quotation.html')\n+\n+#DEPRECATED\n+def generate_invoice_view(request):\n+    if request.method == 'POST':\n+        reference_number = request.POST.get('reference_number')\n+        phone_number = request.POST.get('phone_number')\n+        address = request.POST.get('address')\n+        \n+        try:\n+            invoice_data = bill_reader(reference_number)\n+            name = invoice_data['Name']\n+            #panel_power = 545  # 545 watts per panel\n+            panel = Panel.objects.get(default_choice=True)\n+            panel_power = panel.power\n+            panel_price = panel.price\n+            panel_brand = panel.brand\n+            potential_customer = PotentialCustomers.objects.create(\n+                name=name, address=address, phone=phone_number, reference_number=reference_number)\n+            potential_customer.save()\n+\n+            # Calculate recommended system size based on the customer's consumption\n+            daily_energy = (panel_power * 9) / 1000  # 9 hours of sunlight\n+            annual_energy = daily_energy * 365\n+            total_power_of_1_panel = float(annual_energy) * 0.8  # 80% efficiency per panel\n+            panels_needed = math.ceil((int(invoice_data['Max Units']) * 12) / total_power_of_1_panel)\n+            system_size_recommended = math.ceil((panels_needed * panel_power) / 1000)\n+\n+            # Calculate sizes for smaller and larger systems\n+            system_size_smaller = max(system_size_recommended - 2, 1)  # Ensure at least 1kW\n+            system_size_larger = system_size_recommended + 2\n+\n+            # Pricing calculations for all three systems\n+            # Find the inverter with the same power or closest to the system size\n+            inverters_rec = Inverter.objects.filter(power__gte=system_size_recommended).order_by('power')\n+            if inverters_rec.exists():\n+                inverter_rec = inverters_rec.first()\n+                print(inverter_rec)\n+                inverter_price_rec = inverter_rec.price\n+            else:\n+                # Handle the case when no inverter is available with the required power\n+                inverter_price_rec = 0\n+            inverters_small = Inverter.objects.filter(power__gte=system_size_smaller).order_by('power')\n+            if inverters_small.exists():\n+                inverter_small = inverters_small.first()\n+                print(inverter_small)\n+                inverter_price_small = inverter_small.price\n+            else:\n+                # Handle the case when no inverter is available with the required power\n+                inverter_price_small = 0\n+            inverters_large = Inverter.objects.filter(power__gte=system_size_larger).order_by('power')\n+            if inverters_large.exists():\n+                inverter_large = inverters_large.first()\n+                print(inverter_large)\n+                inverter_price_large = inverter_large.price\n+            else:\n+                # Handle the case when no inverter is available with the required power\n+                inverter_price_large = 0\n+            net_metering = variableCosts.objects.filter(cost_name='Net Metering').first().cost\n+            installation_cost_per_watt = variableCosts.objects.filter(cost_name='Installation Cost per Watt').first().cost\n+            frame_cost_per_watt = variableCosts.objects.filter(cost_name='Frame Cost per Watt').first().cost\n+            \n+            cabling_cost = 50000\n+            electrical_and_mechanical_cost = 50000\n+\n+            # Total cost calculation for each system\n+            def calculate_total_cost(system_size, inverter_price, installation_cost, frame_cost):\n+                print(system_size, inverter_price, installation_cost, frame_cost)\n+                print(system_size * panel_price * panel_power)  \n+                return (system_size * panel_price * panel_power) + inverter_price + net_metering + installation_cost + frame_cost + cabling_cost + electrical_and_mechanical_cost\n+            \n+            installation_rec = system_size_recommended * installation_cost_per_watt * 1000\n+            installation_small = system_size_smaller * installation_cost_per_watt * 1000\n+            installation_large = system_size_larger * installation_cost_per_watt * 1000\n+            frame_cost_rec = system_size_recommended * frame_cost_per_watt * 1000\n+            frame_cost_small = system_size_smaller * frame_cost_per_watt * 1000\n+            frame_cost_large = system_size_larger * frame_cost_per_watt * 1000\n+            total_cost_recommended = calculate_total_cost(panels_needed, inverter_price_rec, installation_rec, frame_cost_rec)\n+            total_cost_smaller = calculate_total_cost(math.ceil(system_size_smaller * 1000 / panel_power), inverter_price_small, installation_small, frame_cost_small)\n+            total_cost_larger = calculate_total_cost(math.ceil(system_size_larger * 1000 / panel_power), inverter_price_large, installation_large, frame_cost_large)\n+\n+            # Prepare response data for all three systems\n+            response_data = {\n+                'name': name,\n+                'address': address,\n+                'phone': phone_number,\n+                'reference_number': reference_number,\n+                'electricity_bill': invoice_data['Payable Within Due Date'],\n+                'monthly_units': invoice_data['Units Consumed'],\n+                'yearly_units': invoice_data['Total Yearly Units'],\n+                'panel_price': panel_price,\n+                'panel_brand': panel_brand,\n+                'panel_power': panel_power,\n+                'net_metering': net_metering,               \n+                # Recommended system\n+                'recommended': {\n+                    'system_size': system_size_recommended,\n+\n+                    'panel_quantity': panels_needed,\n+                    'inverter_brand': inverter_rec.brand,\n+                    'inverter_price_rec': inverter_price_rec,\n+                    'frame_cost': frame_cost_rec,\n+                    'installation_cost': installation_rec,\n+                    'total_cost': total_cost_recommended,\n+                    'cabling_cost': 50000,\n+                    'electrical_and_mechanical_cost': 50000\n+                },\n+                # Smaller system\n+                'smaller': {\n+                    'system_size': system_size_smaller,\n+                    'panel_quantity': math.ceil(system_size_smaller * 1000 / panel_power),\n+                    'inverter_brand': inverter_small.brand,\n+                    'frame_cost': frame_cost_small,\n+                    'installation_cost': installation_small,\n+                    'total_cost': total_cost_smaller,\n+                    'inverter_price_small': inverter_price_small,\n+                    'cabling_cost': 50000,\n+                    'electrical_and_mechanical_cost': 50000\n+                },\n+                # Larger system\n+                'larger': {\n+                    'system_size': system_size_larger,\n+                    'panel_quantity': math.ceil(system_size_larger * 1000 / panel_power),\n+                    'inverter_brand': inverter_large.brand,\n+                    'frame_cost': frame_cost_large,\n+                    'installation_cost': installation_large,\n+                    'total_cost': total_cost_larger,\n+                    'inverter_price_large': inverter_price_large,\n+                    'cabling_cost': 50000,\n+                    'electrical_and_mechanical_cost': 50000\n+                }\n+            }\n+            \n+            return JsonResponse(response_data)\n+\n+        except Exception as e:\n+            return render(request, 'index.html', {'error_message': str(e)})\n+\n+    return redirect(reverse('your_form_page_name'))\n+\n+class GenerateInvoiceForSystem(APIView):\n+    def get(self, request, *args, **kwargs):\n+        try:\n+            # Extract system_size from the kwargs\n+            system_size = int(kwargs.get('system_size', 0))\n+            if not system_size:\n+                return Response({'error': 'No system size provided'}, status=status.HTTP_400_BAD_REQUEST)\n+            \n+            # The rest of your logic remains the same\n+            panel = Panel.objects.get(default_choice=True)\n+            panel_power = panel.power\n+            panel_price = panel.price\n+            panel_brand = panel.brand\n+            panels_needed = math.ceil((system_size * 1000) / panel_power)\n+            inverters = Inverter.objects.filter(power__gte=system_size).order_by('power')\n+            if inverters.exists():\n+                inverter = inverters.first()\n+                inverter_price = inverter.price\n+                inverter_brand = inverter.brand\n+            else:\n+                # Handle the case when no inverter is available with the required power\n+                inverter_price = 0\n+           # variableCosts queries with validation\n+            net_metering_record = variableCosts.objects.filter(cost_name='Net Metering').first()\n+            if not net_metering_record:\n+                return Response({'error': 'Net Metering cost is missing in the database'}, status=status.HTTP_400_BAD_REQUEST)\n+            net_metering = net_metering_record.cost\n+\n+            installation_cost_record = variableCosts.objects.filter(cost_name='Installation Cost per Watt').first()\n+            if not installation_cost_record:\n+                return Response({'error': 'Installation Cost per Watt is missing in the database'}, status=status.HTTP_400_BAD_REQUEST)\n+            installation_cost_per_watt = installation_cost_record.cost\n+            total_installation_cost = installation_cost_per_watt * system_size * 1000\n+\n+            frame_cost_record = variableCosts.objects.filter(cost_name='Frame Cost per Watt').first()\n+            if not frame_cost_record:\n+                return Response({'error': 'Frame Cost per Watt is missing in the database'}, status=status.HTTP_400_BAD_REQUEST)\n+            frame_cost_per_watt = frame_cost_record.cost\n+            total_frame_cost = frame_cost_per_watt * system_size * 1000\n+\n+            labor_cost_record = variableCosts.objects.filter(cost_name='Labor Cost').first()\n+            if not labor_cost_record:\n+                return Response({'error': 'Labor Cost is missing in the database'}, status=status.HTTP_400_BAD_REQUEST)\n+            labor_cost = labor_cost_record.cost\n+            total_labor_cost = labor_cost * system_size * 1000\n+\n+            # BracketCosts queries with validation\n+            DC_Cable_Costs = BracketCosts.objects.filter(Type='DC Cables').order_by('SystemRange')\n+            print(DC_Cable_Costs)\n+            selected_DC_Cable_Cost = None\n+            for cost in DC_Cable_Costs:\n+                print(cost.SystemRange)\n+                print(system_size)\n+                if cost.SystemRange <= system_size:\n+                    selected_DC_Cable_Cost = cost\n+                    print(selected_DC_Cable_Cost, \"Has been selected\")\n+                else:\n+                    break\n+            if not selected_DC_Cable_Cost:\n+                return Response({'error': 'DC Cable cost is missing or not suitable for the system size'}, status=status.HTTP_400_BAD_REQUEST)\n+\n+            AC_Cable_Costs = BracketCosts.objects.filter(Type='AC Cables').order_by('SystemRange')\n+            selected_AC_Cable_Cost = None\n+            for cost in AC_Cable_Costs:\n+                if cost.SystemRange <= system_size:\n+                    selected_AC_Cable_Cost = cost\n+                else:\n+                    break\n+            if not selected_AC_Cable_Cost:\n+                return Response({'error': 'AC Cable cost is missing or not suitable for the system size'}, status=status.HTTP_400_BAD_REQUEST)\n+\n+            Accessories_Costs = BracketCosts.objects.filter(Type='Accessories').order_by('SystemRange')\n+            selected_Accessories_Cost = None\n+            for cost in Accessories_Costs:\n+                if cost.SystemRange <= system_size:\n+                    selected_Accessories_Cost = cost\n+                else:\n+                    break\n+            if not selected_Accessories_Cost:\n+                return Response({'error': 'Accessories cost is missing or not suitable for the system size'}, status=status.HTTP_400_BAD_REQUEST)\n+\n+            \n+            total_cost = (panels_needed * panel_price) + inverter_price + net_metering + total_installation_cost + total_frame_cost + selected_DC_Cable_Cost.cost + selected_AC_Cable_Cost.cost + selected_Accessories_Cost.cost + total_labor_cost\n+            # Your logic to generate invoice based on input_string\n+            invoice_data = {\n+                'panel_price': panel_price,\n+                'panel_brand': panel_brand,\n+                'panel_power': panel_power,\n+                'panels_needed': panels_needed,\n+                'inverter_brand': inverter_brand,\n+                'inverter_price': inverter_price,\n+                'net_metering': net_metering,\n+                'installation_cost': total_installation_cost,\n+                'frame_cost': total_frame_cost,\n+                'dc_cable_cost': selected_DC_Cable_Cost.cost,\n+                'ac_cable_cost': selected_AC_Cable_Cost.cost,\n+                'accessories_cost': selected_Accessories_Cost.cost,\n+                'labor_cost': total_labor_cost,\n+                'total_cost': total_cost,\n+                'invoice': 'Generated invoice data here'  # Replace with actual invoice generation logic\n+            }\n+            \n+            return Response(invoice_data, status=status.HTTP_200_OK)\n+        except Exception as e:\n+            return Response({'error': str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n+\n+\n+#@user_passes_test(lambda u: u.is_staff)\n+def control_panel(request):\n+    return render(request, 'solar/control_panel.html')\n+\n+#@user_passes_test(lambda u: u.is_staff)\n+def panels(request):\n+    if request.method == 'GET':\n+        panels = Panel.objects.all().values()\n+        return JsonResponse(list(panels), safe=False)\n+    elif request.method == 'POST':\n+        data = json.loads(request.body)\n+        panel = Panel.objects.create(\n+            brand=data['brand'],\n+            price=data['price'],\n+            power=data['power'],\n+        )\n+        return JsonResponse({'message': 'Panel added successfully!'})\n+    \n+def set_default_panel(request, panel_id):\n+    # Set all default_choice fields to False\n+    Panel.objects.update(default_choice=False)\n+\n+    # Set the selected panel's default_choice to True\n+    try:\n+        panel = Panel.objects.get(id=panel_id)\n+        panel.default_choice = True\n+        panel.save()\n+        return JsonResponse({'success': True})\n+    except Panel.DoesNotExist:\n+        return JsonResponse({'success': False, 'error': 'Panel not found'}, status=404)\n+\n+#@user_passes_test(lambda u: u.is_staff)\n+def inverters(request):\n+    if request.method == 'GET':\n+        inverters = Inverter.objects.all().values()\n+        return JsonResponse(list(inverters), safe=False)\n+    elif request.method == 'POST':\n+        data = json.loads(request.body)\n+        inverter = Inverter.objects.create(\n+            brand=data['brand'],\n+            price=data['price'],\n+            power=data['power'],\n+            availability=data['availability']\n+        )\n+        return JsonResponse({'message': 'Inverter added successfully!'})\n+\n+#@user_passes_test(lambda u: u.is_staff)\n+def customers(request):\n+    customers = PotentialCustomers.objects.all().values()\n+    return JsonResponse(list(customers), safe=False)\n+\n+@csrf_exempt\n+#@user_passes_test(lambda u: u.is_staff)\n+def panel_list(request):\n+    if request.method == 'GET':\n+        panels = Panel.objects.all().values()\n+        return JsonResponse(list(panels), safe=False)\n+    elif request.method == 'POST':\n+        data = json.loads(request.body)\n+        panel = Panel.objects.create(\n+            brand=data['brand'],\n+            price=data['price'],\n+            power=data['power'],\n+            availability=data['availability']\n+        )\n+        return JsonResponse({\"id\": panel.id}, status=201)\n+\n+@csrf_exempt\n+#@user_passes_test(lambda u: u.is_staff)\n+def panel_detail(request, id):\n+    panel = get_object_or_404(Panel, id=id)\n+    if request.method == 'PUT':\n+        data = json.loads(request.body)\n+        panel.brand = data['brand']\n+        panel.price = data['price']\n+        panel.power = data['power']\n+        panel.availability = data['availability']\n+        panel.save()\n+        return JsonResponse({\"id\": panel.id}, status=200)\n+    elif request.method == 'DELETE':\n+        panel.delete()\n+        return JsonResponse({\"id\": id}, status=200)\n+\n+@csrf_exempt\n+#@user_passes_test(lambda u: u.is_staff)\n+def inverter_list(request):\n+    if request.method == 'GET':\n+        inverters = Inverter.objects.all().values()\n+        return JsonResponse(list(inverters), safe=False)\n+    elif request.method == 'POST':\n+        data = json.loads(request.body)\n+        inverter = Inverter.objects.create(\n+            brand=data['brand'],\n+            price=data['price'],\n+            power=data['power'],\n+            availability=data['availability']\n+        )\n+        return JsonResponse({\"id\": inverter.id}, status=201)\n+\n+@csrf_exempt\n+#@user_passes_test(lambda u: u.is_staff)\n+def inverter_detail(request, id):\n+    inverter = get_object_or_404(Inverter, id=id)\n+    if request.method == 'PUT':\n+        data = json.loads(request.body)\n+        inverter.brand = data['brand']\n+        inverter.price = data['price']\n+        inverter.power = data['power']\n+        inverter.availability = data['availability']\n+        inverter.save()\n+        return JsonResponse({\"id\": inverter.id}, status=200)\n+    elif request.method == 'DELETE':\n+        inverter.delete()\n+        return JsonResponse({\"id\": id}, status=200)\n+\n+@csrf_exempt\n+#@user_passes_test(lambda u: u.is_staff)\n+def set_prices(request):\n+    if request.method == 'POST':\n+        data = json.loads(request.body)\n+        variableCosts.objects.update_or_create(\n+            cost_name='Frame Cost per Watt', defaults={'cost': data['pricePerWatt']}\n+        )\n+        variableCosts.objects.update_or_create(\n+            cost_name='Installation Cost per Watt', defaults={'cost': data['installationCost']}\n+        )\n+        variableCosts.objects.update_or_create(\n+            cost_name='Net Metering', defaults={'cost': data['netMetering']}\n+        )\n+        return JsonResponse({\"status\": \"success\"}, status=200)\n+\n+@csrf_exempt\n+#@user_passes_test(lambda u: u.is_staff)\n+def customer_list(request):\n+    if request.method == 'GET':\n+        customers = PotentialCustomers.objects.all().values()\n+        return JsonResponse(list(customers), safe=False)\n+\n+@csrf_exempt\n+#@user_passes_test(lambda u: u.is_staff)\n+def get_prices(request):\n+    if request.method == 'GET':\n+        frame_cost = variableCosts.objects.filter(cost_name='Frame Cost per Watt').first()\n+        installation_cost = variableCosts.objects.filter(cost_name='Installation Cost per Watt').first()\n+        net_metering = variableCosts.objects.filter(cost_name='Net Metering').first()\n+        print(net_metering.cost)\n+        response_data = {\n+            'frame_cost_per_watt': frame_cost.cost if frame_cost else '',\n+            'installation_cost_per_watt': installation_cost.cost if installation_cost else '',\n+            'net_metering': net_metering.cost if net_metering else ''\n+        }\n+        return JsonResponse(response_data, safe=False)\n"
                },
                {
                    "date": 1733402434353,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,525 +110,61 @@\n                 \"message\": str(e)\n             }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n \n \n-\n-class GetBillDataAPIView(APIView):\n-    def get(self, request, reference_number):\n+class BillAnalyzeAPIView(APIView):\n+    def post(self, request):\n+        reference_number = request.data.get(\"reference_number\")\n         if not reference_number:\n             return Response({\n-                \"status\": \"error\",\n-                \"message\": \"Reference number is required.\"\n+                \"success\": False,\n+                \"message\": \"Reference number is required\"\n             }, status=status.HTTP_400_BAD_REQUEST)\n \n-        status_result = verify_bill(reference_number)\n-        if not status_result['exists']:\n-            return Response({\n-                \"status\": \"error\",\n-                \"message\": \"Bill not found.\"\n-            }, status=status.HTTP_400_BAD_REQUEST)\n-\n-        url = status_result.get(\"source_url\")\n-        if not url:\n-            return Response({\n-                \"status\": \"error\",\n-                \"message\": \"Valid URL not found.\"\n-            }, status=status.HTTP_400_BAD_REQUEST)\n-\n-        full_url = f\"{url}?refno={reference_number}\"\n-\n         try:\n-            response = requests.get(full_url)\n-            response.raise_for_status()\n-            response.encoding = response.apparent_encoding  # Ensure proper encoding\n-        except requests.RequestException as e:\n-            return Response({\n-                \"status\": \"error\",\n-                \"message\": str(e)\n-            }, status=status.HTTP_400_BAD_REQUEST)\n+            # Get bill details\n+            status_result = verify_bill(reference_number)\n+            if not status_result['exists']:\n+                return Response({\n+                    \"success\": False,\n+                    \"message\": \"Bill not found\"\n+                }, status=status.HTTP_404_NOT_FOUND)\n \n-        soup = BeautifulSoup(response.text, 'html.parser')  # Use .text for decoded content\n-        html_content = soup.prettify()\n-\n-        # Optional: clean up escape sequences\n-        html_content = html_content.replace(\"\\r\", \"\").replace(\"\\n\", \"\")\n-        #print(html_content)\n-        if (status_result['source_url'] == \"https://bill.pitc.com.pk/mepcobill/industrial\"):\n-            json_data = parse_electricity_bill_industrial(html_content)\n-        else:\n-            json_data = parse_electricity_bill_general(html_content)\n-\n-        yearly_units = int(json_data['Total Yearly Units'])\n-        yearly_avg = yearly_units / 12\n-\n-        print(yearly_avg)\n-        system_size_kw = (yearly_avg / 30) / 4\n-        print(system_size_kw)\n-        system_size_recommended = math.ceil(system_size_kw * 1.5)\n-        system_size_smaller = math.ceil(system_size_kw * 1.3)\n-        system_size_larger = math.ceil(system_size_kw * 1.7)\n-        json_data['Recommended System Size'] = system_size_recommended\n-        json_data['Smaller System Size'] = system_size_smaller\n-        json_data['Larger System Size'] = system_size_larger  \n-        return Response({\n-            \"status\": \"success\",\n-            \"data\": json_data\n-        }, status=status.HTTP_200_OK)\n-    \n-def index(request):\n-    return render(request, 'solar/index.html')\n-\n-def quotation(request):\n-    return render(request, 'solar/quotation.html')\n-\n-#DEPRECATED\n-def generate_invoice_view(request):\n-    if request.method == 'POST':\n-        reference_number = request.POST.get('reference_number')\n-        phone_number = request.POST.get('phone_number')\n-        address = request.POST.get('address')\n-        \n-        try:\n-            invoice_data = bill_reader(reference_number)\n-            name = invoice_data['Name']\n-            #panel_power = 545  # 545 watts per panel\n-            panel = Panel.objects.get(default_choice=True)\n-            panel_power = panel.power\n-            panel_price = panel.price\n-            panel_brand = panel.brand\n-            potential_customer = PotentialCustomers.objects.create(\n-                name=name, address=address, phone=phone_number, reference_number=reference_number)\n-            potential_customer.save()\n-\n-            # Calculate recommended system size based on the customer's consumption\n-            daily_energy = (panel_power * 9) / 1000  # 9 hours of sunlight\n-            annual_energy = daily_energy * 365\n-            total_power_of_1_panel = float(annual_energy) * 0.8  # 80% efficiency per panel\n-            panels_needed = math.ceil((int(invoice_data['Max Units']) * 12) / total_power_of_1_panel)\n-            system_size_recommended = math.ceil((panels_needed * panel_power) / 1000)\n-\n-            # Calculate sizes for smaller and larger systems\n-            system_size_smaller = max(system_size_recommended - 2, 1)  # Ensure at least 1kW\n-            system_size_larger = system_size_recommended + 2\n-\n-            # Pricing calculations for all three systems\n-            # Find the inverter with the same power or closest to the system size\n-            inverters_rec = Inverter.objects.filter(power__gte=system_size_recommended).order_by('power')\n-            if inverters_rec.exists():\n-                inverter_rec = inverters_rec.first()\n-                print(inverter_rec)\n-                inverter_price_rec = inverter_rec.price\n-            else:\n-                # Handle the case when no inverter is available with the required power\n-                inverter_price_rec = 0\n-            inverters_small = Inverter.objects.filter(power__gte=system_size_smaller).order_by('power')\n-            if inverters_small.exists():\n-                inverter_small = inverters_small.first()\n-                print(inverter_small)\n-                inverter_price_small = inverter_small.price\n-            else:\n-                # Handle the case when no inverter is available with the required power\n-                inverter_price_small = 0\n-            inverters_large = Inverter.objects.filter(power__gte=system_size_larger).order_by('power')\n-            if inverters_large.exists():\n-                inverter_large = inverters_large.first()\n-                print(inverter_large)\n-                inverter_price_large = inverter_large.price\n-            else:\n-                # Handle the case when no inverter is available with the required power\n-                inverter_price_large = 0\n-            net_metering = variableCosts.objects.filter(cost_name='Net Metering').first().cost\n-            installation_cost_per_watt = variableCosts.objects.filter(cost_name='Installation Cost per Watt').first().cost\n-            frame_cost_per_watt = variableCosts.objects.filter(cost_name='Frame Cost per Watt').first().cost\n-            \n-            cabling_cost = 50000\n-            electrical_and_mechanical_cost = 50000\n-\n-            # Total cost calculation for each system\n-            def calculate_total_cost(system_size, inverter_price, installation_cost, frame_cost):\n-                print(system_size, inverter_price, installation_cost, frame_cost)\n-                print(system_size * panel_price * panel_power)  \n-                return (system_size * panel_price * panel_power) + inverter_price + net_metering + installation_cost + frame_cost + cabling_cost + electrical_and_mechanical_cost\n-            \n-            installation_rec = system_size_recommended * installation_cost_per_watt * 1000\n-            installation_small = system_size_smaller * installation_cost_per_watt * 1000\n-            installation_large = system_size_larger * installation_cost_per_watt * 1000\n-            frame_cost_rec = system_size_recommended * frame_cost_per_watt * 1000\n-            frame_cost_small = system_size_smaller * frame_cost_per_watt * 1000\n-            frame_cost_large = system_size_larger * frame_cost_per_watt * 1000\n-            total_cost_recommended = calculate_total_cost(panels_needed, inverter_price_rec, installation_rec, frame_cost_rec)\n-            total_cost_smaller = calculate_total_cost(math.ceil(system_size_smaller * 1000 / panel_power), inverter_price_small, installation_small, frame_cost_small)\n-            total_cost_larger = calculate_total_cost(math.ceil(system_size_larger * 1000 / panel_power), inverter_price_large, installation_large, frame_cost_large)\n-\n-            # Prepare response data for all three systems\n-            response_data = {\n-                'name': name,\n-                'address': address,\n-                'phone': phone_number,\n-                'reference_number': reference_number,\n-                'electricity_bill': invoice_data['Payable Within Due Date'],\n-                'monthly_units': invoice_data['Units Consumed'],\n-                'yearly_units': invoice_data['Total Yearly Units'],\n-                'panel_price': panel_price,\n-                'panel_brand': panel_brand,\n-                'panel_power': panel_power,\n-                'net_metering': net_metering,               \n-                # Recommended system\n-                'recommended': {\n-                    'system_size': system_size_recommended,\n-\n-                    'panel_quantity': panels_needed,\n-                    'inverter_brand': inverter_rec.brand,\n-                    'inverter_price_rec': inverter_price_rec,\n-                    'frame_cost': frame_cost_rec,\n-                    'installation_cost': installation_rec,\n-                    'total_cost': total_cost_recommended,\n-                    'cabling_cost': 50000,\n-                    'electrical_and_mechanical_cost': 50000\n+            # Mock analysis data (replace with actual calculations)\n+            analysis_data = {\n+                \"consumption\": {\n+                    \"daily\": 25,\n+                    \"monthly\": 750,\n+                    \"yearly\": 9000,\n+                    \"peak\": 35\n                 },\n-                # Smaller system\n-                'smaller': {\n-                    'system_size': system_size_smaller,\n-                    'panel_quantity': math.ceil(system_size_smaller * 1000 / panel_power),\n-                    'inverter_brand': inverter_small.brand,\n-                    'frame_cost': frame_cost_small,\n-                    'installation_cost': installation_small,\n-                    'total_cost': total_cost_smaller,\n-                    'inverter_price_small': inverter_price_small,\n-                    'cabling_cost': 50000,\n-                    'electrical_and_mechanical_cost': 50000\n+                \"systemSize\": {\n+                    \"recommended\": 5,\n+                    \"range\": {\n+                        \"min\": 4,\n+                        \"max\": 6\n+                    }\n                 },\n-                # Larger system\n-                'larger': {\n-                    'system_size': system_size_larger,\n-                    'panel_quantity': math.ceil(system_size_larger * 1000 / panel_power),\n-                    'inverter_brand': inverter_large.brand,\n-                    'frame_cost': frame_cost_large,\n-                    'installation_cost': installation_large,\n-                    'total_cost': total_cost_larger,\n-                    'inverter_price_large': inverter_price_large,\n-                    'cabling_cost': 50000,\n-                    'electrical_and_mechanical_cost': 50000\n+                \"savings\": {\n+                    \"monthly\": 15000,\n+                    \"yearly\": 180000,\n+                    \"paybackPeriod\": 4.5\n+                },\n+                \"environmental\": {\n+                    \"co2Reduction\": 5.2,\n+                    \"treesEquivalent\": 80\n                 }\n             }\n-            \n-            return JsonResponse(response_data)\n \n-        except Exception as e:\n-            return render(request, 'index.html', {'error_message': str(e)})\n-\n-    return redirect(reverse('your_form_page_name'))\n-\n-class GenerateInvoiceForSystem(APIView):\n-    def get(self, request, *args, **kwargs):\n-        try:\n-            # Extract system_size from the kwargs\n-            system_size = int(kwargs.get('system_size', 0))\n-            if not system_size:\n-                return Response({'error': 'No system size provided'}, status=status.HTTP_400_BAD_REQUEST)\n-            \n-            # The rest of your logic remains the same\n-            panel = Panel.objects.get(default_choice=True)\n-            panel_power = panel.power\n-            panel_price = panel.price\n-            panel_brand = panel.brand\n-            panels_needed = math.ceil((system_size * 1000) / panel_power)\n-            inverters = Inverter.objects.filter(power__gte=system_size).order_by('power')\n-            if inverters.exists():\n-                inverter = inverters.first()\n-                inverter_price = inverter.price\n-                inverter_brand = inverter.brand\n-            else:\n-                # Handle the case when no inverter is available with the required power\n-                inverter_price = 0\n-           # variableCosts queries with validation\n-            net_metering_record = variableCosts.objects.filter(cost_name='Net Metering').first()\n-            if not net_metering_record:\n-                return Response({'error': 'Net Metering cost is missing in the database'}, status=status.HTTP_400_BAD_REQUEST)\n-            net_metering = net_metering_record.cost\n-\n-            installation_cost_record = variableCosts.objects.filter(cost_name='Installation Cost per Watt').first()\n-            if not installation_cost_record:\n-                return Response({'error': 'Installation Cost per Watt is missing in the database'}, status=status.HTTP_400_BAD_REQUEST)\n-            installation_cost_per_watt = installation_cost_record.cost\n-            total_installation_cost = installation_cost_per_watt * system_size * 1000\n-\n-            frame_cost_record = variableCosts.objects.filter(cost_name='Frame Cost per Watt').first()\n-            if not frame_cost_record:\n-                return Response({'error': 'Frame Cost per Watt is missing in the database'}, status=status.HTTP_400_BAD_REQUEST)\n-            frame_cost_per_watt = frame_cost_record.cost\n-            total_frame_cost = frame_cost_per_watt * system_size * 1000\n-\n-            labor_cost_record = variableCosts.objects.filter(cost_name='Labor Cost').first()\n-            if not labor_cost_record:\n-                return Response({'error': 'Labor Cost is missing in the database'}, status=status.HTTP_400_BAD_REQUEST)\n-            labor_cost = labor_cost_record.cost\n-            total_labor_cost = labor_cost * system_size * 1000\n-\n-            # BracketCosts queries with validation\n-            DC_Cable_Costs = BracketCosts.objects.filter(Type='DC Cables').order_by('SystemRange')\n-            print(DC_Cable_Costs)\n-            selected_DC_Cable_Cost = None\n-            for cost in DC_Cable_Costs:\n-                print(cost.SystemRange)\n-                print(system_size)\n-                if cost.SystemRange <= system_size:\n-                    selected_DC_Cable_Cost = cost\n-                    print(selected_DC_Cable_Cost, \"Has been selected\")\n-                else:\n-                    break\n-            if not selected_DC_Cable_Cost:\n-                return Response({'error': 'DC Cable cost is missing or not suitable for the system size'}, status=status.HTTP_400_BAD_REQUEST)\n-\n-            AC_Cable_Costs = BracketCosts.objects.filter(Type='AC Cables').order_by('SystemRange')\n-            selected_AC_Cable_Cost = None\n-            for cost in AC_Cable_Costs:\n-                if cost.SystemRange <= system_size:\n-                    selected_AC_Cable_Cost = cost\n-                else:\n-                    break\n-            if not selected_AC_Cable_Cost:\n-                return Response({'error': 'AC Cable cost is missing or not suitable for the system size'}, status=status.HTTP_400_BAD_REQUEST)\n-\n-            Accessories_Costs = BracketCosts.objects.filter(Type='Accessories').order_by('SystemRange')\n-            selected_Accessories_Cost = None\n-            for cost in Accessories_Costs:\n-                if cost.SystemRange <= system_size:\n-                    selected_Accessories_Cost = cost\n-                else:\n-                    break\n-            if not selected_Accessories_Cost:\n-                return Response({'error': 'Accessories cost is missing or not suitable for the system size'}, status=status.HTTP_400_BAD_REQUEST)\n-\n-            \n-            total_cost = (panels_needed * panel_price) + inverter_price + net_metering + total_installation_cost + total_frame_cost + selected_DC_Cable_Cost.cost + selected_AC_Cable_Cost.cost + selected_Accessories_Cost.cost + total_labor_cost\n-            # Your logic to generate invoice based on input_string\n-            invoice_data = {\n-                'panel_price': panel_price,\n-                'panel_brand': panel_brand,\n-                'panel_power': panel_power,\n-                'panels_needed': panels_needed,\n-                'inverter_brand': inverter_brand,\n-                'inverter_price': inverter_price,\n-                'net_metering': net_metering,\n-                'installation_cost': total_installation_cost,\n-                'frame_cost': total_frame_cost,\n-                'dc_cable_cost': selected_DC_Cable_Cost.cost,\n-                'ac_cable_cost': selected_AC_Cable_Cost.cost,\n-                'accessories_cost': selected_Accessories_Cost.cost,\n-                'labor_cost': total_labor_cost,\n-                'total_cost': total_cost,\n-                'invoice': 'Generated invoice data here'  # Replace with actual invoice generation logic\n-            }\n-            \n-            return Response(invoice_data, status=status.HTTP_200_OK)\n-        except Exception as e:\n-            return Response({'error': str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n-\n-\n-#@user_passes_test(lambda u: u.is_staff)\n-def control_panel(request):\n-    return render(request, 'solar/control_panel.html')\n-\n-#@user_passes_test(lambda u: u.is_staff)\n-def panels(request):\n-    if request.method == 'GET':\n-        panels = Panel.objects.all().values()\n-        return JsonResponse(list(panels), safe=False)\n-    elif request.method == 'POST':\n-        data = json.loads(request.body)\n-        panel = Panel.objects.create(\n-            brand=data['brand'],\n-            price=data['price'],\n-            power=data['power'],\n-        )\n-        return JsonResponse({'message': 'Panel added successfully!'})\n-    \n-def set_default_panel(request, panel_id):\n-    # Set all default_choice fields to False\n-    Panel.objects.update(default_choice=False)\n-\n-    # Set the selected panel's default_choice to True\n-    try:\n-        panel = Panel.objects.get(id=panel_id)\n-        panel.default_choice = True\n-        panel.save()\n-        return JsonResponse({'success': True})\n-    except Panel.DoesNotExist:\n-        return JsonResponse({'success': False, 'error': 'Panel not found'}, status=404)\n-\n-#@user_passes_test(lambda u: u.is_staff)\n-def inverters(request):\n-    if request.method == 'GET':\n-        inverters = Inverter.objects.all().values()\n-        return JsonResponse(list(inverters), safe=False)\n-    elif request.method == 'POST':\n-        data = json.loads(request.body)\n-        inverter = Inverter.objects.create(\n-            brand=data['brand'],\n-            price=data['price'],\n-            power=data['power'],\n-            availability=data['availability']\n-        )\n-        return JsonResponse({'message': 'Inverter added successfully!'})\n-\n-#@user_passes_test(lambda u: u.is_staff)\n-def customers(request):\n-    customers = PotentialCustomers.objects.all().values()\n-    return JsonResponse(list(customers), safe=False)\n-\n-@csrf_exempt\n-#@user_passes_test(lambda u: u.is_staff)\n-def panel_list(request):\n-    if request.method == 'GET':\n-        panels = Panel.objects.all().values()\n-        return JsonResponse(list(panels), safe=False)\n-    elif request.method == 'POST':\n-        data = json.loads(request.body)\n-        panel = Panel.objects.create(\n-            brand=data['brand'],\n-            price=data['price'],\n-            power=data['power'],\n-            availability=data['availability']\n-        )\n-        return JsonResponse({\"id\": panel.id}, status=201)\n-\n-@csrf_exempt\n-#@user_passes_test(lambda u: u.is_staff)\n-def panel_detail(request, id):\n-    panel = get_object_or_404(Panel, id=id)\n-    if request.method == 'PUT':\n-        data = json.loads(request.body)\n-        panel.brand = data['brand']\n-        panel.price = data['price']\n-        panel.power = data['power']\n-        panel.availability = data['availability']\n-        panel.save()\n-        return JsonResponse({\"id\": panel.id}, status=200)\n-    elif request.method == 'DELETE':\n-        panel.delete()\n-        return JsonResponse({\"id\": id}, status=200)\n-\n-@csrf_exempt\n-#@user_passes_test(lambda u: u.is_staff)\n-def inverter_list(request):\n-    if request.method == 'GET':\n-        inverters = Inverter.objects.all().values()\n-        return JsonResponse(list(inverters), safe=False)\n-    elif request.method == 'POST':\n-        data = json.loads(request.body)\n-        inverter = Inverter.objects.create(\n-            brand=data['brand'],\n-            price=data['price'],\n-            power=data['power'],\n-            availability=data['availability']\n-        )\n-        return JsonResponse({\"id\": inverter.id}, status=201)\n-\n-@csrf_exempt\n-#@user_passes_test(lambda u: u.is_staff)\n-def inverter_detail(request, id):\n-    inverter = get_object_or_404(Inverter, id=id)\n-    if request.method == 'PUT':\n-        data = json.loads(request.body)\n-        inverter.brand = data['brand']\n-        inverter.price = data['price']\n-        inverter.power = data['power']\n-        inverter.availability = data['availability']\n-        inverter.save()\n-        return JsonResponse({\"id\": inverter.id}, status=200)\n-    elif request.method == 'DELETE':\n-        inverter.delete()\n-        return JsonResponse({\"id\": id}, status=200)\n-\n-@csrf_exempt\n-#@user_passes_test(lambda u: u.is_staff)\n-def set_prices(request):\n-    if request.method == 'POST':\n-        data = json.loads(request.body)\n-        variableCosts.objects.update_or_create(\n-            cost_name='Frame Cost per Watt', defaults={'cost': data['pricePerWatt']}\n-        )\n-        variableCosts.objects.update_or_create(\n-            cost_name='Installation Cost per Watt', defaults={'cost': data['installationCost']}\n-        )\n-        variableCosts.objects.update_or_create(\n-            cost_name='Net Metering', defaults={'cost': data['netMetering']}\n-        )\n-        return JsonResponse({\"status\": \"success\"}, status=200)\n-\n-@csrf_exempt\n-#@user_passes_test(lambda u: u.is_staff)\n-def customer_list(request):\n-    if request.method == 'GET':\n-        customers = PotentialCustomers.objects.all().values()\n-        return JsonResponse(list(customers), safe=False)\n-\n-@csrf_exempt\n-#@user_passes_test(lambda u: u.is_staff)\n-def get_prices(request):\n-    if request.method == 'GET':\n-        frame_cost = variableCosts.objects.filter(cost_name='Frame Cost per Watt').first()\n-        installation_cost = variableCosts.objects.filter(cost_name='Installation Cost per Watt').first()\n-        net_metering = variableCosts.objects.filter(cost_name='Net Metering').first()\n-        print(net_metering.cost)\n-        response_data = {\n-            'frame_cost_per_watt': frame_cost.cost if frame_cost else '',\n-            'installation_cost_per_watt': installation_cost.cost if installation_cost else '',\n-            'net_metering': net_metering.cost if net_metering else ''\n-        }\n-        return JsonResponse(response_data, safe=False)\n-from django.shortcuts import render, redirect\n-from django.urls import reverse\n-from solar.invoice_generator.Bill_Reader import bill_reader\n-from solar.invoice_generator.invoicemaker import generate_invoice\n-from solar.invoice_generator.bill_verify import verify_bill\n-from solar.invoice_generator.bill_parser_ind import parse_electricity_bill_industrial\n-from solar.invoice_generator.bill_parser_gen import parse_electricity_bill_general\n-from solar.models import Panel, Inverter, PotentialCustomers, variableCosts, BracketCosts\n-import math\n-from django.http import JsonResponse\n-from django.contrib.auth.decorators import user_passes_test\n-from django.views.decorators.csrf import csrf_exempt\n-from django.shortcuts import get_object_or_404\n-from rest_framework.views import APIView\n-from rest_framework.response import Response\n-from rest_framework import status\n-import json\n-import requests\n-from bs4 import BeautifulSoup\n-\n-class BillValidateAPIView(APIView):\n-    def post(self, request):\n-        reference_number = request.data.get(\"reference_number\")\n-        if not reference_number:\n             return Response({\n-                \"success\": False,\n-                \"data\": {\n-                    \"isValid\": False,\n-                    \"message\": \"Reference number is required\"\n-                }\n-            }, status=status.HTTP_400_BAD_REQUEST)\n-\n-        try:\n-            # Verify bill using existing function\n-            result = verify_bill(reference_number)\n-            \n-            return Response({\n                 \"success\": True,\n-                \"data\": {\n-                    \"isValid\": result['exists'],\n-                    \"referenceNumber\": reference_number,\n-                    \"message\": \"Bill validation successful\"\n-                }\n+                \"data\": analysis_data\n             }, status=status.HTTP_200_OK)\n+\n         except Exception as e:\n             return Response({\n                 \"success\": False,\n-                \"data\": {\n-                    \"isValid\": False,\n-                    \"message\": str(e)\n-                }\n+                \"message\": str(e)\n             }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n \n class GetBillDataAPIView(APIView):\n     def get(self, request, reference_number):\n"
                },
                {
                    "date": 1733402610415,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -630,4 +630,168 @@\n             'installation_cost_per_watt': installation_cost.cost if installation_cost else '',\n             'net_metering': net_metering.cost if net_metering else ''\n         }\n         return JsonResponse(response_data, safe=False)\n+\n+\n+\n+\n+# ***************************************************quote api view***************************************************\n+class QuoteGenerateAPIView(APIView):\n+    def post(self, request):\n+        try:\n+            bill_data = request.data\n+            if not bill_data:\n+                return Response({\n+                    \"success\": False,\n+                    \"message\": \"Bill data is required\"\n+                }, status=status.HTTP_400_BAD_REQUEST)\n+\n+            # Get system components\n+            panel = Panel.objects.get(default_choice=True)\n+            yearly_units = float(bill_data.get('Total Yearly Units', 0))\n+            daily_avg = yearly_units / 365\n+            system_size_kw = daily_avg / 4  # Assuming 4 kWh per kW per day\n+            system_size = math.ceil(system_size_kw * 1.5)  # Recommended size\n+\n+            # Calculate panels needed\n+            panels_needed = math.ceil((system_size * 1000) / panel.power)\n+\n+            # Get appropriate inverter\n+            inverter = Inverter.objects.filter(power__gte=system_size).order_by('power').first()\n+            if not inverter:\n+                return Response({\n+                    \"success\": False,\n+                    \"message\": \"No suitable inverter found\"\n+                }, status=status.HTTP_400_BAD_REQUEST)\n+\n+            # Get variable costs\n+            net_metering = variableCosts.objects.get(cost_name='Net Metering').cost\n+            installation_cost = variableCosts.objects.get(cost_name='Installation Cost per Watt').cost\n+            frame_cost = variableCosts.objects.get(cost_name='Frame Cost per Watt').cost\n+            labor_cost = variableCosts.objects.get(cost_name='Labor Cost').cost\n+\n+            # Calculate total installations costs\n+            total_installation_cost = installation_cost * system_size * 1000\n+            total_frame_cost = frame_cost * system_size * 1000\n+            total_labor_cost = labor_cost * system_size * 1000\n+\n+            # Get bracket costs based on system size\n+            dc_cable_cost = BracketCosts.objects.filter(\n+                Type='DC Cables', \n+                SystemRange__lte=system_size\n+            ).order_by('-SystemRange').first()\n+\n+            ac_cable_cost = BracketCosts.objects.filter(\n+                Type='AC Cables', \n+                SystemRange__lte=system_size\n+            ).order_by('-SystemRange').first()\n+\n+            accessories_cost = BracketCosts.objects.filter(\n+                Type='Accessories', \n+                SystemRange__lte=system_size\n+            ).order_by('-SystemRange').first()\n+\n+            # Calculate total cost\n+            panel_cost = panels_needed * panel.price\n+            total_cost = (\n+                panel_cost +\n+                inverter.price +\n+                net_metering +\n+                total_installation_cost +\n+                total_frame_cost +\n+                dc_cable_cost.cost +\n+                ac_cable_cost.cost +\n+                accessories_cost.cost +\n+                total_labor_cost\n+            )\n+\n+            # Calculate monthly production estimates\n+            daily_production = system_size * 4  # 4 kWh per kW per day average\n+            monthly_production = daily_production * 30\n+            yearly_production = daily_production * 365\n+\n+            # Prepare response matching frontend expectations\n+            quote_data = {\n+                \"systemDetails\": {\n+                    \"systemSize\": system_size,\n+                    \"panelCount\": panels_needed,\n+                    \"panelType\": panel.brand,\n+                    \"inverterType\": inverter.brand,\n+                    \"roofArea\": panels_needed * 2,  # Approximate area in square meters\n+                    \"installationTime\": \"3-5 days\",\n+                    \"warranty\": \"25 years\"\n+                },\n+                \"production\": {\n+                    \"daily\": daily_production,\n+                    \"monthly\": self.generate_monthly_production(monthly_production),\n+                    \"annual\": yearly_production,\n+                    \"peakHours\": 4.5,\n+                    \"performanceRatio\": 0.75\n+                },\n+                \"financial\": {\n+                    \"systemCost\": total_cost,\n+                    \"annualSavings\": yearly_production * 20,  # Assuming PKR 20 per unit\n+                    \"monthlySavings\": monthly_production * 20,\n+                    \"paybackPeriod\": 5.5,  # Approximate\n+                    \"roi\": 18.2,  # Approximate annual ROI\n+                    \"savingsTimeline\": self.generate_savings_timeline(total_cost, yearly_production * 20)\n+                },\n+                \"environmental\": {\n+                    \"co2Offset\": system_size * 1.2,  # Tons per year\n+                    \"treesEquivalent\": system_size * 20,\n+                    \"homesEquivalent\": math.floor(yearly_production / 12000),\n+                    \"carbonFootprintReduction\": system_size * 1000  # kg per year\n+                }\n+            }\n+\n+            return Response({\n+                \"success\": True,\n+                \"data\": quote_data\n+            }, status=status.HTTP_200_OK)\n+\n+        except Exception as e:\n+            return Response({\n+                \"success\": False,\n+                \"message\": str(e)\n+            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n+\n+    def generate_monthly_production(self, base_production):\n+        months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', \n+                'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n+        seasonal_factors = {\n+            'winter': 0.7,  # Nov-Feb\n+            'spring': 0.9,  # Mar-Apr\n+            'summer': 1.2,  # May-Aug\n+            'fall': 0.8     # Sep-Oct\n+        }\n+\n+        monthly_data = []\n+        for i, month in enumerate(months):\n+            if i < 2 or i == 11:\n+                factor = seasonal_factors['winter']\n+            elif i < 5:\n+                factor = seasonal_factors['spring']\n+            elif i < 8:\n+                factor = seasonal_factors['summer']\n+            else:\n+                factor = seasonal_factors['fall']\n+\n+            production = math.round(base_production * factor)\n+            consumption = math.round(base_production * 0.9)  # Estimated consumption\n+            monthly_data.append({\n+                \"month\": month,\n+                \"production\": production,\n+                \"consumption\": consumption\n+            })\n+\n+        return monthly_data\n+\n+    def generate_savings_timeline(self, system_cost, annual_savings):\n+        return [\n+            {\n+                \"year\": year + 1,\n+                \"annualSavings\": math.round(annual_savings * (1 + (year * 0.05))),\n+                \"cumulativeSavings\": math.round(annual_savings * (year + 1) * (1 + (year * 0.025)))\n+            }\n+            for year in range(25)\n+        ]\n"
                },
                {
                    "date": 1733402651607,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,851 @@\n+from django.shortcuts import render, redirect\n+from django.urls import reverse\n+from solar.invoice_generator.Bill_Reader import bill_reader\n+from solar.invoice_generator.invoicemaker import generate_invoice\n+from solar.invoice_generator.bill_verify import verify_bill\n+from solar.invoice_generator.bill_parser_ind import parse_electricity_bill_industrial\n+from solar.invoice_generator.bill_parser_gen import parse_electricity_bill_general\n+from solar.models import Panel, Inverter, PotentialCustomers, variableCosts, BracketCosts\n+import math\n+from django.http import JsonResponse\n+from django.contrib.auth.decorators import user_passes_test\n+from django.views.decorators.csrf import csrf_exempt\n+from django.shortcuts import get_object_or_404\n+from rest_framework.views import APIView\n+from rest_framework.response import Response\n+from rest_framework import status\n+import json\n+import requests\n+from bs4 import BeautifulSoup\n+\n+class BillValidateAPIView(APIView):\n+    def post(self, request):\n+        reference_number = request.data.get(\"reference_number\")\n+        if not reference_number:\n+            return Response({\n+                \"success\": False,\n+                \"data\": {\n+                    \"isValid\": False,\n+                    \"message\": \"Reference number is required\"\n+                }\n+            }, status=status.HTTP_400_BAD_REQUEST)\n+\n+        try:\n+            # Verify bill using existing function\n+            result = verify_bill(reference_number)\n+            \n+            return Response({\n+                \"success\": True,\n+                \"data\": {\n+                    \"isValid\": result['exists'],\n+                    \"referenceNumber\": reference_number,\n+                    \"message\": \"Bill validation successful\"\n+                }\n+            }, status=status.HTTP_200_OK)\n+        except Exception as e:\n+            return Response({\n+                \"success\": False,\n+                \"data\": {\n+                    \"isValid\": False,\n+                    \"message\": str(e)\n+                }\n+            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n+            \n+class BillDetailsAPIView(APIView):\n+    def get(self, request, reference_number=None):\n+        if not reference_number:\n+            return Response({\n+                \"success\": False,\n+                \"message\": \"Reference number is required\"\n+            }, status=status.HTTP_400_BAD_REQUEST)\n+\n+        try:\n+            # Get bill details using your existing functions\n+            status_result = verify_bill(reference_number)\n+            if not status_result['exists']:\n+                return Response({\n+                    \"success\": False,\n+                    \"message\": \"Bill not found\"\n+                }, status=status.HTTP_404_NOT_FOUND)\n+\n+            # Get HTML content from the bill URL\n+            url = f\"{status_result['source_url']}?refno={reference_number}\"\n+            response = requests.get(url)\n+            html_content = response.text\n+\n+            # Parse bill based on type\n+            if status_result['source_url'].endswith('industrial'):\n+                bill_data = parse_electricity_bill_industrial(html_content)\n+            else:\n+                bill_data = parse_electricity_bill_general(html_content)\n+\n+            # Calculate system sizes\n+            yearly_units = int(bill_data['Total Yearly Units'])\n+            daily_avg = yearly_units / 365\n+            system_size_kw = daily_avg / 4  # Assuming 4 kWh per kW per day\n+\n+            # Add calculated fields\n+            enhanced_data = {\n+                **bill_data,\n+                \"customerName\": bill_data.get(\"Name\", \"\"),\n+                \"unitsConsumed\": int(bill_data.get(\"Units Consumed\", 0)),\n+                \"dueDate\": bill_data.get(\"Due Date\", \"\"),\n+                \"issueDate\": bill_data.get(\"Issue Date\", \"\"),\n+                \"amount\": float(bill_data.get(\"Payable Within Due Date\", \"0\").replace(\"PKR \", \"\").replace(\",\", \"\")),\n+                \"systemSizing\": {\n+                    \"recommended\": math.ceil(system_size_kw * 1.5),\n+                    \"smaller\": math.ceil(system_size_kw * 1.3),\n+                    \"larger\": math.ceil(system_size_kw * 1.7)\n+                }\n+            }\n+\n+            return Response({\n+                \"success\": True,\n+                \"data\": enhanced_data\n+            }, status=status.HTTP_200_OK)\n+\n+        except Exception as e:\n+            return Response({\n+                \"success\": False,\n+                \"message\": str(e)\n+            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n+\n+\n+class BillAnalyzeAPIView(APIView):\n+    def post(self, request):\n+        reference_number = request.data.get(\"reference_number\")\n+        if not reference_number:\n+            return Response({\n+                \"success\": False,\n+                \"message\": \"Reference number is required\"\n+            }, status=status.HTTP_400_BAD_REQUEST)\n+\n+        try:\n+            # Get bill details\n+            status_result = verify_bill(reference_number)\n+            if not status_result['exists']:\n+                return Response({\n+                    \"success\": False,\n+                    \"message\": \"Bill not found\"\n+                }, status=status.HTTP_404_NOT_FOUND)\n+\n+            # Mock analysis data (replace with actual calculations)\n+            analysis_data = {\n+                \"consumption\": {\n+                    \"daily\": 25,\n+                    \"monthly\": 750,\n+                    \"yearly\": 9000,\n+                    \"peak\": 35\n+                },\n+                \"systemSize\": {\n+                    \"recommended\": 5,\n+                    \"range\": {\n+                        \"min\": 4,\n+                        \"max\": 6\n+                    }\n+                },\n+                \"savings\": {\n+                    \"monthly\": 15000,\n+                    \"yearly\": 180000,\n+                    \"paybackPeriod\": 4.5\n+                },\n+                \"environmental\": {\n+                    \"co2Reduction\": 5.2,\n+                    \"treesEquivalent\": 80\n+                }\n+            }\n+\n+            return Response({\n+                \"success\": True,\n+                \"data\": analysis_data\n+            }, status=status.HTTP_200_OK)\n+\n+        except Exception as e:\n+            return Response({\n+                \"success\": False,\n+                \"message\": str(e)\n+            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n+\n+class GetBillDataAPIView(APIView):\n+    def get(self, request, reference_number):\n+        if not reference_number:\n+            return Response({\n+                \"status\": \"error\",\n+                \"message\": \"Reference number is required.\"\n+            }, status=status.HTTP_400_BAD_REQUEST)\n+\n+        status_result = verify_bill(reference_number)\n+        if not status_result['exists']:\n+            return Response({\n+                \"status\": \"error\",\n+                \"message\": \"Bill not found.\"\n+            }, status=status.HTTP_400_BAD_REQUEST)\n+\n+        url = status_result.get(\"source_url\")\n+        if not url:\n+            return Response({\n+                \"status\": \"error\",\n+                \"message\": \"Valid URL not found.\"\n+            }, status=status.HTTP_400_BAD_REQUEST)\n+\n+        full_url = f\"{url}?refno={reference_number}\"\n+\n+        try:\n+            response = requests.get(full_url)\n+            response.raise_for_status()\n+            response.encoding = response.apparent_encoding  # Ensure proper encoding\n+        except requests.RequestException as e:\n+            return Response({\n+                \"status\": \"error\",\n+                \"message\": str(e)\n+            }, status=status.HTTP_400_BAD_REQUEST)\n+\n+        soup = BeautifulSoup(response.text, 'html.parser')  # Use .text for decoded content\n+        html_content = soup.prettify()\n+\n+        # Optional: clean up escape sequences\n+        html_content = html_content.replace(\"\\r\", \"\").replace(\"\\n\", \"\")\n+        #print(html_content)\n+        if (status_result['source_url'] == \"https://bill.pitc.com.pk/mepcobill/industrial\"):\n+            json_data = parse_electricity_bill_industrial(html_content)\n+        else:\n+            json_data = parse_electricity_bill_general(html_content)\n+\n+        yearly_units = int(json_data['Total Yearly Units'])\n+        yearly_avg = yearly_units / 12\n+\n+        print(yearly_avg)\n+        system_size_kw = (yearly_avg / 30) / 4\n+        print(system_size_kw)\n+        system_size_recommended = math.ceil(system_size_kw * 1.5)\n+        system_size_smaller = math.ceil(system_size_kw * 1.3)\n+        system_size_larger = math.ceil(system_size_kw * 1.7)\n+        json_data['Recommended System Size'] = system_size_recommended\n+        json_data['Smaller System Size'] = system_size_smaller\n+        json_data['Larger System Size'] = system_size_larger  \n+        return Response({\n+            \"status\": \"success\",\n+            \"data\": json_data\n+        }, status=status.HTTP_200_OK)\n+    \n+def index(request):\n+    return render(request, 'solar/index.html')\n+\n+def quotation(request):\n+    return render(request, 'solar/quotation.html')\n+\n+#DEPRECATED\n+def generate_invoice_view(request):\n+    if request.method == 'POST':\n+        reference_number = request.POST.get('reference_number')\n+        phone_number = request.POST.get('phone_number')\n+        address = request.POST.get('address')\n+        \n+        try:\n+            invoice_data = bill_reader(reference_number)\n+            name = invoice_data['Name']\n+            #panel_power = 545  # 545 watts per panel\n+            panel = Panel.objects.get(default_choice=True)\n+            panel_power = panel.power\n+            panel_price = panel.price\n+            panel_brand = panel.brand\n+            potential_customer = PotentialCustomers.objects.create(\n+                name=name, address=address, phone=phone_number, reference_number=reference_number)\n+            potential_customer.save()\n+\n+            # Calculate recommended system size based on the customer's consumption\n+            daily_energy = (panel_power * 9) / 1000  # 9 hours of sunlight\n+            annual_energy = daily_energy * 365\n+            total_power_of_1_panel = float(annual_energy) * 0.8  # 80% efficiency per panel\n+            panels_needed = math.ceil((int(invoice_data['Max Units']) * 12) / total_power_of_1_panel)\n+            system_size_recommended = math.ceil((panels_needed * panel_power) / 1000)\n+\n+            # Calculate sizes for smaller and larger systems\n+            system_size_smaller = max(system_size_recommended - 2, 1)  # Ensure at least 1kW\n+            system_size_larger = system_size_recommended + 2\n+\n+            # Pricing calculations for all three systems\n+            # Find the inverter with the same power or closest to the system size\n+            inverters_rec = Inverter.objects.filter(power__gte=system_size_recommended).order_by('power')\n+            if inverters_rec.exists():\n+                inverter_rec = inverters_rec.first()\n+                print(inverter_rec)\n+                inverter_price_rec = inverter_rec.price\n+            else:\n+                # Handle the case when no inverter is available with the required power\n+                inverter_price_rec = 0\n+            inverters_small = Inverter.objects.filter(power__gte=system_size_smaller).order_by('power')\n+            if inverters_small.exists():\n+                inverter_small = inverters_small.first()\n+                print(inverter_small)\n+                inverter_price_small = inverter_small.price\n+            else:\n+                # Handle the case when no inverter is available with the required power\n+                inverter_price_small = 0\n+            inverters_large = Inverter.objects.filter(power__gte=system_size_larger).order_by('power')\n+            if inverters_large.exists():\n+                inverter_large = inverters_large.first()\n+                print(inverter_large)\n+                inverter_price_large = inverter_large.price\n+            else:\n+                # Handle the case when no inverter is available with the required power\n+                inverter_price_large = 0\n+            net_metering = variableCosts.objects.filter(cost_name='Net Metering').first().cost\n+            installation_cost_per_watt = variableCosts.objects.filter(cost_name='Installation Cost per Watt').first().cost\n+            frame_cost_per_watt = variableCosts.objects.filter(cost_name='Frame Cost per Watt').first().cost\n+            \n+            cabling_cost = 50000\n+            electrical_and_mechanical_cost = 50000\n+\n+            # Total cost calculation for each system\n+            def calculate_total_cost(system_size, inverter_price, installation_cost, frame_cost):\n+                print(system_size, inverter_price, installation_cost, frame_cost)\n+                print(system_size * panel_price * panel_power)  \n+                return (system_size * panel_price * panel_power) + inverter_price + net_metering + installation_cost + frame_cost + cabling_cost + electrical_and_mechanical_cost\n+            \n+            installation_rec = system_size_recommended * installation_cost_per_watt * 1000\n+            installation_small = system_size_smaller * installation_cost_per_watt * 1000\n+            installation_large = system_size_larger * installation_cost_per_watt * 1000\n+            frame_cost_rec = system_size_recommended * frame_cost_per_watt * 1000\n+            frame_cost_small = system_size_smaller * frame_cost_per_watt * 1000\n+            frame_cost_large = system_size_larger * frame_cost_per_watt * 1000\n+            total_cost_recommended = calculate_total_cost(panels_needed, inverter_price_rec, installation_rec, frame_cost_rec)\n+            total_cost_smaller = calculate_total_cost(math.ceil(system_size_smaller * 1000 / panel_power), inverter_price_small, installation_small, frame_cost_small)\n+            total_cost_larger = calculate_total_cost(math.ceil(system_size_larger * 1000 / panel_power), inverter_price_large, installation_large, frame_cost_large)\n+\n+            # Prepare response data for all three systems\n+            response_data = {\n+                'name': name,\n+                'address': address,\n+                'phone': phone_number,\n+                'reference_number': reference_number,\n+                'electricity_bill': invoice_data['Payable Within Due Date'],\n+                'monthly_units': invoice_data['Units Consumed'],\n+                'yearly_units': invoice_data['Total Yearly Units'],\n+                'panel_price': panel_price,\n+                'panel_brand': panel_brand,\n+                'panel_power': panel_power,\n+                'net_metering': net_metering,               \n+                # Recommended system\n+                'recommended': {\n+                    'system_size': system_size_recommended,\n+\n+                    'panel_quantity': panels_needed,\n+                    'inverter_brand': inverter_rec.brand,\n+                    'inverter_price_rec': inverter_price_rec,\n+                    'frame_cost': frame_cost_rec,\n+                    'installation_cost': installation_rec,\n+                    'total_cost': total_cost_recommended,\n+                    'cabling_cost': 50000,\n+                    'electrical_and_mechanical_cost': 50000\n+                },\n+                # Smaller system\n+                'smaller': {\n+                    'system_size': system_size_smaller,\n+                    'panel_quantity': math.ceil(system_size_smaller * 1000 / panel_power),\n+                    'inverter_brand': inverter_small.brand,\n+                    'frame_cost': frame_cost_small,\n+                    'installation_cost': installation_small,\n+                    'total_cost': total_cost_smaller,\n+                    'inverter_price_small': inverter_price_small,\n+                    'cabling_cost': 50000,\n+                    'electrical_and_mechanical_cost': 50000\n+                },\n+                # Larger system\n+                'larger': {\n+                    'system_size': system_size_larger,\n+                    'panel_quantity': math.ceil(system_size_larger * 1000 / panel_power),\n+                    'inverter_brand': inverter_large.brand,\n+                    'frame_cost': frame_cost_large,\n+                    'installation_cost': installation_large,\n+                    'total_cost': total_cost_larger,\n+                    'inverter_price_large': inverter_price_large,\n+                    'cabling_cost': 50000,\n+                    'electrical_and_mechanical_cost': 50000\n+                }\n+            }\n+            \n+            return JsonResponse(response_data)\n+\n+        except Exception as e:\n+            return render(request, 'index.html', {'error_message': str(e)})\n+\n+    return redirect(reverse('your_form_page_name'))\n+\n+class GenerateInvoiceForSystem(APIView):\n+    def get(self, request, *args, **kwargs):\n+        try:\n+            # Extract system_size from the kwargs\n+            system_size = int(kwargs.get('system_size', 0))\n+            if not system_size:\n+                return Response({'error': 'No system size provided'}, status=status.HTTP_400_BAD_REQUEST)\n+            \n+            # The rest of your logic remains the same\n+            panel = Panel.objects.get(default_choice=True)\n+            panel_power = panel.power\n+            panel_price = panel.price\n+            panel_brand = panel.brand\n+            panels_needed = math.ceil((system_size * 1000) / panel_power)\n+            inverters = Inverter.objects.filter(power__gte=system_size).order_by('power')\n+            if inverters.exists():\n+                inverter = inverters.first()\n+                inverter_price = inverter.price\n+                inverter_brand = inverter.brand\n+            else:\n+                # Handle the case when no inverter is available with the required power\n+                inverter_price = 0\n+           # variableCosts queries with validation\n+            net_metering_record = variableCosts.objects.filter(cost_name='Net Metering').first()\n+            if not net_metering_record:\n+                return Response({'error': 'Net Metering cost is missing in the database'}, status=status.HTTP_400_BAD_REQUEST)\n+            net_metering = net_metering_record.cost\n+\n+            installation_cost_record = variableCosts.objects.filter(cost_name='Installation Cost per Watt').first()\n+            if not installation_cost_record:\n+                return Response({'error': 'Installation Cost per Watt is missing in the database'}, status=status.HTTP_400_BAD_REQUEST)\n+            installation_cost_per_watt = installation_cost_record.cost\n+            total_installation_cost = installation_cost_per_watt * system_size * 1000\n+\n+            frame_cost_record = variableCosts.objects.filter(cost_name='Frame Cost per Watt').first()\n+            if not frame_cost_record:\n+                return Response({'error': 'Frame Cost per Watt is missing in the database'}, status=status.HTTP_400_BAD_REQUEST)\n+            frame_cost_per_watt = frame_cost_record.cost\n+            total_frame_cost = frame_cost_per_watt * system_size * 1000\n+\n+            labor_cost_record = variableCosts.objects.filter(cost_name='Labor Cost').first()\n+            if not labor_cost_record:\n+                return Response({'error': 'Labor Cost is missing in the database'}, status=status.HTTP_400_BAD_REQUEST)\n+            labor_cost = labor_cost_record.cost\n+            total_labor_cost = labor_cost * system_size * 1000\n+\n+            # BracketCosts queries with validation\n+            DC_Cable_Costs = BracketCosts.objects.filter(Type='DC Cables').order_by('SystemRange')\n+            print(DC_Cable_Costs)\n+            selected_DC_Cable_Cost = None\n+            for cost in DC_Cable_Costs:\n+                print(cost.SystemRange)\n+                print(system_size)\n+                if cost.SystemRange <= system_size:\n+                    selected_DC_Cable_Cost = cost\n+                    print(selected_DC_Cable_Cost, \"Has been selected\")\n+                else:\n+                    break\n+            if not selected_DC_Cable_Cost:\n+                return Response({'error': 'DC Cable cost is missing or not suitable for the system size'}, status=status.HTTP_400_BAD_REQUEST)\n+\n+            AC_Cable_Costs = BracketCosts.objects.filter(Type='AC Cables').order_by('SystemRange')\n+            selected_AC_Cable_Cost = None\n+            for cost in AC_Cable_Costs:\n+                if cost.SystemRange <= system_size:\n+                    selected_AC_Cable_Cost = cost\n+                else:\n+                    break\n+            if not selected_AC_Cable_Cost:\n+                return Response({'error': 'AC Cable cost is missing or not suitable for the system size'}, status=status.HTTP_400_BAD_REQUEST)\n+\n+            Accessories_Costs = BracketCosts.objects.filter(Type='Accessories').order_by('SystemRange')\n+            selected_Accessories_Cost = None\n+            for cost in Accessories_Costs:\n+                if cost.SystemRange <= system_size:\n+                    selected_Accessories_Cost = cost\n+                else:\n+                    break\n+            if not selected_Accessories_Cost:\n+                return Response({'error': 'Accessories cost is missing or not suitable for the system size'}, status=status.HTTP_400_BAD_REQUEST)\n+\n+            \n+            total_cost = (panels_needed * panel_price) + inverter_price + net_metering + total_installation_cost + total_frame_cost + selected_DC_Cable_Cost.cost + selected_AC_Cable_Cost.cost + selected_Accessories_Cost.cost + total_labor_cost\n+            # Your logic to generate invoice based on input_string\n+            invoice_data = {\n+                'panel_price': panel_price,\n+                'panel_brand': panel_brand,\n+                'panel_power': panel_power,\n+                'panels_needed': panels_needed,\n+                'inverter_brand': inverter_brand,\n+                'inverter_price': inverter_price,\n+                'net_metering': net_metering,\n+                'installation_cost': total_installation_cost,\n+                'frame_cost': total_frame_cost,\n+                'dc_cable_cost': selected_DC_Cable_Cost.cost,\n+                'ac_cable_cost': selected_AC_Cable_Cost.cost,\n+                'accessories_cost': selected_Accessories_Cost.cost,\n+                'labor_cost': total_labor_cost,\n+                'total_cost': total_cost,\n+                'invoice': 'Generated invoice data here'  # Replace with actual invoice generation logic\n+            }\n+            \n+            return Response(invoice_data, status=status.HTTP_200_OK)\n+        except Exception as e:\n+            return Response({'error': str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n+\n+\n+#@user_passes_test(lambda u: u.is_staff)\n+def control_panel(request):\n+    return render(request, 'solar/control_panel.html')\n+\n+#@user_passes_test(lambda u: u.is_staff)\n+def panels(request):\n+    if request.method == 'GET':\n+        panels = Panel.objects.all().values()\n+        return JsonResponse(list(panels), safe=False)\n+    elif request.method == 'POST':\n+        data = json.loads(request.body)\n+        panel = Panel.objects.create(\n+            brand=data['brand'],\n+            price=data['price'],\n+            power=data['power'],\n+        )\n+        return JsonResponse({'message': 'Panel added successfully!'})\n+    \n+def set_default_panel(request, panel_id):\n+    # Set all default_choice fields to False\n+    Panel.objects.update(default_choice=False)\n+\n+    # Set the selected panel's default_choice to True\n+    try:\n+        panel = Panel.objects.get(id=panel_id)\n+        panel.default_choice = True\n+        panel.save()\n+        return JsonResponse({'success': True})\n+    except Panel.DoesNotExist:\n+        return JsonResponse({'success': False, 'error': 'Panel not found'}, status=404)\n+\n+#@user_passes_test(lambda u: u.is_staff)\n+def inverters(request):\n+    if request.method == 'GET':\n+        inverters = Inverter.objects.all().values()\n+        return JsonResponse(list(inverters), safe=False)\n+    elif request.method == 'POST':\n+        data = json.loads(request.body)\n+        inverter = Inverter.objects.create(\n+            brand=data['brand'],\n+            price=data['price'],\n+            power=data['power'],\n+            availability=data['availability']\n+        )\n+        return JsonResponse({'message': 'Inverter added successfully!'})\n+\n+#@user_passes_test(lambda u: u.is_staff)\n+def customers(request):\n+    customers = PotentialCustomers.objects.all().values()\n+    return JsonResponse(list(customers), safe=False)\n+\n+@csrf_exempt\n+#@user_passes_test(lambda u: u.is_staff)\n+def panel_list(request):\n+    if request.method == 'GET':\n+        panels = Panel.objects.all().values()\n+        return JsonResponse(list(panels), safe=False)\n+    elif request.method == 'POST':\n+        data = json.loads(request.body)\n+        panel = Panel.objects.create(\n+            brand=data['brand'],\n+            price=data['price'],\n+            power=data['power'],\n+            availability=data['availability']\n+        )\n+        return JsonResponse({\"id\": panel.id}, status=201)\n+\n+@csrf_exempt\n+#@user_passes_test(lambda u: u.is_staff)\n+def panel_detail(request, id):\n+    panel = get_object_or_404(Panel, id=id)\n+    if request.method == 'PUT':\n+        data = json.loads(request.body)\n+        panel.brand = data['brand']\n+        panel.price = data['price']\n+        panel.power = data['power']\n+        panel.availability = data['availability']\n+        panel.save()\n+        return JsonResponse({\"id\": panel.id}, status=200)\n+    elif request.method == 'DELETE':\n+        panel.delete()\n+        return JsonResponse({\"id\": id}, status=200)\n+\n+@csrf_exempt\n+#@user_passes_test(lambda u: u.is_staff)\n+def inverter_list(request):\n+    if request.method == 'GET':\n+        inverters = Inverter.objects.all().values()\n+        return JsonResponse(list(inverters), safe=False)\n+    elif request.method == 'POST':\n+        data = json.loads(request.body)\n+        inverter = Inverter.objects.create(\n+            brand=data['brand'],\n+            price=data['price'],\n+            power=data['power'],\n+            availability=data['availability']\n+        )\n+        return JsonResponse({\"id\": inverter.id}, status=201)\n+\n+@csrf_exempt\n+#@user_passes_test(lambda u: u.is_staff)\n+def inverter_detail(request, id):\n+    inverter = get_object_or_404(Inverter, id=id)\n+    if request.method == 'PUT':\n+        data = json.loads(request.body)\n+        inverter.brand = data['brand']\n+        inverter.price = data['price']\n+        inverter.power = data['power']\n+        inverter.availability = data['availability']\n+        inverter.save()\n+        return JsonResponse({\"id\": inverter.id}, status=200)\n+    elif request.method == 'DELETE':\n+        inverter.delete()\n+        return JsonResponse({\"id\": id}, status=200)\n+\n+@csrf_exempt\n+#@user_passes_test(lambda u: u.is_staff)\n+def set_prices(request):\n+    if request.method == 'POST':\n+        data = json.loads(request.body)\n+        variableCosts.objects.update_or_create(\n+            cost_name='Frame Cost per Watt', defaults={'cost': data['pricePerWatt']}\n+        )\n+        variableCosts.objects.update_or_create(\n+            cost_name='Installation Cost per Watt', defaults={'cost': data['installationCost']}\n+        )\n+        variableCosts.objects.update_or_create(\n+            cost_name='Net Metering', defaults={'cost': data['netMetering']}\n+        )\n+        return JsonResponse({\"status\": \"success\"}, status=200)\n+\n+@csrf_exempt\n+#@user_passes_test(lambda u: u.is_staff)\n+def customer_list(request):\n+    if request.method == 'GET':\n+        customers = PotentialCustomers.objects.all().values()\n+        return JsonResponse(list(customers), safe=False)\n+\n+@csrf_exempt\n+#@user_passes_test(lambda u: u.is_staff)\n+def get_prices(request):\n+    if request.method == 'GET':\n+        frame_cost = variableCosts.objects.filter(cost_name='Frame Cost per Watt').first()\n+        installation_cost = variableCosts.objects.filter(cost_name='Installation Cost per Watt').first()\n+        net_metering = variableCosts.objects.filter(cost_name='Net Metering').first()\n+        print(net_metering.cost)\n+        response_data = {\n+            'frame_cost_per_watt': frame_cost.cost if frame_cost else '',\n+            'installation_cost_per_watt': installation_cost.cost if installation_cost else '',\n+            'net_metering': net_metering.cost if net_metering else ''\n+        }\n+        return JsonResponse(response_data, safe=False)\n+\n+\n+\n+\n+# ***************************************************quote api view***************************************************\n+class QuoteGenerateAPIView(APIView):\n+    def post(self, request):\n+        try:\n+            bill_data = request.data\n+            if not bill_data:\n+                return Response({\n+                    \"success\": False,\n+                    \"message\": \"Bill data is required\"\n+                }, status=status.HTTP_400_BAD_REQUEST)\n+\n+            # Get system components\n+            panel = Panel.objects.get(default_choice=True)\n+            yearly_units = float(bill_data.get('Total Yearly Units', 0))\n+            daily_avg = yearly_units / 365\n+            system_size_kw = daily_avg / 4  # Assuming 4 kWh per kW per day\n+            system_size = math.ceil(system_size_kw * 1.5)  # Recommended size\n+\n+            # Calculate panels needed\n+            panels_needed = math.ceil((system_size * 1000) / panel.power)\n+\n+            # Get appropriate inverter\n+            inverter = Inverter.objects.filter(power__gte=system_size).order_by('power').first()\n+            if not inverter:\n+                return Response({\n+                    \"success\": False,\n+                    \"message\": \"No suitable inverter found\"\n+                }, status=status.HTTP_400_BAD_REQUEST)\n+\n+            # Get variable costs\n+            net_metering = variableCosts.objects.get(cost_name='Net Metering').cost\n+            installation_cost = variableCosts.objects.get(cost_name='Installation Cost per Watt').cost\n+            frame_cost = variableCosts.objects.get(cost_name='Frame Cost per Watt').cost\n+            labor_cost = variableCosts.objects.get(cost_name='Labor Cost').cost\n+\n+            # Calculate total installations costs\n+            total_installation_cost = installation_cost * system_size * 1000\n+            total_frame_cost = frame_cost * system_size * 1000\n+            total_labor_cost = labor_cost * system_size * 1000\n+\n+            # Get bracket costs based on system size\n+            dc_cable_cost = BracketCosts.objects.filter(\n+                Type='DC Cables', \n+                SystemRange__lte=system_size\n+            ).order_by('-SystemRange').first()\n+\n+            ac_cable_cost = BracketCosts.objects.filter(\n+                Type='AC Cables', \n+                SystemRange__lte=system_size\n+            ).order_by('-SystemRange').first()\n+\n+            accessories_cost = BracketCosts.objects.filter(\n+                Type='Accessories', \n+                SystemRange__lte=system_size\n+            ).order_by('-SystemRange').first()\n+\n+            # Calculate total cost\n+            panel_cost = panels_needed * panel.price\n+            total_cost = (\n+                panel_cost +\n+                inverter.price +\n+                net_metering +\n+                total_installation_cost +\n+                total_frame_cost +\n+                dc_cable_cost.cost +\n+                ac_cable_cost.cost +\n+                accessories_cost.cost +\n+                total_labor_cost\n+            )\n+\n+            # Calculate monthly production estimates\n+            daily_production = system_size * 4  # 4 kWh per kW per day average\n+            monthly_production = daily_production * 30\n+            yearly_production = daily_production * 365\n+\n+            # Prepare response matching frontend expectations\n+            quote_data = {\n+                \"systemDetails\": {\n+                    \"systemSize\": system_size,\n+                    \"panelCount\": panels_needed,\n+                    \"panelType\": panel.brand,\n+                    \"inverterType\": inverter.brand,\n+                    \"roofArea\": panels_needed * 2,  # Approximate area in square meters\n+                    \"installationTime\": \"3-5 days\",\n+                    \"warranty\": \"25 years\"\n+                },\n+                \"production\": {\n+                    \"daily\": daily_production,\n+                    \"monthly\": self.generate_monthly_production(monthly_production),\n+                    \"annual\": yearly_production,\n+                    \"peakHours\": 4.5,\n+                    \"performanceRatio\": 0.75\n+                },\n+                \"financial\": {\n+                    \"systemCost\": total_cost,\n+                    \"annualSavings\": yearly_production * 20,  # Assuming PKR 20 per unit\n+                    \"monthlySavings\": monthly_production * 20,\n+                    \"paybackPeriod\": 5.5,  # Approximate\n+                    \"roi\": 18.2,  # Approximate annual ROI\n+                    \"savingsTimeline\": self.generate_savings_timeline(total_cost, yearly_production * 20)\n+                },\n+                \"environmental\": {\n+                    \"co2Offset\": system_size * 1.2,  # Tons per year\n+                    \"treesEquivalent\": system_size * 20,\n+                    \"homesEquivalent\": math.floor(yearly_production / 12000),\n+                    \"carbonFootprintReduction\": system_size * 1000  # kg per year\n+                }\n+            }\n+\n+            return Response({\n+                \"success\": True,\n+                \"data\": quote_data\n+            }, status=status.HTTP_200_OK)\n+\n+        except Exception as e:\n+            return Response({\n+                \"success\": False,\n+                \"message\": str(e)\n+            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n+\n+    def generate_monthly_production(self, base_production):\n+        months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', \n+                'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n+        seasonal_factors = {\n+            'winter': 0.7,  # Nov-Feb\n+            'spring': 0.9,  # Mar-Apr\n+            'summer': 1.2,  # May-Aug\n+            'fall': 0.8     # Sep-Oct\n+        }\n+\n+        monthly_data = []\n+        for i, month in enumerate(months):\n+            if i < 2 or i == 11:\n+                factor = seasonal_factors['winter']\n+            elif i < 5:\n+                factor = seasonal_factors['spring']\n+            elif i < 8:\n+                factor = seasonal_factors['summer']\n+            else:\n+                factor = seasonal_factors['fall']\n+\n+            production = math.round(base_production * factor)\n+            consumption = math.round(base_production * 0.9)  # Estimated consumption\n+            monthly_data.append({\n+                \"month\": month,\n+                \"production\": production,\n+                \"consumption\": consumption\n+            })\n+\n+        return monthly_data\n+\n+    def generate_savings_timeline(self, system_cost, annual_savings):\n+        return [\n+            {\n+                \"year\": year + 1,\n+                \"annualSavings\": math.round(annual_savings * (1 + (year * 0.05))),\n+                \"cumulativeSavings\": math.round(annual_savings * (year + 1) * (1 + (year * 0.025)))\n+            }\n+            for year in range(25)\n+        ]\n+        \n+class QuoteDetailsAPIView(APIView):\n+    def get(self, request, quote_id):\n+        try:\n+            # Since you might not have a Quote model yet, return mock data\n+            # matching your frontend expectations\n+            quote_data = {\n+                \"quoteId\": quote_id,\n+                \"systemDetails\": {\n+                    \"systemSize\": 5.0,\n+                    \"panelCount\": 14,\n+                    \"panelType\": \"Mono-crystalline\",\n+                    \"inverterType\": \"String Inverter\",\n+                    \"roofArea\": 28,\n+                    \"installationTime\": \"3-5 days\",\n+                    \"warranty\": \"25 years\"\n+                },\n+                \"production\": {\n+                    \"daily\": 20,\n+                    \"monthly\": [\n+                        {\"month\": \"Jan\", \"production\": 600, \"consumption\": 550},\n+                        # Add more months as needed\n+                    ],\n+                    \"annual\": 7300\n+                },\n+                \"financial\": {\n+                    \"systemCost\": 850000,\n+                    \"annualSavings\": 180000,\n+                    \"monthlySavings\": 15000,\n+                    \"paybackPeriod\": 4.7,\n+                    \"roi\": 21.2,\n+                    \"savingsTimeline\": [\n+                        {\"year\": 1, \"annualSavings\": 180000, \"cumulativeSavings\": 180000},\n+                        # Add more years as needed\n+                    ]\n+                },\n+                \"environmental\": {\n+                    \"co2Offset\": 5.2,\n+                    \"treesEquivalent\": 80,\n+                    \"homesEquivalent\": 2,\n+                    \"carbonFootprintReduction\": 5000\n+                }\n+            }\n+\n+            return Response({\n+                \"success\": True,\n+                \"data\": quote_data\n+            }, status=status.HTTP_200_OK)\n+\n+        except Exception as e:\n+            return Response({\n+                \"success\": False,\n+                \"message\": str(e)\n+            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n"
                }
            ],
            "date": 1733402288260,
            "name": "Commit-0",
            "content": "from django.shortcuts import render, redirect\nfrom django.urls import reverse\nfrom solar.invoice_generator.Bill_Reader import bill_reader\nfrom solar.invoice_generator.invoicemaker import generate_invoice\nfrom solar.invoice_generator.bill_verify import verify_bill\nfrom solar.invoice_generator.bill_parser_ind import parse_electricity_bill_industrial\nfrom solar.invoice_generator.bill_parser_gen import parse_electricity_bill_general\nfrom solar.models import Panel, Inverter, PotentialCustomers, variableCosts, BracketCosts\nimport math\nfrom django.http import JsonResponse\nfrom django.contrib.auth.decorators import user_passes_test\nfrom django.views.decorators.csrf import csrf_exempt\nfrom django.shortcuts import get_object_or_404\nfrom rest_framework.views import APIView\nfrom rest_framework.response import Response\nfrom rest_framework import status\nimport json\nimport requests\nfrom bs4 import BeautifulSoup\n\nclass BillValidateAPIView(APIView):\n    def post(self, request):\n        reference_number = request.data.get(\"reference_number\")\n        if not reference_number:\n            return Response({\n                \"success\": False,\n                \"data\": {\n                    \"isValid\": False,\n                    \"message\": \"Reference number is required\"\n                }\n            }, status=status.HTTP_400_BAD_REQUEST)\n\n        try:\n            # Verify bill using existing function\n            result = verify_bill(reference_number)\n            \n            return Response({\n                \"success\": True,\n                \"data\": {\n                    \"isValid\": result['exists'],\n                    \"referenceNumber\": reference_number,\n                    \"message\": \"Bill validation successful\"\n                }\n            }, status=status.HTTP_200_OK)\n        except Exception as e:\n            return Response({\n                \"success\": False,\n                \"data\": {\n                    \"isValid\": False,\n                    \"message\": str(e)\n                }\n            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\nclass GetBillDataAPIView(APIView):\n    def get(self, request, reference_number):\n        if not reference_number:\n            return Response({\n                \"status\": \"error\",\n                \"message\": \"Reference number is required.\"\n            }, status=status.HTTP_400_BAD_REQUEST)\n\n        status_result = verify_bill(reference_number)\n        if not status_result['exists']:\n            return Response({\n                \"status\": \"error\",\n                \"message\": \"Bill not found.\"\n            }, status=status.HTTP_400_BAD_REQUEST)\n\n        url = status_result.get(\"source_url\")\n        if not url:\n            return Response({\n                \"status\": \"error\",\n                \"message\": \"Valid URL not found.\"\n            }, status=status.HTTP_400_BAD_REQUEST)\n\n        full_url = f\"{url}?refno={reference_number}\"\n\n        try:\n            response = requests.get(full_url)\n            response.raise_for_status()\n            response.encoding = response.apparent_encoding  # Ensure proper encoding\n        except requests.RequestException as e:\n            return Response({\n                \"status\": \"error\",\n                \"message\": str(e)\n            }, status=status.HTTP_400_BAD_REQUEST)\n\n        soup = BeautifulSoup(response.text, 'html.parser')  # Use .text for decoded content\n        html_content = soup.prettify()\n\n        # Optional: clean up escape sequences\n        html_content = html_content.replace(\"\\r\", \"\").replace(\"\\n\", \"\")\n        #print(html_content)\n        if (status_result['source_url'] == \"https://bill.pitc.com.pk/mepcobill/industrial\"):\n            json_data = parse_electricity_bill_industrial(html_content)\n        else:\n            json_data = parse_electricity_bill_general(html_content)\n\n        yearly_units = int(json_data['Total Yearly Units'])\n        yearly_avg = yearly_units / 12\n\n        print(yearly_avg)\n        system_size_kw = (yearly_avg / 30) / 4\n        print(system_size_kw)\n        system_size_recommended = math.ceil(system_size_kw * 1.5)\n        system_size_smaller = math.ceil(system_size_kw * 1.3)\n        system_size_larger = math.ceil(system_size_kw * 1.7)\n        json_data['Recommended System Size'] = system_size_recommended\n        json_data['Smaller System Size'] = system_size_smaller\n        json_data['Larger System Size'] = system_size_larger  \n        return Response({\n            \"status\": \"success\",\n            \"data\": json_data\n        }, status=status.HTTP_200_OK)\n    \ndef index(request):\n    return render(request, 'solar/index.html')\n\ndef quotation(request):\n    return render(request, 'solar/quotation.html')\n\n#DEPRECATED\ndef generate_invoice_view(request):\n    if request.method == 'POST':\n        reference_number = request.POST.get('reference_number')\n        phone_number = request.POST.get('phone_number')\n        address = request.POST.get('address')\n        \n        try:\n            invoice_data = bill_reader(reference_number)\n            name = invoice_data['Name']\n            #panel_power = 545  # 545 watts per panel\n            panel = Panel.objects.get(default_choice=True)\n            panel_power = panel.power\n            panel_price = panel.price\n            panel_brand = panel.brand\n            potential_customer = PotentialCustomers.objects.create(\n                name=name, address=address, phone=phone_number, reference_number=reference_number)\n            potential_customer.save()\n\n            # Calculate recommended system size based on the customer's consumption\n            daily_energy = (panel_power * 9) / 1000  # 9 hours of sunlight\n            annual_energy = daily_energy * 365\n            total_power_of_1_panel = float(annual_energy) * 0.8  # 80% efficiency per panel\n            panels_needed = math.ceil((int(invoice_data['Max Units']) * 12) / total_power_of_1_panel)\n            system_size_recommended = math.ceil((panels_needed * panel_power) / 1000)\n\n            # Calculate sizes for smaller and larger systems\n            system_size_smaller = max(system_size_recommended - 2, 1)  # Ensure at least 1kW\n            system_size_larger = system_size_recommended + 2\n\n            # Pricing calculations for all three systems\n            # Find the inverter with the same power or closest to the system size\n            inverters_rec = Inverter.objects.filter(power__gte=system_size_recommended).order_by('power')\n            if inverters_rec.exists():\n                inverter_rec = inverters_rec.first()\n                print(inverter_rec)\n                inverter_price_rec = inverter_rec.price\n            else:\n                # Handle the case when no inverter is available with the required power\n                inverter_price_rec = 0\n            inverters_small = Inverter.objects.filter(power__gte=system_size_smaller).order_by('power')\n            if inverters_small.exists():\n                inverter_small = inverters_small.first()\n                print(inverter_small)\n                inverter_price_small = inverter_small.price\n            else:\n                # Handle the case when no inverter is available with the required power\n                inverter_price_small = 0\n            inverters_large = Inverter.objects.filter(power__gte=system_size_larger).order_by('power')\n            if inverters_large.exists():\n                inverter_large = inverters_large.first()\n                print(inverter_large)\n                inverter_price_large = inverter_large.price\n            else:\n                # Handle the case when no inverter is available with the required power\n                inverter_price_large = 0\n            net_metering = variableCosts.objects.filter(cost_name='Net Metering').first().cost\n            installation_cost_per_watt = variableCosts.objects.filter(cost_name='Installation Cost per Watt').first().cost\n            frame_cost_per_watt = variableCosts.objects.filter(cost_name='Frame Cost per Watt').first().cost\n            \n            cabling_cost = 50000\n            electrical_and_mechanical_cost = 50000\n\n            # Total cost calculation for each system\n            def calculate_total_cost(system_size, inverter_price, installation_cost, frame_cost):\n                print(system_size, inverter_price, installation_cost, frame_cost)\n                print(system_size * panel_price * panel_power)  \n                return (system_size * panel_price * panel_power) + inverter_price + net_metering + installation_cost + frame_cost + cabling_cost + electrical_and_mechanical_cost\n            \n            installation_rec = system_size_recommended * installation_cost_per_watt * 1000\n            installation_small = system_size_smaller * installation_cost_per_watt * 1000\n            installation_large = system_size_larger * installation_cost_per_watt * 1000\n            frame_cost_rec = system_size_recommended * frame_cost_per_watt * 1000\n            frame_cost_small = system_size_smaller * frame_cost_per_watt * 1000\n            frame_cost_large = system_size_larger * frame_cost_per_watt * 1000\n            total_cost_recommended = calculate_total_cost(panels_needed, inverter_price_rec, installation_rec, frame_cost_rec)\n            total_cost_smaller = calculate_total_cost(math.ceil(system_size_smaller * 1000 / panel_power), inverter_price_small, installation_small, frame_cost_small)\n            total_cost_larger = calculate_total_cost(math.ceil(system_size_larger * 1000 / panel_power), inverter_price_large, installation_large, frame_cost_large)\n\n            # Prepare response data for all three systems\n            response_data = {\n                'name': name,\n                'address': address,\n                'phone': phone_number,\n                'reference_number': reference_number,\n                'electricity_bill': invoice_data['Payable Within Due Date'],\n                'monthly_units': invoice_data['Units Consumed'],\n                'yearly_units': invoice_data['Total Yearly Units'],\n                'panel_price': panel_price,\n                'panel_brand': panel_brand,\n                'panel_power': panel_power,\n                'net_metering': net_metering,               \n                # Recommended system\n                'recommended': {\n                    'system_size': system_size_recommended,\n\n                    'panel_quantity': panels_needed,\n                    'inverter_brand': inverter_rec.brand,\n                    'inverter_price_rec': inverter_price_rec,\n                    'frame_cost': frame_cost_rec,\n                    'installation_cost': installation_rec,\n                    'total_cost': total_cost_recommended,\n                    'cabling_cost': 50000,\n                    'electrical_and_mechanical_cost': 50000\n                },\n                # Smaller system\n                'smaller': {\n                    'system_size': system_size_smaller,\n                    'panel_quantity': math.ceil(system_size_smaller * 1000 / panel_power),\n                    'inverter_brand': inverter_small.brand,\n                    'frame_cost': frame_cost_small,\n                    'installation_cost': installation_small,\n                    'total_cost': total_cost_smaller,\n                    'inverter_price_small': inverter_price_small,\n                    'cabling_cost': 50000,\n                    'electrical_and_mechanical_cost': 50000\n                },\n                # Larger system\n                'larger': {\n                    'system_size': system_size_larger,\n                    'panel_quantity': math.ceil(system_size_larger * 1000 / panel_power),\n                    'inverter_brand': inverter_large.brand,\n                    'frame_cost': frame_cost_large,\n                    'installation_cost': installation_large,\n                    'total_cost': total_cost_larger,\n                    'inverter_price_large': inverter_price_large,\n                    'cabling_cost': 50000,\n                    'electrical_and_mechanical_cost': 50000\n                }\n            }\n            \n            return JsonResponse(response_data)\n\n        except Exception as e:\n            return render(request, 'index.html', {'error_message': str(e)})\n\n    return redirect(reverse('your_form_page_name'))\n\nclass GenerateInvoiceForSystem(APIView):\n    def get(self, request, *args, **kwargs):\n        try:\n            # Extract system_size from the kwargs\n            system_size = int(kwargs.get('system_size', 0))\n            if not system_size:\n                return Response({'error': 'No system size provided'}, status=status.HTTP_400_BAD_REQUEST)\n            \n            # The rest of your logic remains the same\n            panel = Panel.objects.get(default_choice=True)\n            panel_power = panel.power\n            panel_price = panel.price\n            panel_brand = panel.brand\n            panels_needed = math.ceil((system_size * 1000) / panel_power)\n            inverters = Inverter.objects.filter(power__gte=system_size).order_by('power')\n            if inverters.exists():\n                inverter = inverters.first()\n                inverter_price = inverter.price\n                inverter_brand = inverter.brand\n            else:\n                # Handle the case when no inverter is available with the required power\n                inverter_price = 0\n           # variableCosts queries with validation\n            net_metering_record = variableCosts.objects.filter(cost_name='Net Metering').first()\n            if not net_metering_record:\n                return Response({'error': 'Net Metering cost is missing in the database'}, status=status.HTTP_400_BAD_REQUEST)\n            net_metering = net_metering_record.cost\n\n            installation_cost_record = variableCosts.objects.filter(cost_name='Installation Cost per Watt').first()\n            if not installation_cost_record:\n                return Response({'error': 'Installation Cost per Watt is missing in the database'}, status=status.HTTP_400_BAD_REQUEST)\n            installation_cost_per_watt = installation_cost_record.cost\n            total_installation_cost = installation_cost_per_watt * system_size * 1000\n\n            frame_cost_record = variableCosts.objects.filter(cost_name='Frame Cost per Watt').first()\n            if not frame_cost_record:\n                return Response({'error': 'Frame Cost per Watt is missing in the database'}, status=status.HTTP_400_BAD_REQUEST)\n            frame_cost_per_watt = frame_cost_record.cost\n            total_frame_cost = frame_cost_per_watt * system_size * 1000\n\n            labor_cost_record = variableCosts.objects.filter(cost_name='Labor Cost').first()\n            if not labor_cost_record:\n                return Response({'error': 'Labor Cost is missing in the database'}, status=status.HTTP_400_BAD_REQUEST)\n            labor_cost = labor_cost_record.cost\n            total_labor_cost = labor_cost * system_size * 1000\n\n            # BracketCosts queries with validation\n            DC_Cable_Costs = BracketCosts.objects.filter(Type='DC Cables').order_by('SystemRange')\n            print(DC_Cable_Costs)\n            selected_DC_Cable_Cost = None\n            for cost in DC_Cable_Costs:\n                print(cost.SystemRange)\n                print(system_size)\n                if cost.SystemRange <= system_size:\n                    selected_DC_Cable_Cost = cost\n                    print(selected_DC_Cable_Cost, \"Has been selected\")\n                else:\n                    break\n            if not selected_DC_Cable_Cost:\n                return Response({'error': 'DC Cable cost is missing or not suitable for the system size'}, status=status.HTTP_400_BAD_REQUEST)\n\n            AC_Cable_Costs = BracketCosts.objects.filter(Type='AC Cables').order_by('SystemRange')\n            selected_AC_Cable_Cost = None\n            for cost in AC_Cable_Costs:\n                if cost.SystemRange <= system_size:\n                    selected_AC_Cable_Cost = cost\n                else:\n                    break\n            if not selected_AC_Cable_Cost:\n                return Response({'error': 'AC Cable cost is missing or not suitable for the system size'}, status=status.HTTP_400_BAD_REQUEST)\n\n            Accessories_Costs = BracketCosts.objects.filter(Type='Accessories').order_by('SystemRange')\n            selected_Accessories_Cost = None\n            for cost in Accessories_Costs:\n                if cost.SystemRange <= system_size:\n                    selected_Accessories_Cost = cost\n                else:\n                    break\n            if not selected_Accessories_Cost:\n                return Response({'error': 'Accessories cost is missing or not suitable for the system size'}, status=status.HTTP_400_BAD_REQUEST)\n\n            \n            total_cost = (panels_needed * panel_price) + inverter_price + net_metering + total_installation_cost + total_frame_cost + selected_DC_Cable_Cost.cost + selected_AC_Cable_Cost.cost + selected_Accessories_Cost.cost + total_labor_cost\n            # Your logic to generate invoice based on input_string\n            invoice_data = {\n                'panel_price': panel_price,\n                'panel_brand': panel_brand,\n                'panel_power': panel_power,\n                'panels_needed': panels_needed,\n                'inverter_brand': inverter_brand,\n                'inverter_price': inverter_price,\n                'net_metering': net_metering,\n                'installation_cost': total_installation_cost,\n                'frame_cost': total_frame_cost,\n                'dc_cable_cost': selected_DC_Cable_Cost.cost,\n                'ac_cable_cost': selected_AC_Cable_Cost.cost,\n                'accessories_cost': selected_Accessories_Cost.cost,\n                'labor_cost': total_labor_cost,\n                'total_cost': total_cost,\n                'invoice': 'Generated invoice data here'  # Replace with actual invoice generation logic\n            }\n            \n            return Response(invoice_data, status=status.HTTP_200_OK)\n        except Exception as e:\n            return Response({'error': str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\n\n#@user_passes_test(lambda u: u.is_staff)\ndef control_panel(request):\n    return render(request, 'solar/control_panel.html')\n\n#@user_passes_test(lambda u: u.is_staff)\ndef panels(request):\n    if request.method == 'GET':\n        panels = Panel.objects.all().values()\n        return JsonResponse(list(panels), safe=False)\n    elif request.method == 'POST':\n        data = json.loads(request.body)\n        panel = Panel.objects.create(\n            brand=data['brand'],\n            price=data['price'],\n            power=data['power'],\n        )\n        return JsonResponse({'message': 'Panel added successfully!'})\n    \ndef set_default_panel(request, panel_id):\n    # Set all default_choice fields to False\n    Panel.objects.update(default_choice=False)\n\n    # Set the selected panel's default_choice to True\n    try:\n        panel = Panel.objects.get(id=panel_id)\n        panel.default_choice = True\n        panel.save()\n        return JsonResponse({'success': True})\n    except Panel.DoesNotExist:\n        return JsonResponse({'success': False, 'error': 'Panel not found'}, status=404)\n\n#@user_passes_test(lambda u: u.is_staff)\ndef inverters(request):\n    if request.method == 'GET':\n        inverters = Inverter.objects.all().values()\n        return JsonResponse(list(inverters), safe=False)\n    elif request.method == 'POST':\n        data = json.loads(request.body)\n        inverter = Inverter.objects.create(\n            brand=data['brand'],\n            price=data['price'],\n            power=data['power'],\n            availability=data['availability']\n        )\n        return JsonResponse({'message': 'Inverter added successfully!'})\n\n#@user_passes_test(lambda u: u.is_staff)\ndef customers(request):\n    customers = PotentialCustomers.objects.all().values()\n    return JsonResponse(list(customers), safe=False)\n\n@csrf_exempt\n#@user_passes_test(lambda u: u.is_staff)\ndef panel_list(request):\n    if request.method == 'GET':\n        panels = Panel.objects.all().values()\n        return JsonResponse(list(panels), safe=False)\n    elif request.method == 'POST':\n        data = json.loads(request.body)\n        panel = Panel.objects.create(\n            brand=data['brand'],\n            price=data['price'],\n            power=data['power'],\n            availability=data['availability']\n        )\n        return JsonResponse({\"id\": panel.id}, status=201)\n\n@csrf_exempt\n#@user_passes_test(lambda u: u.is_staff)\ndef panel_detail(request, id):\n    panel = get_object_or_404(Panel, id=id)\n    if request.method == 'PUT':\n        data = json.loads(request.body)\n        panel.brand = data['brand']\n        panel.price = data['price']\n        panel.power = data['power']\n        panel.availability = data['availability']\n        panel.save()\n        return JsonResponse({\"id\": panel.id}, status=200)\n    elif request.method == 'DELETE':\n        panel.delete()\n        return JsonResponse({\"id\": id}, status=200)\n\n@csrf_exempt\n#@user_passes_test(lambda u: u.is_staff)\ndef inverter_list(request):\n    if request.method == 'GET':\n        inverters = Inverter.objects.all().values()\n        return JsonResponse(list(inverters), safe=False)\n    elif request.method == 'POST':\n        data = json.loads(request.body)\n        inverter = Inverter.objects.create(\n            brand=data['brand'],\n            price=data['price'],\n            power=data['power'],\n            availability=data['availability']\n        )\n        return JsonResponse({\"id\": inverter.id}, status=201)\n\n@csrf_exempt\n#@user_passes_test(lambda u: u.is_staff)\ndef inverter_detail(request, id):\n    inverter = get_object_or_404(Inverter, id=id)\n    if request.method == 'PUT':\n        data = json.loads(request.body)\n        inverter.brand = data['brand']\n        inverter.price = data['price']\n        inverter.power = data['power']\n        inverter.availability = data['availability']\n        inverter.save()\n        return JsonResponse({\"id\": inverter.id}, status=200)\n    elif request.method == 'DELETE':\n        inverter.delete()\n        return JsonResponse({\"id\": id}, status=200)\n\n@csrf_exempt\n#@user_passes_test(lambda u: u.is_staff)\ndef set_prices(request):\n    if request.method == 'POST':\n        data = json.loads(request.body)\n        variableCosts.objects.update_or_create(\n            cost_name='Frame Cost per Watt', defaults={'cost': data['pricePerWatt']}\n        )\n        variableCosts.objects.update_or_create(\n            cost_name='Installation Cost per Watt', defaults={'cost': data['installationCost']}\n        )\n        variableCosts.objects.update_or_create(\n            cost_name='Net Metering', defaults={'cost': data['netMetering']}\n        )\n        return JsonResponse({\"status\": \"success\"}, status=200)\n\n@csrf_exempt\n#@user_passes_test(lambda u: u.is_staff)\ndef customer_list(request):\n    if request.method == 'GET':\n        customers = PotentialCustomers.objects.all().values()\n        return JsonResponse(list(customers), safe=False)\n\n@csrf_exempt\n#@user_passes_test(lambda u: u.is_staff)\ndef get_prices(request):\n    if request.method == 'GET':\n        frame_cost = variableCosts.objects.filter(cost_name='Frame Cost per Watt').first()\n        installation_cost = variableCosts.objects.filter(cost_name='Installation Cost per Watt').first()\n        net_metering = variableCosts.objects.filter(cost_name='Net Metering').first()\n        print(net_metering.cost)\n        response_data = {\n            'frame_cost_per_watt': frame_cost.cost if frame_cost else '',\n            'installation_cost_per_watt': installation_cost.cost if installation_cost else '',\n            'net_metering': net_metering.cost if net_metering else ''\n        }\n        return JsonResponse(response_data, safe=False)\n"
        }
    ]
}