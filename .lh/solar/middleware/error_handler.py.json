{
    "sourceFile": "solar/middleware/error_handler.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1733403445817,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733413541613,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,132 @@\n+# solar/middleware/error_handler.py\r\n+from django.http import JsonResponse\r\n+from rest_framework import status\r\n+from rest_framework.views import exception_handler\r\n+from django.core.exceptions import ValidationError\r\n+import traceback\r\n+import logging\r\n+\r\n+from EnergyCove import settings\r\n+\r\n+logger = logging.getLogger(__name__)\r\n+\r\n+class AppError(Exception):\r\n+    def __init__(self, message, code, data=None):\r\n+        self.message = message\r\n+        self.code = code\r\n+        self.data = data or {}\r\n+        super().__init__(message)\r\n+\r\n+class ErrorHandlerMiddleware:\r\n+    def __init__(self, get_response):\r\n+        self.get_response = get_response\r\n+\r\n+    def __call__(self, request):\r\n+        try:\r\n+            return self.get_response(request)\r\n+        except Exception as e:\r\n+            return self.handle_error(e)\r\n+\r\n+    def handle_error(self, error):\r\n+        \"\"\"Convert exceptions to JSON responses matching frontend expectations\"\"\"\r\n+        \r\n+        # Handle custom AppError\r\n+        if isinstance(error, AppError):\r\n+            return JsonResponse({\r\n+                'success': False,\r\n+                'error': {\r\n+                    'message': error.message,\r\n+                    'code': error.code,\r\n+                    'data': error.data\r\n+                }\r\n+            }, status=self.get_status_code(error.code))\r\n+\r\n+        # Handle Django ValidationError\r\n+        if isinstance(error, ValidationError):\r\n+            return JsonResponse({\r\n+                'success': False,\r\n+                'error': {\r\n+                    'message': 'Validation error',\r\n+                    'code': 'VALIDATION_ERROR',\r\n+                    'data': {\r\n+                        'fields': error.message_dict if hasattr(error, 'message_dict') else {'error': error.messages}\r\n+                    }\r\n+                }\r\n+            }, status=status.HTTP_400_BAD_REQUEST)\r\n+\r\n+        # Handle other exceptions\r\n+        logger.error(f\"Unhandled error: {str(error)}\\n{traceback.format_exc()}\")\r\n+        return JsonResponse({\r\n+            'success': False,\r\n+            'error': {\r\n+                'message': 'An unexpected error occurred',\r\n+                'code': 'INTERNAL_ERROR',\r\n+                'data': {'detail': str(error)} if settings.DEBUG else {}\r\n+            }\r\n+        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\r\n+\r\n+    def get_status_code(self, error_code):\r\n+        \"\"\"Map error codes to HTTP status codes\"\"\"\r\n+        ERROR_CODE_MAP = {\r\n+            'VALIDATION_ERROR': status.HTTP_400_BAD_REQUEST,\r\n+            'UNAUTHORIZED': status.HTTP_401_UNAUTHORIZED,\r\n+            'FORBIDDEN': status.HTTP_403_FORBIDDEN,\r\n+            'NOT_FOUND': status.HTTP_404_NOT_FOUND,\r\n+            'SERVER_ERROR': status.HTTP_500_INTERNAL_SERVER_ERROR,\r\n+            'SERVICE_ERROR': status.HTTP_503_SERVICE_UNAVAILABLE,\r\n+            'NETWORK_ERROR': status.HTTP_503_SERVICE_UNAVAILABLE,\r\n+        }\r\n+        return ERROR_CODE_MAP.get(error_code, status.HTTP_500_INTERNAL_SERVER_ERROR)\r\n+\r\n+# solar/utils/error_utils.py\r\n+class ErrorTypes:\r\n+    \"\"\"Error type constants matching frontend error codes\"\"\"\r\n+    VALIDATION_ERROR = 'VALIDATION_ERROR'\r\n+    UNAUTHORIZED = 'UNAUTHORIZED'\r\n+    FORBIDDEN = 'FORBIDDEN'\r\n+    NOT_FOUND = 'NOT_FOUND'\r\n+    SERVER_ERROR = 'SERVER_ERROR'\r\n+    NETWORK_ERROR = 'NETWORK_ERROR'\r\n+    SERVICE_ERROR = 'SERVICE_ERROR'\r\n+    UNKNOWN_ERROR = 'UNKNOWN_ERROR'\r\n+\r\n+def custom_exception_handler(exc, context):\r\n+    \"\"\"Custom exception handler for DRF views\"\"\"\r\n+    response = exception_handler(exc, context)\r\n+    \r\n+    if response is not None:\r\n+        response.data = {\r\n+            'success': False,\r\n+            'error': {\r\n+                'message': str(exc),\r\n+                'code': get_error_code(response.status_code),\r\n+                'data': response.data if hasattr(response, 'data') else {}\r\n+            }\r\n+        }\r\n+    \r\n+    return response\r\n+\r\n+def get_error_code(status_code):\r\n+    \"\"\"Map HTTP status codes to error codes\"\"\"\r\n+    STATUS_CODE_MAP = {\r\n+        400: ErrorTypes.VALIDATION_ERROR,\r\n+        401: ErrorTypes.UNAUTHORIZED,\r\n+        403: ErrorTypes.FORBIDDEN,\r\n+        404: ErrorTypes.NOT_FOUND,\r\n+        500: ErrorTypes.SERVER_ERROR,\r\n+        503: ErrorTypes.SERVICE_ERROR\r\n+    }\r\n+    return STATUS_CODE_MAP.get(status_code, ErrorTypes.UNKNOWN_ERROR)\r\n+\r\n+# Example usage in views:\r\n+# def example_view(request):\r\n+#     try:\r\n+#         # Your logic here\r\n+#         if some_validation_fails:\r\n+#             raise AppError(\r\n+#                 message='Invalid input data',\r\n+#                 code=ErrorTypes.VALIDATION_ERROR,\r\n+#                 data={'field': 'Details about the error'}\r\n+#             )\r\n+#     except Exception as e:\r\n+#         raise  # The middleware will handle it\n\\ No newline at end of file\n"
                }
            ],
            "date": 1733403445817,
            "name": "Commit-0",
            "content": "# solar/middleware/error_handler.py\r\nfrom django.http import JsonResponse\r\nfrom rest_framework import status\r\nfrom rest_framework.views import exception_handler\r\nfrom django.core.exceptions import ValidationError\r\nimport traceback\r\nimport logging\r\n\r\nlogger = logging.getLogger(__name__)\r\n\r\nclass AppError(Exception):\r\n    def __init__(self, message, code, data=None):\r\n        self.message = message\r\n        self.code = code\r\n        self.data = data or {}\r\n        super().__init__(message)\r\n\r\nclass ErrorHandlerMiddleware:\r\n    def __init__(self, get_response):\r\n        self.get_response = get_response\r\n\r\n    def __call__(self, request):\r\n        try:\r\n            response = self.get_response(request)\r\n            return response\r\n        except Exception as e:\r\n            return self.handle_error(e)\r\n\r\n    def handle_error(self, error):\r\n        \"\"\"Convert exceptions to JSON responses matching frontend expectations\"\"\"\r\n        \r\n        # Handle custom AppError\r\n        if isinstance(error, AppError):\r\n            return JsonResponse({\r\n                'success': False,\r\n                'error': {\r\n                    'message': error.message,\r\n                    'code': error.code,\r\n                    'data': error.data\r\n                }\r\n            }, status=self.get_status_code(error.code))\r\n\r\n        # Handle Django ValidationError\r\n        if isinstance(error, ValidationError):\r\n            return JsonResponse({\r\n                'success': False,\r\n                'error': {\r\n                    'message': 'Validation error',\r\n                    'code': 'VALIDATION_ERROR',\r\n                    'data': {\r\n                        'fields': error.message_dict if hasattr(error, 'message_dict') else {'error': error.messages}\r\n                    }\r\n                }\r\n            }, status=status.HTTP_400_BAD_REQUEST)\r\n\r\n        # Handle other exceptions\r\n        logger.error(f\"Unhandled error: {str(error)}\\n{traceback.format_exc()}\")\r\n        return JsonResponse({\r\n            'success': False,\r\n            'error': {\r\n                'message': 'An unexpected error occurred',\r\n                'code': 'INTERNAL_ERROR',\r\n                'data': {'detail': str(error)} if settings.DEBUG else {}\r\n            }\r\n        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\r\n\r\n    def get_status_code(self, error_code):\r\n        \"\"\"Map error codes to HTTP status codes\"\"\"\r\n        ERROR_CODE_MAP = {\r\n            'VALIDATION_ERROR': status.HTTP_400_BAD_REQUEST,\r\n            'UNAUTHORIZED': status.HTTP_401_UNAUTHORIZED,\r\n            'FORBIDDEN': status.HTTP_403_FORBIDDEN,\r\n            'NOT_FOUND': status.HTTP_404_NOT_FOUND,\r\n            'SERVER_ERROR': status.HTTP_500_INTERNAL_SERVER_ERROR,\r\n            'SERVICE_ERROR': status.HTTP_503_SERVICE_UNAVAILABLE,\r\n            'NETWORK_ERROR': status.HTTP_503_SERVICE_UNAVAILABLE,\r\n        }\r\n        return ERROR_CODE_MAP.get(error_code, status.HTTP_500_INTERNAL_SERVER_ERROR)\r\n\r\n# solar/utils/error_utils.py\r\nclass ErrorTypes:\r\n    \"\"\"Error type constants matching frontend error codes\"\"\"\r\n    VALIDATION_ERROR = 'VALIDATION_ERROR'\r\n    UNAUTHORIZED = 'UNAUTHORIZED'\r\n    FORBIDDEN = 'FORBIDDEN'\r\n    NOT_FOUND = 'NOT_FOUND'\r\n    SERVER_ERROR = 'SERVER_ERROR'\r\n    NETWORK_ERROR = 'NETWORK_ERROR'\r\n    SERVICE_ERROR = 'SERVICE_ERROR'\r\n    UNKNOWN_ERROR = 'UNKNOWN_ERROR'\r\n\r\ndef custom_exception_handler(exc, context):\r\n    \"\"\"Custom exception handler for DRF views\"\"\"\r\n    response = exception_handler(exc, context)\r\n    \r\n    if response is not None:\r\n        response.data = {\r\n            'success': False,\r\n            'error': {\r\n                'message': str(exc),\r\n                'code': get_error_code(response.status_code),\r\n                'data': response.data if hasattr(response, 'data') else {}\r\n            }\r\n        }\r\n    \r\n    return response\r\n\r\ndef get_error_code(status_code):\r\n    \"\"\"Map HTTP status codes to error codes\"\"\"\r\n    STATUS_CODE_MAP = {\r\n        400: ErrorTypes.VALIDATION_ERROR,\r\n        401: ErrorTypes.UNAUTHORIZED,\r\n        403: ErrorTypes.FORBIDDEN,\r\n        404: ErrorTypes.NOT_FOUND,\r\n        500: ErrorTypes.SERVER_ERROR,\r\n        503: ErrorTypes.SERVICE_ERROR\r\n    }\r\n    return STATUS_CODE_MAP.get(status_code, ErrorTypes.UNKNOWN_ERROR)\r\n\r\n# Example usage in views:\r\ndef example_view(request):\r\n    try:\r\n        # Your logic here\r\n        if some_validation_fails:\r\n            raise AppError(\r\n                message='Invalid input data',\r\n                code=ErrorTypes.VALIDATION_ERROR,\r\n                data={'field': 'Details about the error'}\r\n            )\r\n    except Exception as e:\r\n        raise  # The middleware will handle it"
        }
    ]
}