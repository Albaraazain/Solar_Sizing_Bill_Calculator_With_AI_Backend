{
    "sourceFile": "solar/middleware/auth_middleware.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1733403135704,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733403344811,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,81 +62,5 @@\n             '/',  # Your frontend routes\r\n         ]\r\n         return any(path.startswith(exempt_path) for exempt_path in EXEMPT_PATHS)\r\n \r\n-# solar/utils/auth.py\r\n-def generate_token(user_id, expiry_hours=24):\r\n-    \"\"\"Generate a new JWT token\"\"\"\r\n-    payload = {\r\n-        'user_id': user_id,\r\n-        'exp': datetime.now() + timedelta(hours=expiry_hours),\r\n-        'iat': datetime.now()\r\n-    }\r\n-    return jwt.encode(payload, settings.SECRET_KEY, algorithm='HS256')\r\n \r\n-def auth_required(view_func):\r\n-    \"\"\"Decorator for views that require authentication\"\"\"\r\n-    @wraps(view_func)\r\n-    def wrapped_view(request, *args, **kwargs):\r\n-        if not hasattr(request, 'user_id'):\r\n-            return JsonResponse({\r\n-                'success': False,\r\n-                'message': 'Authentication required'\r\n-            }, status=401)\r\n-        return view_func(request, *args, **kwargs)\r\n-    return wrapped_view\r\n-\r\n-# solar/views/auth_views.py\r\n-from rest_framework.views import APIView\r\n-from rest_framework.response import Response\r\n-from rest_framework import status\r\n-from django.contrib.auth import authenticate\r\n-from ..utils.auth import generate_token\r\n-\r\n-class LoginView(APIView):\r\n-    def post(self, request):\r\n-        username = request.data.get('username')\r\n-        password = request.data.get('password')\r\n-        \r\n-        user = authenticate(username=username, password=password)\r\n-        if user:\r\n-            token = generate_token(user.id)\r\n-            refresh_token = generate_token(user.id, expiry_hours=168)  # 7 days\r\n-            return Response({\r\n-                'success': True,\r\n-                'data': {\r\n-                    'token': token,\r\n-                    'refreshToken': refresh_token,\r\n-                    'user': {\r\n-                        'id': user.id,\r\n-                        'username': user.username,\r\n-                        'email': user.email\r\n-                    }\r\n-                }\r\n-            })\r\n-        return Response({\r\n-            'success': False,\r\n-            'message': 'Invalid credentials'\r\n-        }, status=status.HTTP_401_UNAUTHORIZED)\r\n-\r\n-class RefreshTokenView(APIView):\r\n-    def post(self, request):\r\n-        refresh_token = request.data.get('refreshToken')\r\n-        try:\r\n-            # Verify refresh token\r\n-            payload = jwt.decode(refresh_token, settings.SECRET_KEY, algorithms=['HS256'])\r\n-            # Generate new tokens\r\n-            new_token = generate_token(payload['user_id'])\r\n-            new_refresh = generate_token(payload['user_id'], expiry_hours=168)\r\n-            \r\n-            return Response({\r\n-                'success': True,\r\n-                'data': {\r\n-                    'token': new_token,\r\n-                    'refreshToken': new_refresh\r\n-                }\r\n-            })\r\n-        except jwt.InvalidTokenError:\r\n-            return Response({\r\n-                'success': False,\r\n-                'message': 'Invalid refresh token'\r\n-            }, status=status.HTTP_401_UNAUTHORIZED)\n\\ No newline at end of file\n"
                }
            ],
            "date": 1733403135704,
            "name": "Commit-0",
            "content": "# solar/middleware/auth_middleware.py\r\nfrom django.http import JsonResponse\r\nfrom django.conf import settings\r\nimport jwt\r\nfrom datetime import datetime, timedelta\r\nfrom functools import wraps\r\n\r\nclass AuthMiddleware:\r\n    def __init__(self, get_response):\r\n        self.get_response = get_response\r\n\r\n    def __call__(self, request):\r\n        # Skip auth for certain paths\r\n        if self.should_skip_auth(request.path):\r\n            return self.get_response(request)\r\n\r\n        # Verify token\r\n        auth_header = request.headers.get('Authorization')\r\n        if not auth_header:\r\n            return JsonResponse({\r\n                'success': False,\r\n                'message': 'Authentication required'\r\n            }, status=401)\r\n\r\n        try:\r\n            # Extract token\r\n            token = auth_header.split(' ')[1]\r\n            # Verify token\r\n            payload = jwt.decode(token, settings.SECRET_KEY, algorithms=['HS256'])\r\n            # Add user info to request\r\n            request.user_id = payload.get('user_id')\r\n            \r\n            # Check if token needs refresh\r\n            exp = datetime.fromtimestamp(payload['exp'])\r\n            if exp - datetime.now() < timedelta(hours=1):\r\n                new_token = generate_token(payload['user_id'])\r\n                response = self.get_response(request)\r\n                response['X-New-Token'] = new_token\r\n                return response\r\n\r\n        except jwt.ExpiredSignatureError:\r\n            return JsonResponse({\r\n                'success': False,\r\n                'message': 'Token has expired'\r\n            }, status=401)\r\n        except (jwt.InvalidTokenError, IndexError):\r\n            return JsonResponse({\r\n                'success': False,\r\n                'message': 'Invalid token'\r\n            }, status=401)\r\n\r\n        return self.get_response(request)\r\n\r\n    def should_skip_auth(self, path):\r\n        \"\"\"Define paths that don't need authentication\"\"\"\r\n        EXEMPT_PATHS = [\r\n            '/api/auth/login',\r\n            '/api/auth/register',\r\n            '/api/auth/refresh',\r\n            '/api/bill/validate',\r\n            '/admin/',\r\n            '/',  # Your frontend routes\r\n        ]\r\n        return any(path.startswith(exempt_path) for exempt_path in EXEMPT_PATHS)\r\n\r\n# solar/utils/auth.py\r\ndef generate_token(user_id, expiry_hours=24):\r\n    \"\"\"Generate a new JWT token\"\"\"\r\n    payload = {\r\n        'user_id': user_id,\r\n        'exp': datetime.now() + timedelta(hours=expiry_hours),\r\n        'iat': datetime.now()\r\n    }\r\n    return jwt.encode(payload, settings.SECRET_KEY, algorithm='HS256')\r\n\r\ndef auth_required(view_func):\r\n    \"\"\"Decorator for views that require authentication\"\"\"\r\n    @wraps(view_func)\r\n    def wrapped_view(request, *args, **kwargs):\r\n        if not hasattr(request, 'user_id'):\r\n            return JsonResponse({\r\n                'success': False,\r\n                'message': 'Authentication required'\r\n            }, status=401)\r\n        return view_func(request, *args, **kwargs)\r\n    return wrapped_view\r\n\r\n# solar/views/auth_views.py\r\nfrom rest_framework.views import APIView\r\nfrom rest_framework.response import Response\r\nfrom rest_framework import status\r\nfrom django.contrib.auth import authenticate\r\nfrom ..utils.auth import generate_token\r\n\r\nclass LoginView(APIView):\r\n    def post(self, request):\r\n        username = request.data.get('username')\r\n        password = request.data.get('password')\r\n        \r\n        user = authenticate(username=username, password=password)\r\n        if user:\r\n            token = generate_token(user.id)\r\n            refresh_token = generate_token(user.id, expiry_hours=168)  # 7 days\r\n            return Response({\r\n                'success': True,\r\n                'data': {\r\n                    'token': token,\r\n                    'refreshToken': refresh_token,\r\n                    'user': {\r\n                        'id': user.id,\r\n                        'username': user.username,\r\n                        'email': user.email\r\n                    }\r\n                }\r\n            })\r\n        return Response({\r\n            'success': False,\r\n            'message': 'Invalid credentials'\r\n        }, status=status.HTTP_401_UNAUTHORIZED)\r\n\r\nclass RefreshTokenView(APIView):\r\n    def post(self, request):\r\n        refresh_token = request.data.get('refreshToken')\r\n        try:\r\n            # Verify refresh token\r\n            payload = jwt.decode(refresh_token, settings.SECRET_KEY, algorithms=['HS256'])\r\n            # Generate new tokens\r\n            new_token = generate_token(payload['user_id'])\r\n            new_refresh = generate_token(payload['user_id'], expiry_hours=168)\r\n            \r\n            return Response({\r\n                'success': True,\r\n                'data': {\r\n                    'token': new_token,\r\n                    'refreshToken': new_refresh\r\n                }\r\n            })\r\n        except jwt.InvalidTokenError:\r\n            return Response({\r\n                'success': False,\r\n                'message': 'Invalid refresh token'\r\n            }, status=status.HTTP_401_UNAUTHORIZED)"
        }
    ]
}