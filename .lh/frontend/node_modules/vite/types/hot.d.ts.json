{
    "sourceFile": "frontend/node_modules/vite/types/hot.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1733415129517,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1733415129517,
            "name": "Commit-0",
            "content": "import type { InferCustomEventPayload } from 'vite/types/customEvent.js'\n\nexport type ModuleNamespace = Record<string, any> & {\n  [Symbol.toStringTag]: 'Module'\n}\n\nexport interface ViteHotContext {\n  readonly data: any\n\n  accept(): void\n  accept(cb: (mod: ModuleNamespace | undefined) => void): void\n  accept(dep: string, cb: (mod: ModuleNamespace | undefined) => void): void\n  accept(\n    deps: readonly string[],\n    cb: (mods: Array<ModuleNamespace | undefined>) => void,\n  ): void\n\n  acceptExports(\n    exportNames: string | readonly string[],\n    cb?: (mod: ModuleNamespace | undefined) => void,\n  ): void\n\n  dispose(cb: (data: any) => void): void\n  prune(cb: (data: any) => void): void\n  invalidate(message?: string): void\n\n  on<T extends string>(\n    event: T,\n    cb: (payload: InferCustomEventPayload<T>) => void,\n  ): void\n  off<T extends string>(\n    event: T,\n    cb: (payload: InferCustomEventPayload<T>) => void,\n  ): void\n  send<T extends string>(event: T, data?: InferCustomEventPayload<T>): void\n}\n"
        }
    ]
}