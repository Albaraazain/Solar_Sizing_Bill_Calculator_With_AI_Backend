{
    "sourceFile": "frontend/src/api/services/quoteApi.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 17,
            "patches": [
                {
                    "date": 1733434436726,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733434446110,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,17 @@\n         }\r\n     }\r\n \r\n     async getQuoteById(quoteId) {\r\n-        return this.get(`/${quoteId}`);\r\n+        try {\r\n+            const url = `${API_CONFIG.ENDPOINTS.QUOTE.GET}${quoteId}/`;\r\n+            console.log('Fetching quote:', url);\r\n+            const response = await this.get(url);\r\n+            return response;\r\n+        } catch (error) {\r\n+            console.error('Error fetching quote:', error);\r\n+            throw error;\r\n+        }\r\n     }\r\n \r\n     async updateQuote(quoteId, updates) {\r\n         return this.put(`/${quoteId}`, updates);\r\n"
                },
                {
                    "date": 1733434458828,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,13 +30,28 @@\n         }\r\n     }\r\n \r\n     async updateQuote(quoteId, updates) {\r\n-        return this.put(`/${quoteId}`, updates);\r\n+        try {\r\n+            const url = `${API_CONFIG.ENDPOINTS.QUOTE.BASE}${quoteId}/`;\r\n+            console.log('Updating quote:', { quoteId, updates });\r\n+            const response = await this.put(url, updates);\r\n+            return response;\r\n+        } catch (error) {\r\n+            console.error('Error updating quote:', error);\r\n+            throw error;\r\n+        }\r\n     }\r\n \r\n     async saveQuote(quote) {\r\n-        return this.post('', quote);\r\n+        try {\r\n+            console.log('Saving quote:', quote);\r\n+            const response = await this.post(API_CONFIG.ENDPOINTS.QUOTE.SAVE, quote);\r\n+            return response;\r\n+        } catch (error) {\r\n+            console.error('Error saving quote:', error);\r\n+            throw error;\r\n+        }\r\n     }\r\n }\r\n \r\n export const quoteApi = new QuoteApi();\r\n"
                },
                {
                    "date": 1733434476597,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n export class QuoteApi extends BaseApiService {\r\n     constructor() {\r\n         super(API_CONFIG.ENDPOINTS.QUOTE.BASE);\r\n     }\r\n-\r\n+    \r\n     async generateQuote(billData) {\r\n         try {\r\n             console.log('Generating quote for bill data:', billData);\r\n             const response = await this.post(API_CONFIG.ENDPOINTS.QUOTE.GENERATE, billData);\r\n"
                },
                {
                    "date": 1733434501752,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,57 @@\n+// src/api/services/quoteApi.js\r\n+import { BaseApiService } from '../base/BaseApiService.js';\r\n+import { API_CONFIG } from '../client/apiConfig.js';\r\n+\r\n+export class QuoteApi extends BaseApiService {\r\n+    constructor() {\r\n+        super(API_CONFIG.ENDPOINTS.QUOTE.BASE);\r\n+    }\r\n+    \r\n+    async generateQuote(billData) {\r\n+        try {\r\n+            console.log('Generating quote for bill data:', billData);\r\n+            const response = await this.post(API_CONFIG.ENDPOINTS.QUOTE.GENERATE, billData);\r\n+            return response;\r\n+        } catch (error) {\r\n+            console.error('Error generating quote:', error);\r\n+            throw error;\r\n+        }\r\n+    }\r\n+\r\n+    async getQuoteById(quoteId) {\r\n+        try {\r\n+            const url = `${API_CONFIG.ENDPOINTS.QUOTE.GET}${quoteId}/`;\r\n+            console.log('Fetching quote:', url);\r\n+            const response = await this.get(url);\r\n+            return response;\r\n+        } catch (error) {\r\n+            console.error('Error fetching quote:', error);\r\n+            throw error;\r\n+        }\r\n+    }\r\n+\r\n+    async updateQuote(quoteId, updates) {\r\n+        try {\r\n+            const url = `${API_CONFIG.ENDPOINTS.QUOTE.BASE}${quoteId}/`;\r\n+            console.log('Updating quote:', { quoteId, updates });\r\n+            const response = await this.put(url, updates);\r\n+            return response;\r\n+        } catch (error) {\r\n+            console.error('Error updating quote:', error);\r\n+            throw error;\r\n+        }\r\n+    }\r\n+\r\n+    async saveQuote(quote) {\r\n+        try {\r\n+            console.log('Saving quote:', quote);\r\n+            const response = await this.post(API_CONFIG.ENDPOINTS.QUOTE.SAVE, quote);\r\n+            return response;\r\n+        } catch (error) {\r\n+            console.error('Error saving quote:', error);\r\n+            throw error;\r\n+        }\r\n+    }\r\n+}\r\n+\r\n+export const quoteApi = new QuoteApi();\r\n"
                },
                {
                    "date": 1733434522846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,61 +54,4 @@\n     }\r\n }\r\n \r\n export const quoteApi = new QuoteApi();\r\n-// src/api/services/quoteApi.js\r\n-import { BaseApiService } from '../base/BaseApiService.js';\r\n-import { API_CONFIG } from '../client/apiConfig.js';\r\n-\r\n-export class QuoteApi extends BaseApiService {\r\n-    constructor() {\r\n-        super(API_CONFIG.ENDPOINTS.QUOTE.BASE);\r\n-    }\r\n-    \r\n-    async generateQuote(billData) {\r\n-        try {\r\n-            console.log('Generating quote for bill data:', billData);\r\n-            const response = await this.post(API_CONFIG.ENDPOINTS.QUOTE.GENERATE, billData);\r\n-            return response;\r\n-        } catch (error) {\r\n-            console.error('Error generating quote:', error);\r\n-            throw error;\r\n-        }\r\n-    }\r\n-\r\n-    async getQuoteById(quoteId) {\r\n-        try {\r\n-            const url = `${API_CONFIG.ENDPOINTS.QUOTE.GET}${quoteId}/`;\r\n-            console.log('Fetching quote:', url);\r\n-            const response = await this.get(url);\r\n-            return response;\r\n-        } catch (error) {\r\n-            console.error('Error fetching quote:', error);\r\n-            throw error;\r\n-        }\r\n-    }\r\n-\r\n-    async updateQuote(quoteId, updates) {\r\n-        try {\r\n-            const url = `${API_CONFIG.ENDPOINTS.QUOTE.BASE}${quoteId}/`;\r\n-            console.log('Updating quote:', { quoteId, updates });\r\n-            const response = await this.put(url, updates);\r\n-            return response;\r\n-        } catch (error) {\r\n-            console.error('Error updating quote:', error);\r\n-            throw error;\r\n-        }\r\n-    }\r\n-\r\n-    async saveQuote(quote) {\r\n-        try {\r\n-            console.log('Saving quote:', quote);\r\n-            const response = await this.post(API_CONFIG.ENDPOINTS.QUOTE.SAVE, quote);\r\n-            return response;\r\n-        } catch (error) {\r\n-            console.error('Error saving quote:', error);\r\n-            throw error;\r\n-        }\r\n-    }\r\n-}\r\n-\r\n-export const quoteApi = new QuoteApi();\r\n"
                },
                {
                    "date": 1733443512224,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,18 @@\n     \r\n     async generateQuote(billData) {\r\n         try {\r\n             console.log('Generating quote for bill data:', billData);\r\n-            const response = await this.post(API_CONFIG.ENDPOINTS.QUOTE.GENERATE, billData);\r\n+            \r\n+            // Ensure billData is properly formatted\r\n+            const formattedBillData = this.formatBillData(billData);\r\n+            \r\n+            const response = await this.post(\r\n+                API_CONFIG.ENDPOINTS.QUOTE.GENERATE,\r\n+                formattedBillData\r\n+            );\r\n+            \r\n+            console.log('Quote generation response:', response);\r\n             return response;\r\n         } catch (error) {\r\n             console.error('Error generating quote:', error);\r\n             throw error;\r\n"
                },
                {
                    "date": 1733443938793,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,7 +60,19 @@\n             console.error('Error saving quote:', error);\r\n             throw error;\r\n         }\r\n     }\r\n+\r\n+    formatBillData(billData) {\r\n+        // Ensure all required fields are present and properly formatted\r\n+        return {\r\n+            reference_number: billData.referenceNumber || billData.reference_number,\r\n+            units_consumed: parseInt(billData.unitsConsumed || billData.units_consumed || 0),\r\n+            amount: parseFloat(billData.amount || 0),\r\n+            customer_name: billData.customerName || billData.customer_name || '',\r\n+            issue_date: billData.issueDate || billData.issue_date || '',\r\n+            due_date: billData.dueDate || billData.due_date || ''\r\n+        };\r\n+    }\r\n }\r\n \r\n export const quoteApi = new QuoteApi();\r\n"
                },
                {
                    "date": 1733444426573,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,17 +62,26 @@\n         }\r\n     }\r\n \r\n     formatBillData(billData) {\r\n-        // Ensure all required fields are present and properly formatted\r\n-        return {\r\n-            reference_number: billData.referenceNumber || billData.reference_number,\r\n-            units_consumed: parseInt(billData.unitsConsumed || billData.units_consumed || 0),\r\n+        // Convert numeric values and ensure proper types\r\n+        const formatted = {\r\n+            reference_number: String(billData.referenceNumber || billData.reference_number || ''),\r\n+            units_consumed: parseFloat(billData.unitsConsumed || billData.units_consumed || 0),\r\n             amount: parseFloat(billData.amount || 0),\r\n-            customer_name: billData.customerName || billData.customer_name || '',\r\n+            customer_name: String(billData.customerName || billData.customer_name || ''),\r\n             issue_date: billData.issueDate || billData.issue_date || '',\r\n-            due_date: billData.dueDate || billData.due_date || ''\r\n+            due_date: billData.dueDate || billData.due_date || '',\r\n+            // Add any additional required fields\r\n+            total_yearly_units: parseFloat(billData.totalYearlyUnits || billData.total_yearly_units || 0)\r\n         };\r\n+\r\n+        // Validate the formatted data\r\n+        if (isNaN(formatted.units_consumed) || isNaN(formatted.amount)) {\r\n+            throw new Error('Invalid numeric values in bill data');\r\n+        }\r\n+\r\n+        return formatted;\r\n     }\r\n }\r\n \r\n export const quoteApi = new QuoteApi();\r\n"
                },
                {
                    "date": 1733444801558,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,98 @@\n+// src/api/services/quoteApi.js\r\n+import { BaseApiService } from '../base/BaseApiService.js';\r\n+import { API_CONFIG } from '../client/apiConfig.js';\r\n+\r\n+export class QuoteApi extends BaseApiService {\r\n+    constructor() {\r\n+        super(API_CONFIG.ENDPOINTS.QUOTE.BASE);\r\n+    }\r\n+    \r\n+    async generateQuote(billData) {\r\n+        try {\r\n+            console.log('Generating quote for bill data:', billData);\r\n+            \r\n+            // Ensure billData is properly formatted\r\n+            const formattedBillData = this.formatBillData(billData);\r\n+            \r\n+            const response = await this.post(\r\n+                API_CONFIG.ENDPOINTS.QUOTE.GENERATE,\r\n+                formattedBillData\r\n+            );\r\n+            \r\n+            console.log('Quote generation response:', response);\r\n+            return response;\r\n+        } catch (error) {\r\n+            console.error('Error generating quote:', error);\r\n+            throw error;\r\n+        }\r\n+    }\r\n+\r\n+    async getQuoteById(quoteId) {\r\n+        try {\r\n+            const url = `${API_CONFIG.ENDPOINTS.QUOTE.GET}${quoteId}/`;\r\n+            console.log('Fetching quote:', url);\r\n+            const response = await this.get(url);\r\n+            return response;\r\n+        } catch (error) {\r\n+            console.error('Error fetching quote:', error);\r\n+            throw error;\r\n+        }\r\n+    }\r\n+\r\n+    async updateQuote(quoteId, updates) {\r\n+        try {\r\n+            const url = `${API_CONFIG.ENDPOINTS.QUOTE.BASE}${quoteId}/`;\r\n+            console.log('Updating quote:', { quoteId, updates });\r\n+            const response = await this.put(url, updates);\r\n+            return response;\r\n+        } catch (error) {\r\n+            console.error('Error updating quote:', error);\r\n+            throw error;\r\n+        }\r\n+    }\r\n+\r\n+    async saveQuote(quote) {\r\n+        try {\r\n+            console.log('Saving quote:', quote);\r\n+            const response = await this.post(API_CONFIG.ENDPOINTS.QUOTE.SAVE, quote);\r\n+            return response;\r\n+        } catch (error) {\r\n+            console.error('Error saving quote:', error);\r\n+            throw error;\r\n+        }\r\n+    }\r\n+\r\n+    formatBillData(billData) {\r\n+        // Extract reference number from various possible locations\r\n+        const referenceNumber = billData.referenceNumber || \r\n+                              billData.reference_number || \r\n+                              billData['Reference Number'] ||\r\n+                              '';\r\n+\r\n+        // Convert numeric values and ensure proper types\r\n+        const formatted = {\r\n+            reference_number: String(referenceNumber).trim(),\r\n+            units_consumed: parseFloat(billData.unitsConsumed || billData.units_consumed || billData['Units Consumed'] || 0),\r\n+            amount: parseFloat(billData['Payable Within Due Date'] || billData.amount || 0),\r\n+            customer_name: String(billData.Name || billData.customerName || billData.customer_name || ''),\r\n+            issue_date: billData['Issue Date'] || billData.issueDate || billData.issue_date || '',\r\n+            due_date: billData['Due Date'] || billData.dueDate || billData.due_date || '',\r\n+            total_yearly_units: parseFloat(billData.totalYearlyUnits || billData.total_yearly_units || \r\n+                              (billData.units_consumed * 12) || 0)\r\n+        };\r\n+\r\n+        // Validate the formatted data\r\n+        const missingFields = [];\r\n+        if (!formatted.reference_number) missingFields.push('reference_number');\r\n+        if (isNaN(formatted.units_consumed)) missingFields.push('units_consumed');\r\n+        if (isNaN(formatted.amount)) missingFields.push('amount');\r\n+\r\n+        if (missingFields.length > 0) {\r\n+            throw new Error(`Missing or invalid required fields: ${missingFields.join(', ')}`);\r\n+        }\r\n+\r\n+        return formatted;\r\n+    }\r\n+}\r\n+\r\n+export const quoteApi = new QuoteApi();\r\n"
                },
                {
                    "date": 1733445017088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,17 +62,25 @@\n         }\r\n     }\r\n \r\n     formatBillData(billData) {\r\n-        // Extract reference number from various possible locations\r\n-        const referenceNumber = billData.referenceNumber || \r\n-                              billData.reference_number || \r\n-                              billData['Reference Number'] ||\r\n-                              '';\r\n+        // Extract reference number and ensure it's a string\r\n+        const referenceNumber = String(\r\n+            billData.referenceNumber || \r\n+            billData.reference_number || \r\n+            billData['Reference Number'] ||\r\n+            ''\r\n+        ).trim();\r\n \r\n+        // Log the received and extracted reference number\r\n+        console.log('Formatting bill data:', {\r\n+            original: billData,\r\n+            extractedRef: referenceNumber\r\n+        });\r\n+\r\n         // Convert numeric values and ensure proper types\r\n         const formatted = {\r\n-            reference_number: String(referenceNumber).trim(),\r\n+            reference_number: referenceNumber,\r\n             units_consumed: parseFloat(billData.unitsConsumed || billData.units_consumed || billData['Units Consumed'] || 0),\r\n             amount: parseFloat(billData['Payable Within Due Date'] || billData.amount || 0),\r\n             customer_name: String(billData.Name || billData.customerName || billData.customer_name || ''),\r\n             issue_date: billData['Issue Date'] || billData.issueDate || billData.issue_date || '',\r\n@@ -80,16 +88,21 @@\n             total_yearly_units: parseFloat(billData.totalYearlyUnits || billData.total_yearly_units || \r\n                               (billData.units_consumed * 12) || 0)\r\n         };\r\n \r\n+        // Detailed validation logging\r\n+        console.log('Formatted bill data:', formatted);\r\n+        \r\n         // Validate the formatted data\r\n         const missingFields = [];\r\n         if (!formatted.reference_number) missingFields.push('reference_number');\r\n         if (isNaN(formatted.units_consumed)) missingFields.push('units_consumed');\r\n         if (isNaN(formatted.amount)) missingFields.push('amount');\r\n \r\n         if (missingFields.length > 0) {\r\n-            throw new Error(`Missing or invalid required fields: ${missingFields.join(', ')}`);\r\n+            const error = `Missing or invalid required fields: ${missingFields.join(', ')}`;\r\n+            console.error(error, formatted);\r\n+            throw new Error(error);\r\n         }\r\n \r\n         return formatted;\r\n     }\r\n"
                },
                {
                    "date": 1733445223616,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,49 +62,40 @@\n         }\r\n     }\r\n \r\n     formatBillData(billData) {\r\n-        // Extract reference number and ensure it's a string\r\n+        // Handle nested data structure\r\n+        const data = billData.data || billData;\r\n+\r\n+        // Extract and format reference number\r\n         const referenceNumber = String(\r\n-            billData.referenceNumber || \r\n-            billData.reference_number || \r\n-            billData['Reference Number'] ||\r\n+            data.referenceNumber || \r\n+            data.reference_number || \r\n             ''\r\n         ).trim();\r\n \r\n-        // Log the received and extracted reference number\r\n-        console.log('Formatting bill data:', {\r\n-            original: billData,\r\n-            extractedRef: referenceNumber\r\n-        });\r\n-\r\n-        // Convert numeric values and ensure proper types\r\n+        // Format the bill data\r\n         const formatted = {\r\n             reference_number: referenceNumber,\r\n-            units_consumed: parseFloat(billData.unitsConsumed || billData.units_consumed || billData['Units Consumed'] || 0),\r\n-            amount: parseFloat(billData['Payable Within Due Date'] || billData.amount || 0),\r\n-            customer_name: String(billData.Name || billData.customerName || billData.customer_name || ''),\r\n-            issue_date: billData['Issue Date'] || billData.issueDate || billData.issue_date || '',\r\n-            due_date: billData['Due Date'] || billData.dueDate || billData.due_date || '',\r\n-            total_yearly_units: parseFloat(billData.totalYearlyUnits || billData.total_yearly_units || \r\n-                              (billData.units_consumed * 12) || 0)\r\n+            units_consumed: parseFloat(data['Units Consumed'] || data.unitsConsumed || 0),\r\n+            amount: parseFloat(data['Payable Within Due Date'] || data.amount || 0),\r\n+            total_yearly_units: parseFloat(data['Total Yearly Units'] || data.totalYearlyUnits || 0),\r\n+            customer_name: String(data['Name'] || data.customerName || ''),\r\n+            issue_date: data['Issue Date'] || data.issueDate || '',\r\n+            due_date: data['Due Date'] || data.dueDate || ''\r\n         };\r\n \r\n-        // Detailed validation logging\r\n-        console.log('Formatted bill data:', formatted);\r\n-        \r\n-        // Validate the formatted data\r\n-        const missingFields = [];\r\n-        if (!formatted.reference_number) missingFields.push('reference_number');\r\n-        if (isNaN(formatted.units_consumed)) missingFields.push('units_consumed');\r\n-        if (isNaN(formatted.amount)) missingFields.push('amount');\r\n+        // Validate required fields\r\n+        const requiredFields = ['units_consumed', 'amount', 'total_yearly_units'];\r\n+        const missingFields = requiredFields.filter(field => \r\n+            !formatted[field] || isNaN(formatted[field]) || formatted[field] <= 0\r\n+        );\r\n \r\n         if (missingFields.length > 0) {\r\n-            const error = `Missing or invalid required fields: ${missingFields.join(', ')}`;\r\n-            console.error(error, formatted);\r\n-            throw new Error(error);\r\n+            throw new Error(`Missing or invalid required fields: ${missingFields.join(', ')}`);\r\n         }\r\n \r\n+        console.log('Formatted bill data:', formatted);\r\n         return formatted;\r\n     }\r\n }\r\n \r\n"
                },
                {
                    "date": 1733445831831,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,18 +65,29 @@\n     formatBillData(billData) {\r\n         // Handle nested data structure\r\n         const data = billData.data || billData;\r\n \r\n-        // Extract and format reference number\r\n+        // Extract reference number from session storage as fallback\r\n+        const sessionRefNumber = sessionStorage.getItem('currentReferenceNumber');\r\n+\r\n+        // Extract and format reference number with multiple fallbacks\r\n         const referenceNumber = String(\r\n             data.referenceNumber || \r\n-            data.reference_number || \r\n+            data.reference_number ||\r\n+            data['Reference Number'] ||\r\n+            sessionRefNumber ||\r\n             ''\r\n         ).trim();\r\n \r\n+        // Validate reference number first\r\n+        if (!referenceNumber) {\r\n+            throw new Error('Reference number is required');\r\n+        }\r\n+\r\n         // Format the bill data\r\n         const formatted = {\r\n             reference_number: referenceNumber,\r\n+            // ...rest of formatting logic remains unchanged...\r\n             units_consumed: parseFloat(data['Units Consumed'] || data.unitsConsumed || 0),\r\n             amount: parseFloat(data['Payable Within Due Date'] || data.amount || 0),\r\n             total_yearly_units: parseFloat(data['Total Yearly Units'] || data.totalYearlyUnits || 0),\r\n             customer_name: String(data['Name'] || data.customerName || ''),\r\n@@ -84,11 +95,12 @@\n             due_date: data['Due Date'] || data.dueDate || ''\r\n         };\r\n \r\n         // Validate required fields\r\n-        const requiredFields = ['units_consumed', 'amount', 'total_yearly_units'];\r\n+        const requiredFields = ['reference_number', 'units_consumed', 'amount', 'total_yearly_units'];\r\n         const missingFields = requiredFields.filter(field => \r\n-            !formatted[field] || isNaN(formatted[field]) || formatted[field] <= 0\r\n+            !formatted[field] || \r\n+            (typeof formatted[field] === 'number' && (isNaN(formatted[field]) || formatted[field] <= 0))\r\n         );\r\n \r\n         if (missingFields.length > 0) {\r\n             throw new Error(`Missing or invalid required fields: ${missingFields.join(', ')}`);\r\n"
                },
                {
                    "date": 1733445840798,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,91 +111,4 @@\n     }\r\n }\r\n \r\n export const quoteApi = new QuoteApi();\r\n-// src/api/services/quoteApi.js\r\n-import { BaseApiService } from '../base/BaseApiService.js';\r\n-import { API_CONFIG } from '../client/apiConfig.js';\r\n-\r\n-export class QuoteApi extends BaseApiService {\r\n-    constructor() {\r\n-        super(API_CONFIG.ENDPOINTS.QUOTE.BASE);\r\n-    }\r\n-    \r\n-    async generateQuote(billData) {\r\n-        try {\r\n-            console.log('Generating quote for bill data:', billData);\r\n-            \r\n-            // Ensure billData is properly formatted\r\n-            const formattedBillData = this.formatBillData(billData);\r\n-            \r\n-            const response = await this.post(\r\n-                API_CONFIG.ENDPOINTS.QUOTE.GENERATE,\r\n-                formattedBillData\r\n-            );\r\n-            \r\n-            console.log('Quote generation response:', response);\r\n-            return response;\r\n-        } catch (error) {\r\n-            console.error('Error generating quote:', error);\r\n-            throw error;\r\n-        }\r\n-    }\r\n-\r\n-    async getQuoteById(quoteId) {\r\n-        try {\r\n-            const url = `${API_CONFIG.ENDPOINTS.QUOTE.GET}${quoteId}/`;\r\n-            console.log('Fetching quote:', url);\r\n-            const response = await this.get(url);\r\n-            return response;\r\n-        } catch (error) {\r\n-            console.error('Error fetching quote:', error);\r\n-            throw error;\r\n-        }\r\n-    }\r\n-\r\n-    async updateQuote(quoteId, updates) {\r\n-        try {\r\n-            const url = `${API_CONFIG.ENDPOINTS.QUOTE.BASE}${quoteId}/`;\r\n-            console.log('Updating quote:', { quoteId, updates });\r\n-            const response = await this.put(url, updates);\r\n-            return response;\r\n-        } catch (error) {\r\n-            console.error('Error updating quote:', error);\r\n-            throw error;\r\n-        }\r\n-    }\r\n-\r\n-    async saveQuote(quote) {\r\n-        try {\r\n-            console.log('Saving quote:', quote);\r\n-            const response = await this.post(API_CONFIG.ENDPOINTS.QUOTE.SAVE, quote);\r\n-            return response;\r\n-        } catch (error) {\r\n-            console.error('Error saving quote:', error);\r\n-            throw error;\r\n-        }\r\n-    }\r\n-\r\n-    formatBillData(billData) {\r\n-        // Convert numeric values and ensure proper types\r\n-        const formatted = {\r\n-            reference_number: String(billData.referenceNumber || billData.reference_number || ''),\r\n-            units_consumed: parseFloat(billData.unitsConsumed || billData.units_consumed || 0),\r\n-            amount: parseFloat(billData.amount || 0),\r\n-            customer_name: String(billData.customerName || billData.customer_name || ''),\r\n-            issue_date: billData.issueDate || billData.issue_date || '',\r\n-            due_date: billData.dueDate || billData.due_date || '',\r\n-            // Add any additional required fields\r\n-            total_yearly_units: parseFloat(billData.totalYearlyUnits || billData.total_yearly_units || 0)\r\n-        };\r\n-\r\n-        // Validate the formatted data\r\n-        if (isNaN(formatted.units_consumed) || isNaN(formatted.amount)) {\r\n-            throw new Error('Invalid numeric values in bill data');\r\n-        }\r\n-\r\n-        return formatted;\r\n-    }\r\n-}\r\n-\r\n-export const quoteApi = new QuoteApi();\r\n"
                },
                {
                    "date": 1733445899195,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,49 +64,40 @@\n \r\n     formatBillData(billData) {\r\n         // Handle nested data structure\r\n         const data = billData.data || billData;\r\n-\r\n-        // Extract reference number from session storage as fallback\r\n-        const sessionRefNumber = sessionStorage.getItem('currentReferenceNumber');\r\n-\r\n-        // Extract and format reference number with multiple fallbacks\r\n+    \r\n+        // Extract and format reference number - try snake_case first (API format)\r\n         const referenceNumber = String(\r\n-            data.referenceNumber || \r\n-            data.reference_number ||\r\n-            data['Reference Number'] ||\r\n-            sessionRefNumber ||\r\n+            data.reference_number || // API format\r\n+            data.referenceNumber ||  // JavaScript format\r\n             ''\r\n         ).trim();\r\n-\r\n-        // Validate reference number first\r\n-        if (!referenceNumber) {\r\n-            throw new Error('Reference number is required');\r\n-        }\r\n-\r\n+    \r\n+        console.log('Formatting bill data:', data);\r\n+        console.log('Reference number found:', referenceNumber);\r\n+    \r\n         // Format the bill data\r\n         const formatted = {\r\n             reference_number: referenceNumber,\r\n-            // ...rest of formatting logic remains unchanged...\r\n             units_consumed: parseFloat(data['Units Consumed'] || data.unitsConsumed || 0),\r\n             amount: parseFloat(data['Payable Within Due Date'] || data.amount || 0),\r\n             total_yearly_units: parseFloat(data['Total Yearly Units'] || data.totalYearlyUnits || 0),\r\n             customer_name: String(data['Name'] || data.customerName || ''),\r\n             issue_date: data['Issue Date'] || data.issueDate || '',\r\n             due_date: data['Due Date'] || data.dueDate || ''\r\n         };\r\n-\r\n+    \r\n         // Validate required fields\r\n         const requiredFields = ['reference_number', 'units_consumed', 'amount', 'total_yearly_units'];\r\n         const missingFields = requiredFields.filter(field => \r\n-            !formatted[field] || \r\n-            (typeof formatted[field] === 'number' && (isNaN(formatted[field]) || formatted[field] <= 0))\r\n+            !formatted[field] || isNaN(formatted[field]) || formatted[field] <= 0\r\n         );\r\n-\r\n+    \r\n         if (missingFields.length > 0) {\r\n             throw new Error(`Missing or invalid required fields: ${missingFields.join(', ')}`);\r\n         }\r\n-\r\n+    \r\n         console.log('Formatted bill data:', formatted);\r\n         return formatted;\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1733445909472,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,105 @@\n+// src/api/services/quoteApi.js\r\n+import { BaseApiService } from '../base/BaseApiService.js';\r\n+import { API_CONFIG } from '../client/apiConfig.js';\r\n+\r\n+export class QuoteApi extends BaseApiService {\r\n+    constructor() {\r\n+        super(API_CONFIG.ENDPOINTS.QUOTE.BASE);\r\n+    }\r\n+    \r\n+    async generateQuote(billData) {\r\n+        try {\r\n+            console.log('Generating quote for bill data:', billData);\r\n+            \r\n+            // Ensure billData is properly formatted\r\n+            const formattedBillData = this.formatBillData(billData);\r\n+            \r\n+            const response = await this.post(\r\n+                API_CONFIG.ENDPOINTS.QUOTE.GENERATE,\r\n+                formattedBillData\r\n+            );\r\n+            \r\n+            console.log('Quote generation response:', response);\r\n+            return response;\r\n+        } catch (error) {\r\n+            console.error('Error generating quote:', error);\r\n+            throw error;\r\n+        }\r\n+    }\r\n+\r\n+    async getQuoteById(quoteId) {\r\n+        try {\r\n+            const url = `${API_CONFIG.ENDPOINTS.QUOTE.GET}${quoteId}/`;\r\n+            console.log('Fetching quote:', url);\r\n+            const response = await this.get(url);\r\n+            return response;\r\n+        } catch (error) {\r\n+            console.error('Error fetching quote:', error);\r\n+            throw error;\r\n+        }\r\n+    }\r\n+\r\n+    async updateQuote(quoteId, updates) {\r\n+        try {\r\n+            const url = `${API_CONFIG.ENDPOINTS.QUOTE.BASE}${quoteId}/`;\r\n+            console.log('Updating quote:', { quoteId, updates });\r\n+            const response = await this.put(url, updates);\r\n+            return response;\r\n+        } catch (error) {\r\n+            console.error('Error updating quote:', error);\r\n+            throw error;\r\n+        }\r\n+    }\r\n+\r\n+    async saveQuote(quote) {\r\n+        try {\r\n+            console.log('Saving quote:', quote);\r\n+            const response = await this.post(API_CONFIG.ENDPOINTS.QUOTE.SAVE, quote);\r\n+            return response;\r\n+        } catch (error) {\r\n+            console.error('Error saving quote:', error);\r\n+            throw error;\r\n+        }\r\n+    }\r\n+\r\n+    formatBillData(billData) {\r\n+        // Handle nested data structure\r\n+        const data = billData.data || billData;\r\n+    \r\n+        // Extract and format reference number - try snake_case first (API format)\r\n+        const referenceNumber = String(\r\n+            data.reference_number || // API format\r\n+            data.referenceNumber ||  // JavaScript format\r\n+            ''\r\n+        ).trim();\r\n+    \r\n+        console.log('Formatting bill data:', data);\r\n+        console.log('Reference number found:', referenceNumber);\r\n+    \r\n+        // Format the bill data\r\n+        const formatted = {\r\n+            reference_number: referenceNumber,\r\n+            units_consumed: parseFloat(data['Units Consumed'] || data.unitsConsumed || 0),\r\n+            amount: parseFloat(data['Payable Within Due Date'] || data.amount || 0),\r\n+            total_yearly_units: parseFloat(data['Total Yearly Units'] || data.totalYearlyUnits || 0),\r\n+            customer_name: String(data['Name'] || data.customerName || ''),\r\n+            issue_date: data['Issue Date'] || data.issueDate || '',\r\n+            due_date: data['Due Date'] || data.dueDate || ''\r\n+        };\r\n+    \r\n+        // Validate required fields\r\n+        const requiredFields = ['reference_number', 'units_consumed', 'amount', 'total_yearly_units'];\r\n+        const missingFields = requiredFields.filter(field => \r\n+            !formatted[field] || isNaN(formatted[field]) || formatted[field] <= 0\r\n+        );\r\n+    \r\n+        if (missingFields.length > 0) {\r\n+            throw new Error(`Missing or invalid required fields: ${missingFields.join(', ')}`);\r\n+        }\r\n+    \r\n+        console.log('Formatted bill data:', formatted);\r\n+        return formatted;\r\n+    }\r\n+}\r\n+\r\n+export const quoteApi = new QuoteApi();\r\n"
                },
                {
                    "date": 1733446010958,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,146 +65,47 @@\n     formatBillData(billData) {\r\n         // Handle nested data structure\r\n         const data = billData.data || billData;\r\n     \r\n-        // Extract and format reference number - try snake_case first (API format)\r\n-        const referenceNumber = String(\r\n-            data.reference_number || // API format\r\n-            data.referenceNumber ||  // JavaScript format\r\n-            ''\r\n-        ).trim();\r\n+        // Format dates to ISO format\r\n+        const formatDate = (dateStr) => {\r\n+            if (!dateStr) return '';\r\n+            try {\r\n+                return new Date(dateStr).toISOString().split('T')[0];\r\n+            } catch (e) {\r\n+                console.error('Date parsing error:', e);\r\n+                return dateStr;\r\n+            }\r\n+        };\r\n     \r\n-        console.log('Formatting bill data:', data);\r\n-        console.log('Reference number found:', referenceNumber);\r\n-    \r\n         // Format the bill data\r\n         const formatted = {\r\n-            reference_number: referenceNumber,\r\n-            units_consumed: parseFloat(data['Units Consumed'] || data.unitsConsumed || 0),\r\n-            amount: parseFloat(data['Payable Within Due Date'] || data.amount || 0),\r\n-            total_yearly_units: parseFloat(data['Total Yearly Units'] || data.totalYearlyUnits || 0),\r\n+            reference_number: String(data.reference_number || data.referenceNumber || '').trim(),\r\n+            units_consumed: Number(data['Units Consumed'] || data.unitsConsumed || 0),\r\n+            amount: Number(data['Payable Within Due Date'] || data.amount || 0),\r\n+            total_yearly_units: Number(data['Total Yearly Units'] || data.totalYearlyUnits || 0),\r\n             customer_name: String(data['Name'] || data.customerName || ''),\r\n-            issue_date: data['Issue Date'] || data.issueDate || '',\r\n-            due_date: data['Due Date'] || data.dueDate || ''\r\n+            issue_date: formatDate(data['Issue Date'] || data.issueDate),\r\n+            due_date: formatDate(data['Due Date'] || data.dueDate)\r\n         };\r\n     \r\n+        // Add debug logging\r\n+        console.log('Formatted data for quote generation:', formatted);\r\n+    \r\n         // Validate required fields\r\n         const requiredFields = ['reference_number', 'units_consumed', 'amount', 'total_yearly_units'];\r\n         const missingFields = requiredFields.filter(field => \r\n-            !formatted[field] || isNaN(formatted[field]) || formatted[field] <= 0\r\n+            !formatted[field] || \r\n+            (typeof formatted[field] === 'number' && \r\n+            (isNaN(formatted[field]) || formatted[field] <= 0))\r\n         );\r\n     \r\n         if (missingFields.length > 0) {\r\n             throw new Error(`Missing or invalid required fields: ${missingFields.join(', ')}`);\r\n         }\r\n     \r\n-        console.log('Formatted bill data:', formatted);\r\n         return formatted;\r\n     }\r\n-}\r\n-\r\n-export const quoteApi = new QuoteApi();\r\n-// src/api/services/quoteApi.js\r\n-import { BaseApiService } from '../base/BaseApiService.js';\r\n-import { API_CONFIG } from '../client/apiConfig.js';\r\n-\r\n-export class QuoteApi extends BaseApiService {\r\n-    constructor() {\r\n-        super(API_CONFIG.ENDPOINTS.QUOTE.BASE);\r\n-    }\r\n     \r\n-    async generateQuote(billData) {\r\n-        try {\r\n-            console.log('Generating quote for bill data:', billData);\r\n-            \r\n-            // Ensure billData is properly formatted\r\n-            const formattedBillData = this.formatBillData(billData);\r\n-            \r\n-            const response = await this.post(\r\n-                API_CONFIG.ENDPOINTS.QUOTE.GENERATE,\r\n-                formattedBillData\r\n-            );\r\n-            \r\n-            console.log('Quote generation response:', response);\r\n-            return response;\r\n-        } catch (error) {\r\n-            console.error('Error generating quote:', error);\r\n-            throw error;\r\n-        }\r\n-    }\r\n-\r\n-    async getQuoteById(quoteId) {\r\n-        try {\r\n-            const url = `${API_CONFIG.ENDPOINTS.QUOTE.GET}${quoteId}/`;\r\n-            console.log('Fetching quote:', url);\r\n-            const response = await this.get(url);\r\n-            return response;\r\n-        } catch (error) {\r\n-            console.error('Error fetching quote:', error);\r\n-            throw error;\r\n-        }\r\n-    }\r\n-\r\n-    async updateQuote(quoteId, updates) {\r\n-        try {\r\n-            const url = `${API_CONFIG.ENDPOINTS.QUOTE.BASE}${quoteId}/`;\r\n-            console.log('Updating quote:', { quoteId, updates });\r\n-            const response = await this.put(url, updates);\r\n-            return response;\r\n-        } catch (error) {\r\n-            console.error('Error updating quote:', error);\r\n-            throw error;\r\n-        }\r\n-    }\r\n-\r\n-    async saveQuote(quote) {\r\n-        try {\r\n-            console.log('Saving quote:', quote);\r\n-            const response = await this.post(API_CONFIG.ENDPOINTS.QUOTE.SAVE, quote);\r\n-            return response;\r\n-        } catch (error) {\r\n-            console.error('Error saving quote:', error);\r\n-            throw error;\r\n-        }\r\n-    }\r\n-\r\n-    formatBillData(billData) {\r\n-        // Handle nested data structure\r\n-        const data = billData.data || billData;\r\n-    \r\n-        // Extract and format reference number - try snake_case first (API format)\r\n-        const referenceNumber = String(\r\n-            data.reference_number || // API format\r\n-            data.referenceNumber ||  // JavaScript format\r\n-            ''\r\n-        ).trim();\r\n-    \r\n-        console.log('Formatting bill data:', data);\r\n-        console.log('Reference number found:', referenceNumber);\r\n-    \r\n-        // Format the bill data\r\n-        const formatted = {\r\n-            reference_number: referenceNumber,\r\n-            units_consumed: parseFloat(data['Units Consumed'] || data.unitsConsumed || 0),\r\n-            amount: parseFloat(data['Payable Within Due Date'] || data.amount || 0),\r\n-            total_yearly_units: parseFloat(data['Total Yearly Units'] || data.totalYearlyUnits || 0),\r\n-            customer_name: String(data['Name'] || data.customerName || ''),\r\n-            issue_date: data['Issue Date'] || data.issueDate || '',\r\n-            due_date: data['Due Date'] || data.dueDate || ''\r\n-        };\r\n-    \r\n-        // Validate required fields\r\n-        const requiredFields = ['reference_number', 'units_consumed', 'amount', 'total_yearly_units'];\r\n-        const missingFields = requiredFields.filter(field => \r\n-            !formatted[field] || isNaN(formatted[field]) || formatted[field] <= 0\r\n-        );\r\n-    \r\n-        if (missingFields.length > 0) {\r\n-            throw new Error(`Missing or invalid required fields: ${missingFields.join(', ')}`);\r\n-        }\r\n-    \r\n-        console.log('Formatted bill data:', formatted);\r\n-        return formatted;\r\n-    }\r\n }\r\n \r\n export const quoteApi = new QuoteApi();\r\n"
                },
                {
                    "date": 1733446161072,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,26 +8,37 @@\n     }\r\n     \r\n     async generateQuote(billData) {\r\n         try {\r\n-            console.log('Generating quote for bill data:', billData);\r\n+            console.log('Raw bill data received:', billData);\r\n             \r\n-            // Ensure billData is properly formatted\r\n-            const formattedBillData = this.formatBillData(billData);\r\n+            // Format bill data\r\n+            const formattedData = this.formatBillData(billData);\r\n+            console.log('Formatted data before API call:', formattedData);\r\n             \r\n+            // Log the exact request configuration\r\n+            console.log('Quote generation request config:', {\r\n+                url: `${API_CONFIG.ENDPOINTS.QUOTE.GENERATE}`,\r\n+                method: 'POST',\r\n+                data: formattedData\r\n+            });\r\n+    \r\n             const response = await this.post(\r\n                 API_CONFIG.ENDPOINTS.QUOTE.GENERATE,\r\n-                formattedBillData\r\n+                formattedData\r\n             );\r\n             \r\n-            console.log('Quote generation response:', response);\r\n             return response;\r\n         } catch (error) {\r\n-            console.error('Error generating quote:', error);\r\n+            console.error('Error generating quote:', {\r\n+                message: error.message,\r\n+                response: error.response?.data,\r\n+                status: error.response?.status,\r\n+                fullError: error\r\n+            });\r\n             throw error;\r\n         }\r\n     }\r\n-\r\n     async getQuoteById(quoteId) {\r\n         try {\r\n             const url = `${API_CONFIG.ENDPOINTS.QUOTE.GET}${quoteId}/`;\r\n             console.log('Fetching quote:', url);\r\n@@ -104,8 +115,8 @@\n         }\r\n     \r\n         return formatted;\r\n     }\r\n-    \r\n+\r\n }\r\n \r\n export const quoteApi = new QuoteApi();\r\n"
                }
            ],
            "date": 1733434436726,
            "name": "Commit-0",
            "content": "// src/api/services/quoteApi.js\r\nimport { BaseApiService } from '../base/BaseApiService.js';\r\nimport { API_CONFIG } from '../client/apiConfig.js';\r\n\r\nexport class QuoteApi extends BaseApiService {\r\n    constructor() {\r\n        super(API_CONFIG.ENDPOINTS.QUOTE.BASE);\r\n    }\r\n\r\n    async generateQuote(billData) {\r\n        try {\r\n            console.log('Generating quote for bill data:', billData);\r\n            const response = await this.post(API_CONFIG.ENDPOINTS.QUOTE.GENERATE, billData);\r\n            return response;\r\n        } catch (error) {\r\n            console.error('Error generating quote:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async getQuoteById(quoteId) {\r\n        return this.get(`/${quoteId}`);\r\n    }\r\n\r\n    async updateQuote(quoteId, updates) {\r\n        return this.put(`/${quoteId}`, updates);\r\n    }\r\n\r\n    async saveQuote(quote) {\r\n        return this.post('', quote);\r\n    }\r\n}\r\n\r\nexport const quoteApi = new QuoteApi();\r\n"
        }
    ]
}