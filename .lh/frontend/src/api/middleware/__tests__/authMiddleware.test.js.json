{
    "sourceFile": "frontend/src/api/middleware/__tests__/authMiddleware.test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1733438375274,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1733438375274,
            "name": "Commit-0",
            "content": "// src/api/middleware/__tests__/authMiddleware.test.js\r\nimport { jest, expect, describe, test, beforeEach } from '@jest/globals';\r\nimport { AuthMiddleware } from '../authMiddleware.js';\r\nimport { eventBus } from '../../../core/events/EventBus.js';\r\nimport { global } from '@jest/globals';\r\n\r\njest.mock('../../../core/events/EventBus.js');\r\n\r\n// Mock localStorage\r\nconst localStorageMock = (() => {\r\n    let store = {};\r\n    return {\r\n        getItem: jest.fn(key => store[key] || null),\r\n        setItem: jest.fn((key, value) => {\r\n            store[key] = value.toString();\r\n        }),\r\n        removeItem: jest.fn(key => {\r\n            delete store[key];\r\n        }),\r\n        clear: jest.fn(() => {\r\n            store = {};\r\n        })\r\n    };\r\n})();\r\nObject.defineProperty(global, 'localStorage', { value: localStorageMock });\r\n\r\n// Mock fetch for testing refresh token\r\nglobal.fetch = jest.fn();\r\n\r\ndescribe('AuthMiddleware', () => {\r\n    const mockToken = 'test-token';\r\n    const mockRefreshToken = 'refresh-token';\r\n\r\n    beforeEach(() => {\r\n        localStorage.clear();\r\n        jest.clearAllMocks();\r\n    });\r\n\r\n    describe('Token Management', () => {\r\n        test('sets and gets token correctly', () => {\r\n            AuthMiddleware.setToken(mockToken);\r\n\r\n            expect(localStorage.setItem).toHaveBeenCalledWith(AuthMiddleware.TOKEN_KEY, mockToken);\r\n            expect(AuthMiddleware.getToken()).toBe(mockToken);\r\n        });\r\n\r\n        test('sets both token and refresh token', () => {\r\n            AuthMiddleware.setToken(mockToken, mockRefreshToken);\r\n\r\n            expect(localStorage.setItem).toHaveBeenCalledWith(AuthMiddleware.TOKEN_KEY, mockToken);\r\n            expect(localStorage.setItem).toHaveBeenCalledWith(AuthMiddleware.REFRESH_TOKEN_KEY, mockRefreshToken);\r\n        });\r\n\r\n        test('clears tokens correctly', () => {\r\n            AuthMiddleware.setToken(mockToken, mockRefreshToken);\r\n            AuthMiddleware.clearTokens();\r\n\r\n            expect(localStorage.removeItem).toHaveBeenCalledWith(AuthMiddleware.TOKEN_KEY);\r\n            expect(localStorage.removeItem).toHaveBeenCalledWith(AuthMiddleware.REFRESH_TOKEN_KEY);\r\n        });\r\n    });\r\n\r\n    describe('Authentication Status', () => {\r\n        test('isAuthenticated returns true when token exists', () => {\r\n            AuthMiddleware.setToken(mockToken);\r\n            expect(AuthMiddleware.isAuthenticated()).toBe(true);\r\n        });\r\n\r\n        test('isAuthenticated returns false when no token exists', () => {\r\n            expect(AuthMiddleware.isAuthenticated()).toBe(false);\r\n        });\r\n    });\r\n\r\n    describe('Auth Headers', () => {\r\n        test('getAuthHeader returns correct bearer token', () => {\r\n            AuthMiddleware.setToken(mockToken);\r\n            expect(AuthMiddleware.getAuthHeader()).toBe(`Bearer ${mockToken}`);\r\n        });\r\n\r\n        test('getAuthHeader returns null when no token exists', () => {\r\n            expect(AuthMiddleware.getAuthHeader()).toBe(null);\r\n        });\r\n    });\r\n\r\n    describe('Error Handling', () => {\r\n        test('handleAuthError clears tokens and publishes event on 401', async () => {\r\n            const error = {\r\n                response: { status: 401 }\r\n            };\r\n\r\n            try {\r\n                AuthMiddleware.handleAuthError(error);\r\n            } catch (e) {\r\n                expect(localStorage.removeItem).toHaveBeenCalled();\r\n                expect(eventBus.publish).toHaveBeenCalledWith('auth:unauthorized');\r\n                expect(e.code).toBe('AUTH_REQUIRED');\r\n            }\r\n        });\r\n    });\r\n\r\n    describe('Token Refresh', () => {\r\n        test('refreshTokenIfNeeded succeeds with valid refresh token', async () => {\r\n            const newToken = 'new-token';\r\n            const newRefreshToken = 'new-refresh-token';\r\n\r\n            AuthMiddleware.setToken(mockToken, mockRefreshToken);\r\n\r\n            global.fetch.mockImplementationOnce(() =>\r\n                Promise.resolve({\r\n                    ok: true,\r\n                    json: () => Promise.resolve({ token: newToken, newRefreshToken })\r\n                })\r\n            );\r\n\r\n            const result = await AuthMiddleware.refreshTokenIfNeeded();\r\n\r\n            expect(result).toBe(true);\r\n            expect(localStorage.setItem).toHaveBeenCalledWith(AuthMiddleware.TOKEN_KEY, newToken);\r\n        });\r\n\r\n        test('refreshTokenIfNeeded handles failure gracefully', async () => {\r\n            AuthMiddleware.setToken(mockToken, mockRefreshToken);\r\n\r\n            global.fetch.mockImplementationOnce(() =>\r\n                Promise.resolve({\r\n                    ok: false\r\n                })\r\n            );\r\n\r\n            const result = await AuthMiddleware.refreshTokenIfNeeded();\r\n\r\n            expect(result).toBe(false);\r\n            expect(eventBus.publish).toHaveBeenCalledWith('auth:session-expired');\r\n        });\r\n    });\r\n});\r\n"
        }
    ]
}