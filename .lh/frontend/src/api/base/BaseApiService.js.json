{
    "sourceFile": "frontend/src/api/base/BaseApiService.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1733434072296,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733434116048,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,66 @@\n+// src/api/base/BaseApiService.js\r\n+import axiosClient from '../client/axiosClient.js';\r\n+import { ErrorHandler } from '../../core/utils/ErrorHandler.js';\r\n+import { AppError } from '../../core/utils/ErrorHandler.js';\r\n+\r\n+export class BaseApiService {\r\n+    constructor(baseURL = '') {\r\n+        this.baseURL = baseURL;\r\n+    }\r\n+\r\n+    async get(endpoint, config = {}) {\r\n+        try {\r\n+            const response = await axiosClient.get(`${this.baseURL}${endpoint}`, config);\r\n+            return this._formatResponse(response);\r\n+        } catch (error) {\r\n+            throw this.handleError(error);\r\n+        }\r\n+    }\r\n+\r\n+    async post(endpoint, data = {}, config = {}) {\r\n+        try {\r\n+            const response = await axiosClient.post(`${this.baseURL}${endpoint}`, data, config);\r\n+            return this._formatResponse(response);\r\n+        } catch (error) {\r\n+            throw this.handleError(error);\r\n+        }\r\n+    }\r\n+\r\n+    async put(endpoint, data = {}, config = {}) {\r\n+        try {\r\n+            const response = await axiosClient.put(`${this.baseURL}${endpoint}`, data, config);\r\n+            return this._formatResponse(response);\r\n+        } catch (error) {\r\n+            throw this.handleError(error);\r\n+        }\r\n+    }\r\n+\r\n+    async delete(endpoint, config = {}) {\r\n+        try {\r\n+            const response = await axiosClient.delete(`${this.baseURL}${endpoint}`, config);\r\n+            return this._formatResponse(response);\r\n+        } catch (error) {\r\n+            throw this.handleError(error);\r\n+        }\r\n+    }\r\n+\r\n+    handleError(error) {\r\n+        const { response } = error;\r\n+        if (response) {\r\n+            const { status, data } = response;\r\n+            switch (status) {\r\n+                case 400:\r\n+                    return new AppError(data.message || 'Invalid request', 'BAD_REQUEST', data);\r\n+                case 401:\r\n+                    return new AppError('Unauthorized access', 'UNAUTHORIZED');\r\n+                case 404:\r\n+                    return new AppError('Resource not found', 'NOT_FOUND');\r\n+                case 500:\r\n+                    return new AppError('Server error', 'SERVER_ERROR');\r\n+                default:\r\n+                    return new AppError('An unexpected error occurred', 'UNKNOWN_ERROR', { originalError: error });\r\n+            }\r\n+        }\r\n+        return new AppError('Network error', 'NETWORK_ERROR', { originalError: error });\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1733434130275,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,71 +43,19 @@\n             throw this.handleError(error);\r\n         }\r\n     }\r\n \r\n-    handleError(error) {\r\n-        const { response } = error;\r\n-        if (response) {\r\n-            const { status, data } = response;\r\n-            switch (status) {\r\n-                case 400:\r\n-                    return new AppError(data.message || 'Invalid request', 'BAD_REQUEST', data);\r\n-                case 401:\r\n-                    return new AppError('Unauthorized access', 'UNAUTHORIZED');\r\n-                case 404:\r\n-                    return new AppError('Resource not found', 'NOT_FOUND');\r\n-                case 500:\r\n-                    return new AppError('Server error', 'SERVER_ERROR');\r\n-                default:\r\n-                    return new AppError('An unexpected error occurred', 'UNKNOWN_ERROR', { originalError: error });\r\n-            }\r\n-        }\r\n-        return new AppError('Network error', 'NETWORK_ERROR', { originalError: error });\r\n+    _formatResponse(response) {\r\n+        // Ensure consistent response structure\r\n+        return {\r\n+            success: true,\r\n+            data: response.data,\r\n+            status: response.status,\r\n+            headers: response.headers\r\n+        };\r\n     }\r\n-}\r\n-// src/api/base/BaseApiService.js\r\n-import axiosClient from '../client/axiosClient.js';\r\n-import { ErrorHandler } from '../../core/utils/ErrorHandler.js';\r\n-import { AppError } from '../../core/utils/ErrorHandler.js';\r\n \r\n-export class BaseApiService {\r\n-    constructor(baseURL = '') {\r\n-        this.baseURL = baseURL;\r\n-    }\r\n \r\n-    async get(endpoint, config = {}) {\r\n-        try {\r\n-            const response = await axiosClient.get(`${this.baseURL}${endpoint}`, config);\r\n-            return this._formatResponse(response);\r\n-        } catch (error) {\r\n-            throw this.handleError(error);\r\n-        }\r\n-    }\r\n-\r\n-    async post(endpoint, data = {}, config = {}) {\r\n-        try {\r\n-            return await axiosClient.post(`${this.baseURL}${endpoint}`, data, config);\r\n-        } catch (error) {\r\n-            throw this.handleError(error);\r\n-        }\r\n-    }\r\n-\r\n-    async put(endpoint, data = {}, config = {}) {\r\n-        try {\r\n-            return await axiosClient.put(`${this.baseURL}${endpoint}`, data, config);\r\n-        } catch (error) {\r\n-            throw this.handleError(error);\r\n-        }\r\n-    }\r\n-\r\n-    async delete(endpoint, config = {}) {\r\n-        try {\r\n-            return await axiosClient.delete(`${this.baseURL}${endpoint}`, config);\r\n-        } catch (error) {\r\n-            throw this.handleError(error);\r\n-        }\r\n-    }\r\n-\r\n     handleError(error) {\r\n         const { response } = error;\r\n         if (response) {\r\n             const { status, data } = response;\r\n"
                },
                {
                    "date": 1733434141403,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,5 +73,6 @@\n             }\r\n         }\r\n         return new AppError('Network error', 'NETWORK_ERROR', { originalError: error });\r\n     }\r\n+\r\n }\r\n"
                },
                {
                    "date": 1733436748588,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,11 +18,15 @@\n     }\r\n \r\n     async post(endpoint, data = {}, config = {}) {\r\n         try {\r\n-            const response = await axiosClient.post(`${this.baseURL}${endpoint}`, data, config);\r\n+            const url = `${this.baseURL}${endpoint}`;\r\n+            console.log('Making POST request to:', url);\r\n+            console.log('Request data:', data);\r\n+            const response = await axiosClient.post(url, data, config);\r\n             return this._formatResponse(response);\r\n         } catch (error) {\r\n+            console.error('POST request failed:', error);\r\n             throw this.handleError(error);\r\n         }\r\n     }\r\n \r\n"
                },
                {
                    "date": 1733437240982,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,19 +18,23 @@\n     }\r\n \r\n     async post(endpoint, data = {}, config = {}) {\r\n         try {\r\n-            const url = `${this.baseURL}${endpoint}`;\r\n+            // Make sure there's no double slash when constructing the URL\r\n+            const url = `${this.baseURL}${endpoint}`.replace(/\\/+/g, '/');\r\n             console.log('Making POST request to:', url);\r\n+            console.log('Full URL:', `${API_CONFIG.BASE_URL}${url}`);\r\n             console.log('Request data:', data);\r\n+            \r\n             const response = await axiosClient.post(url, data, config);\r\n             return this._formatResponse(response);\r\n         } catch (error) {\r\n             console.error('POST request failed:', error);\r\n             throw this.handleError(error);\r\n         }\r\n     }\r\n \r\n+    \r\n     async put(endpoint, data = {}, config = {}) {\r\n         try {\r\n             const response = await axiosClient.put(`${this.baseURL}${endpoint}`, data, config);\r\n             return this._formatResponse(response);\r\n"
                },
                {
                    "date": 1733438077146,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n // src/api/base/BaseApiService.js\r\n import axiosClient from '../client/axiosClient.js';\r\n import { ErrorHandler } from '../../core/utils/ErrorHandler.js';\r\n import { AppError } from '../../core/utils/ErrorHandler.js';\r\n+import { API_CONFIG } from '../client/apiConfig.js';\r\n \r\n export class BaseApiService {\r\n     constructor(baseURL = '') {\r\n         this.baseURL = baseURL;\r\n@@ -32,9 +33,9 @@\n             throw this.handleError(error);\r\n         }\r\n     }\r\n \r\n-    \r\n+\r\n     async put(endpoint, data = {}, config = {}) {\r\n         try {\r\n             const response = await axiosClient.put(`${this.baseURL}${endpoint}`, data, config);\r\n             return this._formatResponse(response);\r\n"
                },
                {
                    "date": 1733438184050,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,87 @@\n+// src/api/base/BaseApiService.js\r\n+import axiosClient from '../client/axiosClient.js';\r\n+import { ErrorHandler } from '../../core/utils/ErrorHandler.js';\r\n+import { AppError } from '../../core/utils/ErrorHandler.js';\r\n+import { API_CONFIG } from '../client/apiConfig.js';\r\n+\r\n+export class BaseApiService {\r\n+    constructor(baseURL = '') {\r\n+        this.baseURL = baseURL;\r\n+    }\r\n+\r\n+    async get(endpoint, config = {}) {\r\n+        try {\r\n+            const response = await axiosClient.get(`${this.baseURL}${endpoint}`, config);\r\n+            return this._formatResponse(response);\r\n+        } catch (error) {\r\n+            throw this.handleError(error);\r\n+        }\r\n+    }\r\n+\r\n+    async post(endpoint, data = {}, config = {}) {\r\n+        try {\r\n+            // Make sure there's no double slash when constructing the URL\r\n+            const url = `${this.baseURL}${endpoint}`.replace(/\\/+/g, '/');\r\n+            console.log('Making POST request to:', url);\r\n+            console.log('Full URL:', `${API_CONFIG.BASE_URL}${url}`);\r\n+            console.log('Request data:', data);\r\n+            \r\n+            const response = await axiosClient.post(url, data, config);\r\n+            return this._formatResponse(response);\r\n+        } catch (error) {\r\n+            console.error('POST request failed:', error);\r\n+            throw this.handleError(error);\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async put(endpoint, data = {}, config = {}) {\r\n+        try {\r\n+            const response = await axiosClient.put(`${this.baseURL}${endpoint}`, data, config);\r\n+            return this._formatResponse(response);\r\n+        } catch (error) {\r\n+            throw this.handleError(error);\r\n+        }\r\n+    }\r\n+\r\n+    async delete(endpoint, config = {}) {\r\n+        try {\r\n+            const response = await axiosClient.delete(`${this.baseURL}${endpoint}`, config);\r\n+            return this._formatResponse(response);\r\n+        } catch (error) {\r\n+            throw this.handleError(error);\r\n+        }\r\n+    }\r\n+\r\n+    _formatResponse(response) {\r\n+        // Ensure consistent response structure\r\n+        return {\r\n+            success: true,\r\n+            data: response.data,\r\n+            status: response.status,\r\n+            headers: response.headers\r\n+        };\r\n+    }\r\n+\r\n+\r\n+    handleError(error) {\r\n+        const { response } = error;\r\n+        if (response) {\r\n+            const { status, data } = response;\r\n+            switch (status) {\r\n+                case 400:\r\n+                    return new AppError(data.message || 'Invalid request', 'BAD_REQUEST', data);\r\n+                case 401:\r\n+                    return new AppError('Unauthorized access', 'UNAUTHORIZED');\r\n+                case 404:\r\n+                    return new AppError('Resource not found', 'NOT_FOUND');\r\n+                case 500:\r\n+                    return new AppError('Server error', 'SERVER_ERROR');\r\n+                default:\r\n+                    return new AppError('An unexpected error occurred', 'UNKNOWN_ERROR', { originalError: error });\r\n+            }\r\n+        }\r\n+        return new AppError('Network error', 'NETWORK_ERROR', { originalError: error });\r\n+    }\r\n+\r\n+}\r\n"
                },
                {
                    "date": 1733438382132,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n // src/api/base/BaseApiService.js\r\n import axiosClient from '../client/axiosClient.js';\r\n-import { ErrorHandler } from '../../core/utils/ErrorHandler.js';\r\n import { AppError } from '../../core/utils/ErrorHandler.js';\r\n import { API_CONFIG } from '../client/apiConfig.js';\r\n \r\n export class BaseApiService {\r\n@@ -84,91 +83,4 @@\n         return new AppError('Network error', 'NETWORK_ERROR', { originalError: error });\r\n     }\r\n \r\n }\r\n-// src/api/base/BaseApiService.js\r\n-import axiosClient from '../client/axiosClient.js';\r\n-import { ErrorHandler } from '../../core/utils/ErrorHandler.js';\r\n-import { AppError } from '../../core/utils/ErrorHandler.js';\r\n-import { API_CONFIG } from '../client/apiConfig.js';\r\n-\r\n-export class BaseApiService {\r\n-    constructor(baseURL = '') {\r\n-        this.baseURL = baseURL;\r\n-    }\r\n-\r\n-    async get(endpoint, config = {}) {\r\n-        try {\r\n-            const response = await axiosClient.get(`${this.baseURL}${endpoint}`, config);\r\n-            return this._formatResponse(response);\r\n-        } catch (error) {\r\n-            throw this.handleError(error);\r\n-        }\r\n-    }\r\n-\r\n-    async post(endpoint, data = {}, config = {}) {\r\n-        try {\r\n-            // Make sure there's no double slash when constructing the URL\r\n-            const url = `${this.baseURL}${endpoint}`.replace(/\\/+/g, '/');\r\n-            console.log('Making POST request to:', url);\r\n-            console.log('Full URL:', `${API_CONFIG.BASE_URL}${url}`);\r\n-            console.log('Request data:', data);\r\n-            \r\n-            const response = await axiosClient.post(url, data, config);\r\n-            return this._formatResponse(response);\r\n-        } catch (error) {\r\n-            console.error('POST request failed:', error);\r\n-            throw this.handleError(error);\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    async put(endpoint, data = {}, config = {}) {\r\n-        try {\r\n-            const response = await axiosClient.put(`${this.baseURL}${endpoint}`, data, config);\r\n-            return this._formatResponse(response);\r\n-        } catch (error) {\r\n-            throw this.handleError(error);\r\n-        }\r\n-    }\r\n-\r\n-    async delete(endpoint, config = {}) {\r\n-        try {\r\n-            const response = await axiosClient.delete(`${this.baseURL}${endpoint}`, config);\r\n-            return this._formatResponse(response);\r\n-        } catch (error) {\r\n-            throw this.handleError(error);\r\n-        }\r\n-    }\r\n-\r\n-    _formatResponse(response) {\r\n-        // Ensure consistent response structure\r\n-        return {\r\n-            success: true,\r\n-            data: response.data,\r\n-            status: response.status,\r\n-            headers: response.headers\r\n-        };\r\n-    }\r\n-\r\n-\r\n-    handleError(error) {\r\n-        const { response } = error;\r\n-        if (response) {\r\n-            const { status, data } = response;\r\n-            switch (status) {\r\n-                case 400:\r\n-                    return new AppError(data.message || 'Invalid request', 'BAD_REQUEST', data);\r\n-                case 401:\r\n-                    return new AppError('Unauthorized access', 'UNAUTHORIZED');\r\n-                case 404:\r\n-                    return new AppError('Resource not found', 'NOT_FOUND');\r\n-                case 500:\r\n-                    return new AppError('Server error', 'SERVER_ERROR');\r\n-                default:\r\n-                    return new AppError('An unexpected error occurred', 'UNKNOWN_ERROR', { originalError: error });\r\n-            }\r\n-        }\r\n-        return new AppError('Network error', 'NETWORK_ERROR', { originalError: error });\r\n-    }\r\n-\r\n-}\r\n"
                }
            ],
            "date": 1733434072296,
            "name": "Commit-0",
            "content": "// src/api/base/BaseApiService.js\r\nimport axiosClient from '../client/axiosClient.js';\r\nimport { ErrorHandler } from '../../core/utils/ErrorHandler.js';\r\nimport { AppError } from '../../core/utils/ErrorHandler.js';\r\n\r\nexport class BaseApiService {\r\n    constructor(baseURL = '') {\r\n        this.baseURL = baseURL;\r\n    }\r\n\r\n    async get(endpoint, config = {}) {\r\n        try {\r\n            const response = await axiosClient.get(`${this.baseURL}${endpoint}`, config);\r\n            return this._formatResponse(response);\r\n        } catch (error) {\r\n            throw this.handleError(error);\r\n        }\r\n    }\r\n\r\n    async post(endpoint, data = {}, config = {}) {\r\n        try {\r\n            return await axiosClient.post(`${this.baseURL}${endpoint}`, data, config);\r\n        } catch (error) {\r\n            throw this.handleError(error);\r\n        }\r\n    }\r\n\r\n    async put(endpoint, data = {}, config = {}) {\r\n        try {\r\n            return await axiosClient.put(`${this.baseURL}${endpoint}`, data, config);\r\n        } catch (error) {\r\n            throw this.handleError(error);\r\n        }\r\n    }\r\n\r\n    async delete(endpoint, config = {}) {\r\n        try {\r\n            return await axiosClient.delete(`${this.baseURL}${endpoint}`, config);\r\n        } catch (error) {\r\n            throw this.handleError(error);\r\n        }\r\n    }\r\n\r\n    handleError(error) {\r\n        const { response } = error;\r\n        if (response) {\r\n            const { status, data } = response;\r\n            switch (status) {\r\n                case 400:\r\n                    return new AppError(data.message || 'Invalid request', 'BAD_REQUEST', data);\r\n                case 401:\r\n                    return new AppError('Unauthorized access', 'UNAUTHORIZED');\r\n                case 404:\r\n                    return new AppError('Resource not found', 'NOT_FOUND');\r\n                case 500:\r\n                    return new AppError('Server error', 'SERVER_ERROR');\r\n                default:\r\n                    return new AppError('An unexpected error occurred', 'UNKNOWN_ERROR', { originalError: error });\r\n            }\r\n        }\r\n        return new AppError('Network error', 'NETWORK_ERROR', { originalError: error });\r\n    }\r\n}\r\n"
        }
    ]
}