{
    "sourceFile": "frontend/src/js/components/BillReview/BillReviewPage.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1733440518030,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1733440518030,
            "name": "Commit-0",
            "content": "// src/js/components/BillReview/BillReviewPage.js\r\nimport { Api } from \"/src/api/index.js\";\r\nimport { BillPreview } from \"../BillPreview.js\";\r\nimport { API_CONFIG } from '/src/api/client/apiConfig';\r\nimport { gsap } from \"gsap\";\r\nimport Chart from \"chart.js/auto\";\r\nimport { CountUp } from 'countup.js';\r\n\r\nexport class BillReviewPage {\r\n    constructor() {\r\n        this.billData = null;\r\n        this.charts = {};\r\n        this.countUps = {};\r\n        this.resizeTimeout = null;\r\n        this.referenceNumber = sessionStorage.getItem('currentReferenceNumber');\r\n\r\n        // Bind methods\r\n        this.handleResize = this.handleResize.bind(this);\r\n        window.addEventListener(\"resize\", this.handleResize);\r\n    }\r\n\r\n    async initialize() {\r\n        try {\r\n            if (!this.referenceNumber) {\r\n                throw new Error('No reference number available');\r\n            }\r\n            console.log('Initializing BillReview with reference number:', this.referenceNumber);\r\n            console.log('path for bill:', `${API_CONFIG.ENDPOINTS.BILL.GET}/${this.referenceNumber}`);\r\n            const response = await Api.bill.getBillDetails(this.referenceNumber);\r\n            console.log('Bill details:', response.data);\r\n            if (!response || !response.data) {\r\n                throw new Error('No bill data available');\r\n            }\r\n\r\n            this.billData = response.data;\r\n            return true;\r\n        } catch (error) {\r\n            console.error('Failed to initialize BillReview:', error);\r\n            window.toasts?.show('Failed to load bill data', 'error');\r\n            window.router.push('/');\r\n            return false;\r\n        }\r\n    }\r\n\r\n    async render() {\r\n        const initialized = await this.initialize();\r\n        if (!initialized) return;\r\n\r\n        const app = document.getElementById(\"app\");\r\n        app.innerHTML = `\r\n            <div class=\"h-screen w-full overflow-hidden bg-white transition-colors duration-1000 opacity-0\" id=\"bill-review-page\">\r\n                <div class=\"h-full w-full flex flex-col md:flex-row relative\" id=\"main-content\">\r\n                    <!-- Bill Preview Side -->\r\n                    <div class=\"w-full md:w-1/2 h-[45vh] md:h-full overflow-hidden opacity-0\" id=\"bill-preview-container\">\r\n                        <div id=\"bill-preview\" class=\"h-full\"></div>\r\n                    </div>\r\n\r\n                    <!-- Loading Indicator -->\r\n                    <div class=\"absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 text-center z-10\" id=\"loading-indicator\">\r\n                        <div class=\"loading-spinner\"></div>\r\n                        <p class=\"text-emerald-600 font-medium\">Analyzing your bill...</p>\r\n                    </div>\r\n\r\n                    <!-- Insights Container -->\r\n                    <div class=\"fixed md:relative w-full md:w-1/2 h-[60vh] md:h-full bg-gray-50 rounded-t-3xl md:rounded-none \r\n                              shadow-2xl md:shadow-none\" id=\"insights-container\" style=\"bottom: 0;\">\r\n                        <!-- Drag Handle for mobile -->\r\n                        <div class=\"md:hidden w-full flex justify-center py-2 drag-handle\">\r\n                            <div class=\"w-12 h-1.5 rounded-full bg-gray-300\"></div>\r\n                        </div>\r\n\r\n                        <div class=\"h-full flex flex-col p-4 sm:p-6 overflow-auto hide-scrollbar\">\r\n                            <!-- Content will be added by renderInsights() -->\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        `;\r\n\r\n        // Determine if the device is mobile\r\n        const isMobile = window.innerWidth < 768;\r\n\r\n        if (isMobile) {\r\n            this.initializeMobileInteractions();\r\n        }\r\n\r\n        requestAnimationFrame(() => {\r\n            this.attachStyles();\r\n            this.renderInsights();\r\n            this.initializeComponents();\r\n        });\r\n    }\r\n\r\n    renderInsights() {\r\n        const insightsContainer = document.querySelector(\"#insights-container .hide-scrollbar\");\r\n        if (!insightsContainer) return;\r\n\r\n        insightsContainer.innerHTML = `\r\n            <!-- Header Section -->\r\n            ${this.renderHeader()}\r\n\r\n            <!-- Progress Tracker -->\r\n            ${this.renderProgressTracker()}\r\n\r\n            <!-- Bill Metrics -->\r\n            ${this.renderMetricsCards()}\r\n\r\n            <!-- Consumption Chart -->\r\n            ${this.renderConsumptionChart()}\r\n\r\n            <!-- Recommendation Section -->\r\n            ${this.renderSolarQuoteCard()}\r\n        `;\r\n    }\r\n\r\n    renderHeader() {\r\n        return `\r\n            <div class=\"opacity-0\" id=\"insights-header\">\r\n                <div class=\"flex items-center gap-3\">\r\n                    <div class=\"flex-shrink-0\">\r\n                        <div class=\"w-8 h-8 rounded-xl bg-gradient-to-r from-emerald-500 to-emerald-600 \r\n                                  flex items-center justify-center\">\r\n                            <svg class=\"w-4 h-4 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" \r\n                                      d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\" />\r\n                            </svg>\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <h2 class=\"text-base sm:text-lg font-bold text-gray-900\">Bill Analysis</h2>\r\n                        <p class=\"text-xs sm:text-sm text-gray-500\">Understanding your consumption</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        `;\r\n    }\r\n\r\n    renderProgressTracker() {\r\n        const progress = 75; // You might want to calculate this based on analysis status\r\n        return `\r\n            <div class=\"bg-white/70 backdrop-blur rounded-lg shadow-sm p-3 mt-4 opacity-0\" id=\"progress-tracker\">\r\n                <div class=\"flex justify-between items-center\">\r\n                    <div class=\"flex items-center gap-3\">\r\n                        <div class=\"w-8 h-8 rounded-full bg-emerald-600 flex items-center justify-center text-white font-semibold text-sm\">1</div>\r\n                        <div>\r\n                            <p class=\"font-semibold text-gray-900 text-sm\">Bill Review</p>\r\n                            <p class=\"text-xs text-gray-500\">Analyzing patterns</p>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"h-0.5 w-12 bg-gray-200\"></div>\r\n                    <div class=\"flex items-center gap-3\">\r\n                        <div class=\"w-8 h-8 rounded-full bg-gray-200 flex items-center justify-center text-gray-400 font-semibold text-sm\">2</div>\r\n                        <div>\r\n                            <p class=\"font-semibold text-gray-400 text-sm\">Solar Quote</p>\r\n                            <p class=\"text-xs text-gray-400\">Up next</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        `;\r\n    }\r\n\r\n    renderMetricsCards() {\r\n        if (!this.billData) return '';\r\n\r\n        return `\r\n            <div class=\"grid grid-cols-1 sm:grid-cols-2 gap-3 mt-3\">\r\n                <!-- Bill Amount Card -->\r\n                <div class=\"bg-white rounded-lg shadow-sm p-3 opacity-0 consumption-metric\">\r\n                    <div class=\"flex justify-between items-center mb-2\">\r\n                        <div class=\"w-8 h-8 rounded-lg bg-emerald-50 flex items-center justify-center\">\r\n                            <svg class=\"w-4 h-4 text-emerald-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" \r\n                                    d=\"M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\r\n                            </svg>\r\n                        </div>\r\n                        <span class=\"px-2 py-1 bg-emerald-50 text-emerald-600 text-xs rounded-full\">\r\n                            Due in ${this.calculateDueDays()} days\r\n                        </span>\r\n                    </div>\r\n                    <p class=\"text-xs text-gray-500 mb-1\">Current Bill</p>\r\n                    <p class=\"text-lg font-bold text-gray-900\" id=\"bill-amount\">0</p>\r\n                    <div class=\"mt-2 h-1 bg-gray-100 rounded\">\r\n                        <div class=\"h-full bg-emerald-500 rounded\" style=\"width: ${this.calculateBillProgress()}%\"></div>\r\n                    </div>\r\n                </div>\r\n\r\n                <!-- Units Consumed Card -->\r\n                <div class=\"bg-white rounded-lg shadow-sm p-3 opacity-0 consumption-metric\">\r\n                    <div class=\"flex justify-between items-center mb-2\">\r\n                        <div class=\"w-8 h-8 rounded-lg bg-emerald-50 flex items-center justify-center\">\r\n                            <svg class=\"w-4 h-4 text-emerald-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" \r\n                                    d=\"M13 10V3L4 14h7v7l9-11h-7z\" />\r\n                            </svg>\r\n                        </div>\r\n                        <span class=\"px-2 py-1 bg-emerald-50 text-emerald-600 text-xs rounded-full\">\r\n                            ${this.calculateEfficiency()} efficiency\r\n                        </span>\r\n                    </div>\r\n                    <p class=\"text-xs text-gray-500 mb-1\">Units Consumed</p>\r\n                    <p class=\"text-lg font-bold text-gray-900\" id=\"units-consumed\">0</p>\r\n                    <p class=\"text-xs text-gray-500 mt-2\">\r\n                        Rate: ${this.formatCurrency(\r\n            this.billData.ratePerUnit\r\n        )}/kWh\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        `;\r\n    }\r\n\r\n    renderConsumptionChart() {\r\n        return `\r\n            <div class=\"bg-white rounded-lg shadow-sm p-4 mt-3 opacity-0\" id=\"consumption-card\">\r\n                <div class=\"flex justify-between items-center mb-4\">\r\n                    <h3 class=\"text-sm font-semibold text-gray-900\">Consumption Analysis</h3>\r\n                    <div class=\"px-2 py-1 bg-emerald-50 text-emerald-600 rounded-full text-xs font-medium\">\r\n                        ${this.formatChange()}% vs last month\r\n                    </div>\r\n                </div>\r\n                <div class=\"relative h-[200px] sm:h-[250px] w-full\">\r\n                    <canvas id=\"consumption-trend-chart\"></canvas>\r\n                </div>\r\n            </div>\r\n        `;\r\n    }\r\n\r\n    renderSolarQuoteCard() {\r\n        return `\r\n            <div class=\"mt-3 mb-4 md:mb-6 opacity-0\" id=\"next-steps-card\">\r\n                <div class=\"bg-emerald-600 rounded-lg shadow-sm p-4\">\r\n                    <div class=\"relative z-10\">\r\n                        <div class=\"flex items-center gap-3 mb-4\">\r\n                            <div class=\"w-8 h-8 rounded-lg bg-white/10 flex items-center justify-center\">\r\n                                <svg class=\"w-4 h-4 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" \r\n                                        d=\"M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z\" />\r\n                                </svg>\r\n                            </div>\r\n                            <h3 class=\"text-lg font-semibold text-white\">Ready For Your Solar Quote?</h3>\r\n                        </div>\r\n                        \r\n                        <p class=\"text-sm text-white/90 mb-4\">\r\n                            We've analyzed your consumption patterns and can now provide you with a personalized solar solution. \r\n                            Find out how much you could save!\r\n                        </p>\r\n\r\n                        <button \r\n                            onclick=\"window.router.push('/quote')\"\r\n                            class=\"w-full bg-white hover:bg-white/90 text-emerald-700 px-5 py-2.5 rounded-xl font-medium\r\n                                    transition-all duration-300 shadow-sm hover:shadow-md\r\n                                    flex items-center justify-center gap-2 group\"\r\n                        >\r\n                            <span>Generate My Quote</span>\r\n                            <svg class=\"w-4 h-4 transform group-hover:translate-x-1 transition-transform\" \r\n                                fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" \r\n                                    d=\"M17 8l4 4m0 0l-4 4m4-4H3\" />\r\n                            </svg>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        `;\r\n    }\r\n\r\n    initializeComponents() {\r\n        if (!this.billData) {\r\n            console.error(\"No bill data available\");\r\n            window.router.push(\"/\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            this.renderBillPreview();\r\n            this.initializeCharts();\r\n            this.initCounters();\r\n            this.startAnimation().catch((error) => {\r\n                console.error(\"Animation failed:\", error);\r\n            });\r\n        } catch (error) {\r\n            console.error(\"Error initializing components:\", error);\r\n        }\r\n    }\r\n\r\n    renderBillPreview() {\r\n        const billPreviewContainer = document.querySelector(\"#bill-preview\");\r\n        if (!billPreviewContainer) return;\r\n\r\n        const billPreview = new BillPreview(this.billData);\r\n        billPreview.render(billPreviewContainer);\r\n    }\r\n\r\n    initializeCharts() {\r\n        const ctx = document.getElementById(\"consumption-trend-chart\");\r\n        if (!ctx) return;\r\n\r\n        const trendData = this.generateTrendData();\r\n        const isMobile = window.innerWidth < 640;\r\n        const isTablet = window.innerWidth < 1024;\r\n\r\n        // Destroy existing chart if it exists\r\n        if (this.charts.consumption) {\r\n            this.charts.consumption.destroy();\r\n        }\r\n\r\n        // Create new chart with updated styling\r\n        this.charts.consumption = new Chart(ctx, {\r\n            type: \"line\",\r\n            data: {\r\n                labels: trendData.map(item => item.month),\r\n                datasets: [\r\n                    {\r\n                        label: \"Consumption (kWh)\",\r\n                        data: trendData.map(item => item.consumption),\r\n                        borderColor: \"#059669\",\r\n                        backgroundColor: \"rgba(5, 150, 105, 0.1)\",\r\n                        tension: 0.4,\r\n                        fill: true,\r\n                        pointRadius: isMobile ? 2 : isTablet ? 3 : 4,\r\n                        pointHoverRadius: isMobile ? 4 : isTablet ? 5 : 6,\r\n                        pointBackgroundColor: \"#ffffff\",\r\n                        pointBorderColor: \"#059669\",\r\n                        pointBorderWidth: isMobile ? 1 : 2,\r\n                    },\r\n                ],\r\n            },\r\n            options: {\r\n                responsive: true,\r\n                maintainAspectRatio: false,\r\n                interaction: {\r\n                    mode: \"nearest\",\r\n                    intersect: false,\r\n                    axis: \"x\",\r\n                },\r\n                plugins: {\r\n                    legend: {\r\n                        display: false,\r\n                    },\r\n                    tooltip: {\r\n                        enabled: true,\r\n                        backgroundColor: \"white\",\r\n                        titleColor: \"#1f2937\",\r\n                        bodyColor: \"#4b5563\",\r\n                        borderColor: \"#e5e7eb\",\r\n                        borderWidth: 1,\r\n                        padding: isMobile ? 8 : 12,\r\n                        titleFont: {\r\n                            size: isMobile ? 12 : 14,\r\n                            weight: \"bold\",\r\n                        },\r\n                        bodyFont: {\r\n                            size: isMobile ? 11 : 13,\r\n                        },\r\n                        displayColors: false,\r\n                        callbacks: {\r\n                            label: function (context) {\r\n                                return `${context.parsed.y.toLocaleString()} kWh`;\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n                scales: {\r\n                    x: {\r\n                        grid: {\r\n                            display: false,\r\n                        },\r\n                        ticks: {\r\n                            font: {\r\n                                size: isMobile ? 10 : isTablet ? 11 : 12,\r\n                            },\r\n                        },\r\n                    },\r\n                    y: {\r\n                        beginAtZero: true,\r\n                        grid: {\r\n                            color: \"rgba(0, 0, 0, 0.05)\",\r\n                        },\r\n                        ticks: {\r\n                            font: {\r\n                                size: isMobile ? 10 : isTablet ? 11 : 12,\r\n                            },\r\n                            callback: function (value) {\r\n                                return `${value} kWh`;\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        });\r\n    }\r\n\r\n    generateTrendData() {\r\n        const currentMonth = new Date().getMonth();\r\n        const months = [\r\n            \"Jan\",\r\n            \"Feb\",\r\n            \"Mar\",\r\n            \"Apr\",\r\n            \"May\",\r\n            \"Jun\",\r\n            \"Jul\",\r\n            \"Aug\",\r\n            \"Sep\",\r\n            \"Oct\",\r\n            \"Nov\",\r\n            \"Dec\",\r\n        ];\r\n\r\n        // Get last 6 months including current month\r\n        const monthlyData = [];\r\n\r\n        for (let i = 5; i >= 0; i--) {\r\n            const monthIndex = (currentMonth - i + 12) % 12;\r\n            const month = months[monthIndex];\r\n\r\n            // Generate consumption that varies around the current consumption\r\n            // Add randomness but keep it realistic\r\n            const baseConsumption = this.billData.unitsConsumed || 500;\r\n            const variation = baseConsumption * (0.8 + Math.random() * 0.4);\r\n\r\n            monthlyData.push({\r\n                month,\r\n                consumption: Math.round(variation),\r\n            });\r\n        }\r\n\r\n        return monthlyData;\r\n    }\r\n\r\n    initCounters() {\r\n        if (!this.billData) return;\r\n\r\n        const countUpOptions = {\r\n            duration: 2,\r\n            useEasing: true,\r\n            useGrouping: true,\r\n            separator: \",\",\r\n            decimal: \".\",\r\n        };\r\n\r\n        this.countUps = {\r\n            billAmount: new CountUp(\"bill-amount\", this.billData.amount || 0, {\r\n                ...countUpOptions,\r\n                prefix: \"PKR \",\r\n                decimalPlaces: 0,\r\n            }),\r\n            unitsConsumed: new CountUp(\r\n                \"units-consumed\",\r\n                this.billData.unitsConsumed || 0,\r\n                {\r\n                    ...countUpOptions,\r\n                    suffix: \" kWh\",\r\n                    decimalPlaces: 0,\r\n                }\r\n            ),\r\n        };\r\n    }\r\n\r\n    startCountUps() {\r\n        Object.values(this.countUps).forEach((counter) => {\r\n            if (counter && !counter.error) {\r\n                counter.start();\r\n            }\r\n        });\r\n    }\r\n\r\n    async startAnimation() {\r\n        const elements = {\r\n            billPreviewContainer: document.getElementById(\"bill-preview-container\"),\r\n            insightsContainer: document.getElementById(\"insights-container\"),\r\n            loadingIndicator: document.getElementById(\"loading-indicator\"),\r\n            header: document.getElementById(\"insights-header\"),\r\n            progress: document.getElementById(\"progress-tracker\"),\r\n            consumption: document.getElementById(\"consumption-card\"),\r\n            metrics: document.querySelectorAll(\".consumption-metric\"),\r\n            nextSteps: document.getElementById(\"next-steps-card\"),\r\n        };\r\n\r\n        // Detect mobile or desktop\r\n        const isMobile = window.innerWidth < 768;\r\n\r\n        // Reset initial states\r\n        gsap.set([elements.billPreviewContainer, elements.loadingIndicator], {\r\n            opacity: 0,\r\n        });\r\n\r\n        if (isMobile) {\r\n            // Mobile-first animation sequence\r\n            gsap.set(elements.billPreviewContainer, {\r\n                y: -20,\r\n            });\r\n\r\n            gsap.set(elements.insightsContainer, {\r\n                y: \"100%\",\r\n                visibility: \"visible\",\r\n                opacity: 1,\r\n            });\r\n\r\n            const timeline = gsap.timeline({ defaults: { duration: 0.8, ease: \"power2.out\" } });\r\n            await timeline\r\n                .to(elements.billPreviewContainer, { opacity: 1, y: 0, duration: 1 })\r\n                .to(elements.loadingIndicator, { opacity: 1, scale: 1, duration: 0.5 })\r\n                .to(elements.loadingIndicator, { opacity: 0, scale: 0.5, delay: 0.5 })\r\n                .to(elements.insightsContainer, { y: \"0%\", duration: 0.8, ease: \"power4.out\" })\r\n                .add(() => {\r\n                    this.startInsightAnimations(elements);\r\n                });\r\n        } else {\r\n            // Desktop-first animation sequence\r\n            gsap.set(elements.billPreviewContainer, {\r\n                scale: 0.9,\r\n                position: \"absolute\",\r\n                left: \"50%\",\r\n                top: \"50%\",\r\n                xPercent: -50,\r\n                yPercent: -50,\r\n                width: \"47.5%\",\r\n            });\r\n\r\n            gsap.set(elements.insightsContainer, {\r\n                opacity: 0,\r\n                visibility: \"hidden\",\r\n            });\r\n\r\n            const timeline = gsap.timeline({ defaults: { duration: 0.8, ease: \"power2.out\" } });\r\n            await timeline\r\n                .to(elements.billPreviewContainer, { opacity: 1, scale: 1, duration: 1 })\r\n                .to(elements.loadingIndicator, { opacity: 1, scale: 1, duration: 0.5 })\r\n                .to(elements.loadingIndicator, { opacity: 0, scale: 0.5, delay: 1 })\r\n                .to(elements.billPreviewContainer, {\r\n                    left: \"0%\",\r\n                    top: \"0%\",\r\n                    xPercent: 0,\r\n                    yPercent: 0,\r\n                    width: \"50%\",\r\n                    position: \"relative\",\r\n                })\r\n                .add(() => {\r\n                    elements.insightsContainer.style.visibility = \"visible\";\r\n                })\r\n                .to(elements.insightsContainer, { opacity: 1, duration: 0.5 })\r\n                .add(() => {\r\n                    this.startInsightAnimations(elements);\r\n                });\r\n        }\r\n    }\r\n\r\n    startInsightAnimations(elements) {\r\n        const timeline = gsap.timeline({\r\n            defaults: { duration: 0.6, ease: \"power2.out\" },\r\n        });\r\n\r\n        timeline\r\n            .to(elements.header, { opacity: 1, y: 0 }) // Animate header\r\n            .to(elements.progress, { opacity: 1, y: 0 }, \"-=0.4\") // Animate progress tracker\r\n            .to(elements.consumption, { opacity: 1, y: 0 }, \"-=0.3\") // Animate consumption card\r\n            .to(elements.metrics, { opacity: 1, y: 0, stagger: 0.1 }, \"-=0.2\") // Stagger metrics animation\r\n            .add(() => {\r\n                this.startCountUps();\r\n            })\r\n            .to(elements.nextSteps, { opacity: 1, y: 0 }, \"-=0.2\"); // Animate next steps card\r\n    }\r\n\r\n    initializeMobileInteractions() {\r\n        const insightsContainer = document.getElementById(\"insights-container\");\r\n        if (!insightsContainer) return;\r\n\r\n        let startY = 0;\r\n        let currentHeight = 0;\r\n        const initialHeight = \"60vh\";\r\n        const expandedHeight = \"92vh\";\r\n\r\n        // Handle touch start\r\n        const handleTouchStart = (e) => {\r\n            startY = e.touches[0].clientY;\r\n            currentHeight = insightsContainer.getBoundingClientRect().height;\r\n        };\r\n\r\n        // Handle touch move\r\n        const handleTouchMove = (e) => {\r\n            const deltaY = startY - e.touches[0].clientY;\r\n            const newHeight = Math.max(\r\n                Math.min(currentHeight + deltaY, window.innerHeight * 0.92),\r\n                window.innerHeight * 0.3\r\n            );\r\n\r\n            gsap.set(insightsContainer, { height: newHeight, duration: 0 });\r\n        };\r\n\r\n        // Handle touch end\r\n        const handleTouchEnd = () => {\r\n            const finalHeight = insightsContainer.getBoundingClientRect().height;\r\n            const threshold = window.innerHeight * 0.6;\r\n\r\n            gsap.to(insightsContainer, {\r\n                height: finalHeight > threshold ? expandedHeight : initialHeight,\r\n                duration: 0.3,\r\n                ease: \"power2.out\",\r\n            });\r\n        };\r\n\r\n        // Add touch event listeners to the drag handle\r\n        const dragHandle = insightsContainer.querySelector(\".drag-handle\");\r\n        if (dragHandle) {\r\n            dragHandle.addEventListener(\"touchstart\", handleTouchStart, { passive: true });\r\n            dragHandle.addEventListener(\"touchmove\", handleTouchMove, { passive: true });\r\n            dragHandle.addEventListener(\"touchend\", handleTouchEnd);\r\n        }\r\n    }\r\n\r\n    calculateDueDays() {\r\n        if (!this.billData.dueDate) return 0;\r\n        const dueDate = new Date(this.billData.dueDate);\r\n        const today = new Date();\r\n        const diffTime = Math.abs(dueDate - today);\r\n        return Math.ceil(diffTime / (1000 * 60 * 60 * 24));\r\n    }\r\n\r\n    calculateBillProgress() {\r\n        const daysInMonth = 30;\r\n        const today = new Date();\r\n        const billDate = new Date(this.billData.issueDate || today);\r\n        const daysPassed = Math.ceil((today - billDate) / (1000 * 60 * 60 * 24));\r\n        return Math.min((daysPassed / daysInMonth) * 100, 100);\r\n    }\r\n\r\n    calculateEfficiency() {\r\n        const avgConsumption = 500; // Example average consumption\r\n        return this.billData.unitsConsumed <= avgConsumption ? \"High\" : \"Low\";\r\n    }\r\n\r\n    formatCurrency(value) {\r\n        return new Intl.NumberFormat(\"en-PK\", {\r\n            style: \"currency\",\r\n            currency: \"PKR\",\r\n            minimumFractionDigits: 0,\r\n            maximumFractionDigits: 0,\r\n        }).format(value);\r\n    }\r\n\r\n    formatChange() {\r\n        const trendData = this.generateTrendData();\r\n        if (!Array.isArray(trendData)) return \"0.0\";\r\n        const lastTwo = trendData.slice(-2);\r\n        const change =\r\n            ((lastTwo[1].consumption - lastTwo[0].consumption) /\r\n                lastTwo[0].consumption) *\r\n            100;\r\n        return change.toFixed(1);\r\n    }\r\n\r\n    handleResize() {\r\n        clearTimeout(this.resizeTimeout);\r\n        this.resizeTimeout = setTimeout(() => {\r\n            if (this.charts.consumption) {\r\n                this.charts.consumption.resize();\r\n            }\r\n        }, 250);\r\n    }\r\n\r\n    attachStyles() {\r\n        const style = document.createElement('style');\r\n        style.textContent = `\r\n            #bill-review-page {\r\n                opacity: 1 !important;\r\n                visibility: visible !important;\r\n            }\r\n    \r\n            .hide-scrollbar::-webkit-scrollbar {\r\n                display: none;\r\n            }\r\n    \r\n            .hide-scrollbar {\r\n                -ms-overflow-style: none;\r\n                scrollbar-width: none;\r\n            }\r\n    \r\n            .loading-spinner {\r\n                width: 40px;\r\n                height: 40px;\r\n                border: 3px solid rgba(16, 185, 129, 0.1);\r\n                border-radius: 50%;\r\n                border-top-color: #10b981;\r\n                animation: spin 1s ease-in-out infinite;\r\n            }\r\n    \r\n            @keyframes spin {\r\n                to { transform: rotate(360deg); }\r\n            }\r\n    \r\n            .drag-handle {\r\n                cursor: grab;\r\n                touch-action: none;\r\n            }\r\n    \r\n            .drag-handle:active {\r\n                cursor: grabbing;\r\n            }\r\n    \r\n            #insights-container {\r\n                transition: height 0.3s ease;\r\n            }\r\n\r\n            .fade-in {\r\n                opacity: 0;\r\n                transform: translateY(10px);\r\n                transition: opacity 0.3s ease, transform 0.3s ease;\r\n            }\r\n    \r\n            .fade-in.visible {\r\n                opacity: 1;\r\n                transform: translateY(0);\r\n            }\r\n        `;\r\n        document.head.appendChild(style);\r\n    }\r\n\r\n    cleanup() {\r\n        window.removeEventListener(\"resize\", this.handleResize);\r\n\r\n        if (this.charts.consumption) {\r\n            this.charts.consumption.destroy();\r\n        }\r\n\r\n        Object.values(this.countUps).forEach(counter => {\r\n            if (counter) counter.reset();\r\n        });\r\n\r\n        gsap.killTweensOf(\"*\");\r\n\r\n        // Clear the reference number when leaving\r\n        sessionStorage.removeItem('currentReferenceNumber');\r\n    }\r\n}\r\n\r\nexport default BillReviewPage;\r\n"
        }
    ]
}