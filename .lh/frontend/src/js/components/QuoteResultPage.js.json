{
    "sourceFile": "frontend/src/js/components/QuoteResultPage.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1733435542130,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733436942331,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,593 @@\n+// src/js/components/QuoteResultPage.js\r\n+import { gsap } from \"gsap\";\r\n+import Chart from \"chart.js/auto\";\r\n+import { CountUp } from \"countup.js\";\r\n+import { Api } from \"/src/api/index.js\";\r\n+\r\n+export class QuoteResultPage {\r\n+    constructor() {\r\n+        this.charts = {};\r\n+        this.progressBars = {};\r\n+        this.countUps = {};\r\n+        this.quoteData = null;\r\n+    }\r\n+\r\n+    async initialize() {\r\n+        try {\r\n+            // Get reference number from session storage\r\n+            const referenceNumber = sessionStorage.getItem('currentReferenceNumber');\r\n+            if (!referenceNumber) {\r\n+                throw new Error('No reference number available');\r\n+            }\r\n+\r\n+            // Get bill details first\r\n+            const billResponse = await Api.bill.getBillDetails(referenceNumber);\r\n+            if (!billResponse || !billResponse.data || !billResponse.data.data) {\r\n+                throw new Error('Failed to get bill details');\r\n+            }\r\n+\r\n+            // Generate quote using bill details\r\n+            const quoteResponse = await Api.quote.generateQuote(billResponse.data.data);\r\n+            if (!quoteResponse || !quoteResponse.data) {\r\n+                throw new Error('Failed to generate quote');\r\n+            }\r\n+\r\n+            this.quoteData = quoteResponse.data;\r\n+            console.log('Quote generated:', this.quoteData);\r\n+\r\n+            return true;\r\n+        } catch (error) {\r\n+            console.error('Failed to initialize QuoteResultPage:', error);\r\n+            window.toasts?.show('Failed to generate quote', 'error');\r\n+            window.router.push('/bill-review');\r\n+            return false;\r\n+        }\r\n+    }\r\n+\r\n+    async render() {\r\n+        const initialized = await this.initialize();\r\n+        if (!initialized) return;\r\n+\r\n+        const app = document.getElementById(\"app\");\r\n+        app.innerHTML = `\r\n+            <div class=\"h-screen w-full overflow-hidden bg-gray-50\">\r\n+                <div class=\"h-full w-full flex flex-col p-2 sm:p-4 lg:p-8\">\r\n+                    <!-- Header -->\r\n+                    <div class=\"flex-none mb-3 sm:mb-4 lg:mb-6 flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3 sm:gap-4\">\r\n+                        <div>\r\n+                            <h1 class=\"text-lg sm:text-xl lg:text-2xl font-bold text-gray-900\">Solar System Quote</h1>\r\n+                            <p class=\"text-xs sm:text-sm lg:text-base text-gray-500\">Based on your consumption analysis</p>\r\n+                        </div>\r\n+                        <button \r\n+                            onclick=\"window.router.push('/bill-review')\"\r\n+                            class=\"inline-flex items-center px-2 py-1 sm:px-3 sm:py-1.5 lg:px-4 lg:py-2 rounded-lg bg-white border border-gray-200 shadow-sm hover:bg-gray-50 transition-colors text-xs sm:text-sm lg:text-base\"\r\n+                        >\r\n+                            <svg class=\"w-3 h-3 sm:w-4 sm:h-4 mr-1.5 sm:mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n+                                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 19l-7-7 7-7\" />\r\n+                            </svg>\r\n+                            Back\r\n+                        </button>\r\n+                    </div>\r\n+\r\n+                    <!-- Main Content Area -->\r\n+                    <div class=\"flex-1 min-h-0 relative\">\r\n+                        <div class=\"absolute inset-0 overflow-auto hide-scrollbar\">\r\n+                            <div class=\"h-full max-w-[1136px] mx-auto pb-4 sm:pb-6\">\r\n+                                <div class=\"grid grid-cols-1 xl:grid-cols-[1fr,324px] gap-3 sm:gap-4 lg:gap-6\">\r\n+                                    <!-- Left Column -->\r\n+                                    <div class=\"space-y-3 sm:space-y-4 lg:space-y-6\">\r\n+                                        <!-- Top Row -->\r\n+                                        <div class=\"grid grid-cols-1 lg:grid-cols-[325px,1fr] gap-3 sm:gap-4 lg:gap-6\">\r\n+                                            <!-- System Size & Stats Cards -->\r\n+                                            <div class=\"grid grid-cols-2 lg:grid-cols-1 gap-3 sm:gap-4 lg:gap-6\">\r\n+                                                ${this.renderSystemSizeCard()}\r\n+                                                ${this.renderQuickStats()}\r\n+                                            </div>\r\n+                                            \r\n+                                            <!-- Production Chart -->\r\n+                                            <div class=\"bg-white rounded-lg sm:rounded-xl shadow-sm p-3 sm:p-4 lg:p-6\">\r\n+                                                <h3 class=\"text-sm sm:text-base lg:text-lg font-semibold mb-2 sm:mb-3 lg:mb-4\">Energy Production</h3>\r\n+                                                <div class=\"h-[200px] sm:h-[250px] lg:h-[300px]\">\r\n+                                                    <canvas id=\"production-chart\"></canvas>\r\n+                                                </div>\r\n+                                            </div>\r\n+                                        </div>\r\n+                                        <!-- Bottom Row -->\r\n+                                        <div class=\"grid grid-cols-1 lg:grid-cols-[2fr,1fr] gap-3 sm:gap-4 lg:gap-6\">\r\n+                                            <div class=\"bg-white rounded-lg sm:rounded-xl shadow-sm p-3 sm:p-4 lg:p-6\">\r\n+                                                <h3 class=\"text-sm sm:text-base lg:text-lg font-semibold mb-2 sm:mb-3 lg:mb-4\">Savings Timeline</h3>\r\n+                                                <div class=\"h-[200px] sm:h-[250px] lg:h-[300px]\">\r\n+                                                    <canvas id=\"savings-chart\"></canvas>\r\n+                                                </div>\r\n+                                            </div>\r\n+                                            ${this.renderEnvironmentalImpact()}\r\n+                                        </div>\r\n+                                    </div>\r\n+\r\n+                                    <!-- Right Column -->\r\n+                                    <div class=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-1 gap-3 sm:gap-4 lg:gap-6\">\r\n+                                        ${this.renderMonthlyProduction()}\r\n+                                        ${this.renderCostAnalysis()}\r\n+                                    </div>\r\n+                                </div>\r\n+                            </div>\r\n+                        </div>\r\n+                    </div>\r\n+                </div>\r\n+            </div>\r\n+        `;\r\n+\r\n+        this.attachStyles();\r\n+        this.initializeComponents();\r\n+    }\r\n+\r\n+\r\n+    renderSystemSizeCard() {\r\n+        return `\r\n+            <div class=\"bg-white rounded-lg p-4 shadow-sm\">\r\n+                <div class=\"flex flex-col h-full\">\r\n+                    <div class=\"flex items-center justify-between mb-2 sm:mb-4\">\r\n+                        <h3 class=\"text-base sm:text-lg font-semibold\">System Size</h3>\r\n+                        <div class=\"w-8 h-8 sm:w-10 sm:h-10 rounded-full bg-blue-50 flex items-center justify-center\">\r\n+                            <svg class=\"w-5 h-5 sm:w-6 sm:h-6 text-blue-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n+                                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" \r\n+                                    d=\"M13 10V3L4 14h7v7l9-11h-7z\" />\r\n+                            </svg>\r\n+                        </div>\r\n+                    </div>\r\n+                    <div class=\"flex-1 flex flex-col justify-center\">\r\n+                        <div class=\"text-2xl sm:text-3xl font-bold text-gray-900 mb-1 sm:mb-2\">\r\n+                            <span id=\"system-size-value\">0</span>\r\n+                            <span class=\"text-base sm:text-lg text-gray-500\">kW</span>\r\n+                        </div>\r\n+                        <div class=\"text-xs sm:text-sm text-gray-500\">Recommended capacity</div>\r\n+                    </div>\r\n+                    <div id=\"system-size-progress\" class=\"h-2 mt-2 sm:mt-4\"></div>\r\n+                </div>\r\n+            </div>\r\n+        `;\r\n+    }\r\n+\r\n+\r\n+    renderQuickStats() {\r\n+        return `\r\n+            <div class=\"bg-white rounded-lg p-4 shadow-sm\">\r\n+                <div class=\"grid grid-cols-2 gap-3 sm:gap-4\">\r\n+                    <div class=\"text-center\">\r\n+                        <div class=\"text-xl sm:text-3xl font-bold text-emerald-600\" id=\"daily-production\">0</div>\r\n+                        <div class=\"text-xs sm:text-sm text-gray-600\">Daily kWh</div>\r\n+                    </div>\r\n+                    <div class=\"text-center\">\r\n+                        <div class=\"text-xl sm:text-3xl font-bold text-blue-600\" id=\"monthly-savings\">0</div>\r\n+                        <div class=\"text-xs sm:text-sm text-gray-600\">Monthly PKR</div>\r\n+                    </div>\r\n+                </div>\r\n+            </div>\r\n+        `;\r\n+    }\r\n+\r\n+    renderEnvironmentalImpact() {\r\n+        return `\r\n+            <div class=\"bg-gradient-to-br from-emerald-700 to-emerald-500 rounded-lg sm:rounded-xl shadow-sm p-3 sm:p-4 lg:p-6 text-white\">\r\n+                <h3 class=\"text-base sm:text-lg font-semibold mb-2 sm:mb-4\">Environmental Impact</h3>\r\n+                <div class=\"flex-1 flex flex-col justify-center\">\r\n+                    <div class=\"mb-4 sm:mb-6\">\r\n+                        <div class=\"text-xs sm:text-sm opacity-80 mb-1\">CO₂ Offset</div>\r\n+                        <div class=\"text-xl sm:text-3xl font-bold\" id=\"co2-value\">0</div>\r\n+                        <div class=\"w-full bg-white/20 h-1.5 sm:h-2 rounded-full mt-2\">\r\n+                            <div class=\"bg-white h-full rounded-full\" style=\"width: 75%\"></div>\r\n+                        </div>\r\n+                    </div>\r\n+                    <div class=\"grid grid-cols-2 gap-3 sm:gap-4\">\r\n+                        <div>\r\n+                            <div class=\"text-xs sm:text-sm opacity-80\">Trees Equivalent</div>\r\n+                            <div class=\"text-lg sm:text-2xl font-bold\" id=\"trees-value\">0</div>\r\n+                        </div>\r\n+                        <div>\r\n+                            <div class=\"text-xs sm:text-sm opacity-80\">Energy for Homes</div>\r\n+                            <div class=\"text-lg sm:text-2xl font-bold\" id=\"homes-value\">0</div>\r\n+                        </div>\r\n+                    </div>\r\n+                </div>\r\n+            </div>\r\n+        `;\r\n+    }\r\n+    renderMonthlyProduction() {\r\n+        return `\r\n+            <div class=\"bg-white rounded-lg sm:rounded-xl shadow-sm p-3 sm:p-4 lg:p-6\">\r\n+                <h3 class=\"text-sm sm:text-base lg:text-lg font-semibold mb-2 sm:mb-3 lg:mb-4\">Monthly Production</h3>\r\n+                <div class=\"h-[200px] sm:h-[250px]\">\r\n+                    <canvas id=\"monthly-production-chart\"></canvas>\r\n+                </div>\r\n+            </div>\r\n+        `;\r\n+    }\r\n+\r\n+    renderCostAnalysis() {\r\n+        return `\r\n+            <div class=\"bg-gradient-to-br from-blue-700 to-blue-500 rounded-lg sm:rounded-xl shadow-sm p-3 sm:p-4 lg:p-6 text-white\">\r\n+                <h3 class=\"text-base sm:text-lg font-semibold mb-2 sm:mb-4\">Cost Analysis</h3>\r\n+                <div class=\"flex-1 flex flex-col justify-center\">\r\n+                    <div class=\"text-2xl sm:text-4xl font-bold mb-1 sm:mb-2\" id=\"total-cost\">0</div>\r\n+                    <div class=\"text-xs sm:text-sm opacity-80\">Total Investment</div>\r\n+                    <div class=\"mt-3 sm:mt-4 text-xs sm:text-sm bg-white/20 rounded-lg px-2 sm:px-3 py-1.5 sm:py-2 inline-flex items-center\">\r\n+                        <svg class=\"w-3 h-3 sm:w-4 sm:h-4 mr-1.5 sm:mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n+                            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" \r\n+                                d=\"M13 7h8m0 0v8m0-8l-8 8-4-4-6 6\" />\r\n+                        </svg>\r\n+                        30% Tax Credit Available\r\n+                    </div>\r\n+                </div>\r\n+            </div>\r\n+        `;\r\n+    }\r\n+\r\n+    initializeComponents() {\r\n+        if (!this.quoteData) {\r\n+            console.error(\"No quote data available\");\r\n+            window.router.push(\"/bill-review\");\r\n+            return;\r\n+        }\r\n+\r\n+        requestAnimationFrame(() => {\r\n+            try {\r\n+                this.initCharts();\r\n+                this.initCounters();\r\n+                this.startAnimations();\r\n+            } catch (error) {\r\n+                console.error(\"Error initializing components:\", error);\r\n+            }\r\n+        });\r\n+    }\r\n+\r\n+    initCounters() {\r\n+        const countUpOptions = {\r\n+            duration: 2,\r\n+            useEasing: true,\r\n+            useGrouping: true,\r\n+        };\r\n+\r\n+        const configs = [\r\n+            {\r\n+                id: \"system-size-value\",\r\n+                value: this.quoteData.systemDetails.systemSize,\r\n+                decimals: 2\r\n+            },\r\n+            {\r\n+                id: \"daily-production\",\r\n+                value: this.quoteData.production.daily,\r\n+                decimals: 1\r\n+            },\r\n+            {\r\n+                id: \"monthly-savings\",\r\n+                value: this.quoteData.financial.monthlySavings,\r\n+                formatter: value => `PKR ${Math.round(value).toLocaleString()}`\r\n+            },\r\n+            {\r\n+                id: \"total-cost\",\r\n+                value: this.quoteData.financial.systemCost,\r\n+                formatter: value => `PKR ${Math.round(value).toLocaleString()}`\r\n+            },\r\n+            {\r\n+                id: \"co2-value\",\r\n+                value: this.quoteData.environmental.co2Offset,\r\n+                decimals: 1,\r\n+                suffix: \" tons/year\"\r\n+            },\r\n+            {\r\n+                id: \"trees-value\",\r\n+                value: this.quoteData.environmental.treesEquivalent,\r\n+                decimals: 0\r\n+            },\r\n+            {\r\n+                id: \"homes-value\",\r\n+                value: this.quoteData.environmental.homesEquivalent,\r\n+                decimals: 0\r\n+            }\r\n+        ];\r\n+\r\n+        configs.forEach(config => {\r\n+            const element = document.getElementById(config.id);\r\n+            if (!element) {\r\n+                return;\r\n+            }\r\n+\r\n+            this.countUps[config.id] = new CountUp(config.id, config.value, {\r\n+                ...countUpOptions,\r\n+                decimals: config.decimals || 0,\r\n+                formattingFn: config.formatter,\r\n+                suffix: config.suffix\r\n+            });\r\n+        });\r\n+    }\r\n+\r\n+\r\n+\r\n+    startAnimations() {\r\n+        const cards = document.querySelectorAll('.bg-white, .bg-gradient-to-br');\r\n+\r\n+        gsap.fromTo(cards,\r\n+            {\r\n+                opacity: 0,\r\n+                y: 20\r\n+            },\r\n+            {\r\n+                opacity: 1,\r\n+                y: 0,\r\n+                duration: 0.5,\r\n+                stagger: 0.1,\r\n+                ease: \"power2.out\",\r\n+                onComplete: () => {\r\n+                    this.startCountUps();\r\n+                }\r\n+            }\r\n+        );\r\n+    }\r\n+\r\n+    startCountUps() {\r\n+        Object.values(this.countUps).forEach(counter => {\r\n+            if (counter && !counter.error) {\r\n+                counter.start();\r\n+            }\r\n+        });\r\n+    }\r\n+\r\n+    initCharts() {\r\n+        this.initProductionChart();\r\n+        this.initSavingsChart();\r\n+        this.initMonthlyProductionChart();\r\n+    }\r\n+\r\n+    initProductionChart() {\r\n+        const ctx = document.getElementById(\"production-chart\");\r\n+        if (!ctx) {\r\n+            return;\r\n+        }\r\n+\r\n+        const isMobile = window.innerWidth < 768;\r\n+\r\n+        this.charts.production = new Chart(ctx, {\r\n+            type: \"line\",\r\n+            data: {\r\n+                labels: this.quoteData.production.monthly.map(m => m.month),\r\n+                datasets: [\r\n+                    {\r\n+                        label: \"Solar Production\",\r\n+                        data: this.quoteData.production.monthly.map(m => m.production),\r\n+                        borderColor: \"#10b981\",\r\n+                        backgroundColor: \"rgba(16, 185, 129, 0.1)\",\r\n+                        fill: true,\r\n+                        tension: 0.4,\r\n+                        pointRadius: isMobile ? 2 : 4,\r\n+                        pointHoverRadius: isMobile ? 4 : 6,\r\n+                    },\r\n+                    {\r\n+                        label: \"Energy Consumption\",\r\n+                        data: this.quoteData.production.monthly.map(m => m.consumption),\r\n+                        borderColor: \"#ef4444\",\r\n+                        backgroundColor: \"rgba(239, 68, 68, 0.1)\",\r\n+                        fill: true,\r\n+                        tension: 0.4,\r\n+                        pointRadius: isMobile ? 2 : 4,\r\n+                        pointHoverRadius: isMobile ? 4 : 6,\r\n+                    }\r\n+                ]\r\n+            },\r\n+            options: this.getChartOptions()\r\n+        });\r\n+    }\r\n+\r\n+    initSavingsChart() {\r\n+        const ctx = document.getElementById(\"savings-chart\");\r\n+        if (!ctx) {\r\n+            return;\r\n+        }\r\n+\r\n+        this.charts.savings = new Chart(ctx, {\r\n+            type: \"line\",\r\n+            data: {\r\n+                labels: this.quoteData.financial.savingsTimeline.map(y => `Year ${y.year}`),\r\n+                datasets: [\r\n+                    {\r\n+                        label: \"Cumulative Savings\",\r\n+                        data: this.quoteData.financial.savingsTimeline.map(y => y.cumulativeSavings),\r\n+                        borderColor: \"#10b981\",\r\n+                        backgroundColor: \"rgba(16, 185, 129, 0.1)\",\r\n+                        fill: true,\r\n+                        tension: 0.4\r\n+                    },\r\n+                    {\r\n+                        label: \"Initial Investment\",\r\n+                        data: this.quoteData.financial.savingsTimeline.map(() =>\r\n+                            this.quoteData.financial.systemCost),\r\n+                        borderColor: \"#ef4444\",\r\n+                        borderDash: [5, 5],\r\n+                        fill: false\r\n+                    }\r\n+                ]\r\n+            },\r\n+            options: this.getChartOptions('currency')\r\n+        });\r\n+    }\r\n+\r\n+    initMonthlyProductionChart() {\r\n+        const ctx = document.getElementById(\"monthly-production-chart\");\r\n+        if (!ctx) {\r\n+            return;\r\n+        }\r\n+\r\n+        this.charts.monthlyProduction = new Chart(ctx, {\r\n+            type: \"bar\",\r\n+            data: {\r\n+                labels: this.quoteData.production.monthly.map(m => m.month),\r\n+                datasets: [{\r\n+                    label: \"Monthly Production\",\r\n+                    data: this.quoteData.production.monthly.map(m => m.production),\r\n+                    backgroundColor: \"#10b981\"\r\n+                }]\r\n+            },\r\n+            options: {\r\n+                ...this.getChartOptions(),\r\n+                scales: {\r\n+                    y: {\r\n+                        beginAtZero: true,\r\n+                        ticks: {\r\n+                            callback: value => `${value} kWh`\r\n+                        }\r\n+                    }\r\n+                }\r\n+            }\r\n+        });\r\n+    }\r\n+\r\n+    getChartOptions() {\r\n+        const isMobile = window.innerWidth < 768;\r\n+\r\n+        return {\r\n+            responsive: true,\r\n+            maintainAspectRatio: false,\r\n+            plugins: {\r\n+                legend: {\r\n+                    display: true,\r\n+                    position: 'bottom',\r\n+                    labels: {\r\n+                        boxWidth: 12,\r\n+                        padding: 15,\r\n+                        font: {\r\n+                            size: isMobile ? 10 : 12\r\n+                        }\r\n+                    }\r\n+                },\r\n+                tooltip: {\r\n+                    mode: 'index',\r\n+                    intersect: false,\r\n+                    backgroundColor: 'rgba(255, 255, 255, 0.9)',\r\n+                    titleColor: '#111827',\r\n+                    bodyColor: '#4b5563',\r\n+                    borderColor: '#e5e7eb',\r\n+                    borderWidth: 1,\r\n+                    padding: isMobile ? 6 : 8,\r\n+                    bodyFont: {\r\n+                        size: isMobile ? 11 : 13\r\n+                    }\r\n+                }\r\n+            },\r\n+            scales: {\r\n+                x: {\r\n+                    grid: {\r\n+                        display: false\r\n+                    },\r\n+                    ticks: {\r\n+                        font: {\r\n+                            size: isMobile ? 10 : 12\r\n+                        }\r\n+                    }\r\n+                },\r\n+                y: {\r\n+                    beginAtZero: true,\r\n+                    grid: {\r\n+                        color: 'rgba(0, 0, 0, 0.05)'\r\n+                    },\r\n+                    ticks: {\r\n+                        font: {\r\n+                            size: isMobile ? 10 : 12\r\n+                        }\r\n+                    }\r\n+                }\r\n+            }\r\n+        };\r\n+    }\r\n+\r\n+    generateMonthlyData() {\r\n+        const months = [\r\n+            \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\r\n+            \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\r\n+        ];\r\n+\r\n+        const baseProduction = this.billData.estimatedMonthlyProduction;\r\n+        const seasonalFactors = {\r\n+            winter: 0.7,\r\n+            spring: 0.9,\r\n+            summer: 1.2,\r\n+            fall: 0.8\r\n+        };\r\n+\r\n+        const production = months.map((_, index) => {\r\n+            let factor;\r\n+            if (index < 2 || index === 11) factor = seasonalFactors.winter;\r\n+            else if (index < 5) factor = seasonalFactors.spring;\r\n+            else if (index < 8) factor = seasonalFactors.summer;\r\n+            else factor = seasonalFactors.fall;\r\n+\r\n+            return Math.round(baseProduction * factor);\r\n+        });\r\n+\r\n+        const consumption = months.map(() =>\r\n+            Math.round(this.billData.unitsConsumed * (0.9 + Math.random() * 0.2))\r\n+        );\r\n+\r\n+        return { months, production, consumption };\r\n+    }\r\n+\r\n+    calculateCO2Offset() {\r\n+        return this.billData.estimatedAnnualProduction * 0.0007; // Convert to tons\r\n+    }\r\n+\r\n+    attachStyles() {\r\n+        const style = document.createElement('style');\r\n+        style.textContent = `\r\n+            .hide-scrollbar::-webkit-scrollbar {\r\n+                display: none;\r\n+            }\r\n+            \r\n+            .hide-scrollbar {\r\n+                -ms-overflow-style: none;\r\n+                scrollbar-width: none;\r\n+            }\r\n+            \r\n+            @media (max-width: 640px) {\r\n+                .text-2xl { font-size: 1.25rem; }\r\n+                .text-lg { font-size: 1rem; }\r\n+                .p-4 { padding: 0.75rem; }\r\n+                .gap-4 { gap: 0.75rem; }\r\n+            }\r\n+        `;\r\n+        document.head.appendChild(style);\r\n+    }\r\n+\r\n+    cleanup() {\r\n+        Object.values(this.charts).forEach(chart => {\r\n+            if (chart) {\r\n+                chart.destroy();\r\n+            }\r\n+        });\r\n+\r\n+        Object.values(this.progressBars).forEach(bar => {\r\n+            if (bar) {\r\n+                bar.destroy();\r\n+            }\r\n+        });\r\n+\r\n+        Object.values(this.countUps).forEach(counter => {\r\n+            if (counter) {\r\n+                counter.reset();\r\n+            }\r\n+        });\r\n+\r\n+        gsap.killTweensOf(\"*\");\r\n+        window.removeEventListener(\"resize\", this.handleResize);\r\n+    }\r\n+\r\n+    handleResize = () => {\r\n+        clearTimeout(this.resizeTimeout);\r\n+        this.resizeTimeout = setTimeout(() => {\r\n+            Object.values(this.charts).forEach(chart => {\r\n+                if (chart) {\r\n+                    chart.resize();\r\n+                }\r\n+            });\r\n+        }, 250);\r\n+    };\r\n+}\r\n+\r\n+export default QuoteResultPage;\r\n"
                }
            ],
            "date": 1733435542130,
            "name": "Commit-0",
            "content": "// src/js/components/QuoteResultPage.js\r\nimport { gsap } from \"gsap\";\r\nimport Chart from \"chart.js/auto\";\r\nimport { CountUp } from \"countup.js\";\r\nimport { Api } from \"/src/api/index.js\";\r\n\r\nexport class QuoteResultPage {\r\n    constructor() {\r\n        this.charts = {};\r\n        this.progressBars = {};\r\n        this.countUps = {};\r\n        this.quoteData = null;\r\n    }\r\n\r\n    async initialize() {\r\n        try {\r\n            // Get reference number from session storage\r\n            const referenceNumber = sessionStorage.getItem('currentReferenceNumber');\r\n            if (!referenceNumber) {\r\n                throw new Error('No reference number available');\r\n            }\r\n\r\n            // Get bill details first\r\n            const billResponse = await Api.bill.getBillDetails(referenceNumber);\r\n            if (!billResponse || !billResponse.data || !billResponse.data.data) {\r\n                throw new Error('Failed to get bill details');\r\n            }\r\n\r\n            // Generate quote using bill details\r\n            const quoteResponse = await Api.quote.generateQuote(billResponse.data.data);\r\n            if (!quoteResponse || !quoteResponse.data) {\r\n                throw new Error('Failed to generate quote');\r\n            }\r\n\r\n            this.quoteData = quoteResponse.data;\r\n            console.log('Quote generated:', this.quoteData);\r\n\r\n            return true;\r\n        } catch (error) {\r\n            console.error('Failed to initialize QuoteResultPage:', error);\r\n            window.toasts?.show('Failed to generate quote', 'error');\r\n            window.router.push('/bill-review');\r\n            return false;\r\n        }\r\n    }\r\n\r\n    async render() {\r\n        const initialized = await this.initialize();\r\n        if (!initialized) return;\r\n\r\n        const app = document.getElementById(\"app\");\r\n        app.innerHTML = `\r\n            <div class=\"h-screen w-full overflow-hidden bg-gray-50\">\r\n                <div class=\"h-full w-full flex flex-col p-2 sm:p-4 lg:p-8\">\r\n                    <!-- Header -->\r\n                    <div class=\"flex-none mb-3 sm:mb-4 lg:mb-6 flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3 sm:gap-4\">\r\n                        <div>\r\n                            <h1 class=\"text-lg sm:text-xl lg:text-2xl font-bold text-gray-900\">Solar System Quote</h1>\r\n                            <p class=\"text-xs sm:text-sm lg:text-base text-gray-500\">Based on your consumption analysis</p>\r\n                        </div>\r\n                        <button \r\n                            onclick=\"window.router.push('/bill-review')\"\r\n                            class=\"inline-flex items-center px-2 py-1 sm:px-3 sm:py-1.5 lg:px-4 lg:py-2 rounded-lg bg-white border border-gray-200 shadow-sm hover:bg-gray-50 transition-colors text-xs sm:text-sm lg:text-base\"\r\n                        >\r\n                            <svg class=\"w-3 h-3 sm:w-4 sm:h-4 mr-1.5 sm:mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 19l-7-7 7-7\" />\r\n                            </svg>\r\n                            Back\r\n                        </button>\r\n                    </div>\r\n\r\n                    <!-- Main Content Area -->\r\n                    <div class=\"flex-1 min-h-0 relative\">\r\n                        <div class=\"absolute inset-0 overflow-auto hide-scrollbar\">\r\n                            <div class=\"h-full max-w-[1136px] mx-auto pb-4 sm:pb-6\">\r\n                                <div class=\"grid grid-cols-1 xl:grid-cols-[1fr,324px] gap-3 sm:gap-4 lg:gap-6\">\r\n                                    <!-- Left Column -->\r\n                                    <div class=\"space-y-3 sm:space-y-4 lg:space-y-6\">\r\n                                        <!-- Top Row -->\r\n                                        <div class=\"grid grid-cols-1 lg:grid-cols-[325px,1fr] gap-3 sm:gap-4 lg:gap-6\">\r\n                                            <!-- System Size & Stats Cards -->\r\n                                            <div class=\"grid grid-cols-2 lg:grid-cols-1 gap-3 sm:gap-4 lg:gap-6\">\r\n                                                ${this.renderSystemSizeCard()}\r\n                                                ${this.renderQuickStats()}\r\n                                            </div>\r\n                                            \r\n                                            <!-- Production Chart -->\r\n                                            <div class=\"bg-white rounded-lg sm:rounded-xl shadow-sm p-3 sm:p-4 lg:p-6\">\r\n                                                <h3 class=\"text-sm sm:text-base lg:text-lg font-semibold mb-2 sm:mb-3 lg:mb-4\">Energy Production</h3>\r\n                                                <div class=\"h-[200px] sm:h-[250px] lg:h-[300px]\">\r\n                                                    <canvas id=\"production-chart\"></canvas>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                        <!-- Bottom Row -->\r\n                                        <div class=\"grid grid-cols-1 lg:grid-cols-[2fr,1fr] gap-3 sm:gap-4 lg:gap-6\">\r\n                                            <div class=\"bg-white rounded-lg sm:rounded-xl shadow-sm p-3 sm:p-4 lg:p-6\">\r\n                                                <h3 class=\"text-sm sm:text-base lg:text-lg font-semibold mb-2 sm:mb-3 lg:mb-4\">Savings Timeline</h3>\r\n                                                <div class=\"h-[200px] sm:h-[250px] lg:h-[300px]\">\r\n                                                    <canvas id=\"savings-chart\"></canvas>\r\n                                                </div>\r\n                                            </div>\r\n                                            ${this.renderEnvironmentalImpact()}\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <!-- Right Column -->\r\n                                    <div class=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-1 gap-3 sm:gap-4 lg:gap-6\">\r\n                                        ${this.renderMonthlyProduction()}\r\n                                        ${this.renderCostAnalysis()}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        `;\r\n\r\n        this.attachStyles();\r\n        this.initializeComponents();\r\n    }\r\n\r\n\r\n    renderSystemSizeCard() {\r\n        return `\r\n            <div class=\"bg-white rounded-lg p-4 shadow-sm\">\r\n                <div class=\"flex flex-col h-full\">\r\n                    <div class=\"flex items-center justify-between mb-2 sm:mb-4\">\r\n                        <h3 class=\"text-base sm:text-lg font-semibold\">System Size</h3>\r\n                        <div class=\"w-8 h-8 sm:w-10 sm:h-10 rounded-full bg-blue-50 flex items-center justify-center\">\r\n                            <svg class=\"w-5 h-5 sm:w-6 sm:h-6 text-blue-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" \r\n                                    d=\"M13 10V3L4 14h7v7l9-11h-7z\" />\r\n                            </svg>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"flex-1 flex flex-col justify-center\">\r\n                        <div class=\"text-2xl sm:text-3xl font-bold text-gray-900 mb-1 sm:mb-2\">\r\n                            <span id=\"system-size-value\">0</span>\r\n                            <span class=\"text-base sm:text-lg text-gray-500\">kW</span>\r\n                        </div>\r\n                        <div class=\"text-xs sm:text-sm text-gray-500\">Recommended capacity</div>\r\n                    </div>\r\n                    <div id=\"system-size-progress\" class=\"h-2 mt-2 sm:mt-4\"></div>\r\n                </div>\r\n            </div>\r\n        `;\r\n    }\r\n\r\n\r\n    renderQuickStats() {\r\n        return `\r\n            <div class=\"bg-white rounded-lg p-4 shadow-sm\">\r\n                <div class=\"grid grid-cols-2 gap-3 sm:gap-4\">\r\n                    <div class=\"text-center\">\r\n                        <div class=\"text-xl sm:text-3xl font-bold text-emerald-600\" id=\"daily-production\">0</div>\r\n                        <div class=\"text-xs sm:text-sm text-gray-600\">Daily kWh</div>\r\n                    </div>\r\n                    <div class=\"text-center\">\r\n                        <div class=\"text-xl sm:text-3xl font-bold text-blue-600\" id=\"monthly-savings\">0</div>\r\n                        <div class=\"text-xs sm:text-sm text-gray-600\">Monthly PKR</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        `;\r\n    }\r\n\r\n    renderEnvironmentalImpact() {\r\n        return `\r\n            <div class=\"bg-gradient-to-br from-emerald-700 to-emerald-500 rounded-lg sm:rounded-xl shadow-sm p-3 sm:p-4 lg:p-6 text-white\">\r\n                <h3 class=\"text-base sm:text-lg font-semibold mb-2 sm:mb-4\">Environmental Impact</h3>\r\n                <div class=\"flex-1 flex flex-col justify-center\">\r\n                    <div class=\"mb-4 sm:mb-6\">\r\n                        <div class=\"text-xs sm:text-sm opacity-80 mb-1\">CO₂ Offset</div>\r\n                        <div class=\"text-xl sm:text-3xl font-bold\" id=\"co2-value\">0</div>\r\n                        <div class=\"w-full bg-white/20 h-1.5 sm:h-2 rounded-full mt-2\">\r\n                            <div class=\"bg-white h-full rounded-full\" style=\"width: 75%\"></div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"grid grid-cols-2 gap-3 sm:gap-4\">\r\n                        <div>\r\n                            <div class=\"text-xs sm:text-sm opacity-80\">Trees Equivalent</div>\r\n                            <div class=\"text-lg sm:text-2xl font-bold\" id=\"trees-value\">0</div>\r\n                        </div>\r\n                        <div>\r\n                            <div class=\"text-xs sm:text-sm opacity-80\">Energy for Homes</div>\r\n                            <div class=\"text-lg sm:text-2xl font-bold\" id=\"homes-value\">0</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        `;\r\n    }\r\n    renderMonthlyProduction() {\r\n        return `\r\n            <div class=\"bg-white rounded-lg sm:rounded-xl shadow-sm p-3 sm:p-4 lg:p-6\">\r\n                <h3 class=\"text-sm sm:text-base lg:text-lg font-semibold mb-2 sm:mb-3 lg:mb-4\">Monthly Production</h3>\r\n                <div class=\"h-[200px] sm:h-[250px]\">\r\n                    <canvas id=\"monthly-production-chart\"></canvas>\r\n                </div>\r\n            </div>\r\n        `;\r\n    }\r\n\r\n    renderCostAnalysis() {\r\n        return `\r\n            <div class=\"bg-gradient-to-br from-blue-700 to-blue-500 rounded-lg sm:rounded-xl shadow-sm p-3 sm:p-4 lg:p-6 text-white\">\r\n                <h3 class=\"text-base sm:text-lg font-semibold mb-2 sm:mb-4\">Cost Analysis</h3>\r\n                <div class=\"flex-1 flex flex-col justify-center\">\r\n                    <div class=\"text-2xl sm:text-4xl font-bold mb-1 sm:mb-2\" id=\"total-cost\">0</div>\r\n                    <div class=\"text-xs sm:text-sm opacity-80\">Total Investment</div>\r\n                    <div class=\"mt-3 sm:mt-4 text-xs sm:text-sm bg-white/20 rounded-lg px-2 sm:px-3 py-1.5 sm:py-2 inline-flex items-center\">\r\n                        <svg class=\"w-3 h-3 sm:w-4 sm:h-4 mr-1.5 sm:mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" \r\n                                d=\"M13 7h8m0 0v8m0-8l-8 8-4-4-6 6\" />\r\n                        </svg>\r\n                        30% Tax Credit Available\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        `;\r\n    }\r\n\r\n    initializeComponents() {\r\n        if (!this.quoteData) {\r\n            console.error(\"No quote data available\");\r\n            window.router.push(\"/bill-review\");\r\n            return;\r\n        }\r\n\r\n        requestAnimationFrame(() => {\r\n            try {\r\n                this.initCharts();\r\n                this.initCounters();\r\n                this.startAnimations();\r\n            } catch (error) {\r\n                console.error(\"Error initializing components:\", error);\r\n            }\r\n        });\r\n    }\r\n\r\n    initCounters() {\r\n        const countUpOptions = {\r\n            duration: 2,\r\n            useEasing: true,\r\n            useGrouping: true,\r\n        };\r\n\r\n        const configs = [\r\n            {\r\n                id: \"system-size-value\",\r\n                value: this.quoteData.systemDetails.systemSize,\r\n                decimals: 2\r\n            },\r\n            {\r\n                id: \"daily-production\",\r\n                value: this.quoteData.production.daily,\r\n                decimals: 1\r\n            },\r\n            {\r\n                id: \"monthly-savings\",\r\n                value: this.quoteData.financial.monthlySavings,\r\n                formatter: value => `PKR ${Math.round(value).toLocaleString()}`\r\n            },\r\n            {\r\n                id: \"total-cost\",\r\n                value: this.quoteData.financial.systemCost,\r\n                formatter: value => `PKR ${Math.round(value).toLocaleString()}`\r\n            },\r\n            {\r\n                id: \"co2-value\",\r\n                value: this.quoteData.environmental.co2Offset,\r\n                decimals: 1,\r\n                suffix: \" tons/year\"\r\n            },\r\n            {\r\n                id: \"trees-value\",\r\n                value: this.quoteData.environmental.treesEquivalent,\r\n                decimals: 0\r\n            },\r\n            {\r\n                id: \"homes-value\",\r\n                value: this.quoteData.environmental.homesEquivalent,\r\n                decimals: 0\r\n            }\r\n        ];\r\n\r\n        configs.forEach(config => {\r\n            const element = document.getElementById(config.id);\r\n            if (!element) {\r\n                return;\r\n            }\r\n\r\n            this.countUps[config.id] = new CountUp(config.id, config.value, {\r\n                ...countUpOptions,\r\n                decimals: config.decimals || 0,\r\n                formattingFn: config.formatter,\r\n                suffix: config.suffix\r\n            });\r\n        });\r\n    }\r\n\r\n\r\n\r\n    startAnimations() {\r\n        const cards = document.querySelectorAll('.bg-white, .bg-gradient-to-br');\r\n\r\n        gsap.fromTo(cards,\r\n            {\r\n                opacity: 0,\r\n                y: 20\r\n            },\r\n            {\r\n                opacity: 1,\r\n                y: 0,\r\n                duration: 0.5,\r\n                stagger: 0.1,\r\n                ease: \"power2.out\",\r\n                onComplete: () => {\r\n                    this.startCountUps();\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    startCountUps() {\r\n        Object.values(this.countUps).forEach(counter => {\r\n            if (counter && !counter.error) {\r\n                counter.start();\r\n            }\r\n        });\r\n    }\r\n\r\n    initCharts() {\r\n        this.initProductionChart();\r\n        this.initSavingsChart();\r\n        this.initMonthlyProductionChart();\r\n    }\r\n\r\n    initProductionChart() {\r\n        const ctx = document.getElementById(\"production-chart\");\r\n        if (!ctx) {\r\n            return;\r\n        }\r\n\r\n        const isMobile = window.innerWidth < 768;\r\n\r\n        this.charts.production = new Chart(ctx, {\r\n            type: \"line\",\r\n            data: {\r\n                labels: this.quoteData.production.monthly.map(m => m.month),\r\n                datasets: [\r\n                    {\r\n                        label: \"Solar Production\",\r\n                        data: this.quoteData.production.monthly.map(m => m.production),\r\n                        borderColor: \"#10b981\",\r\n                        backgroundColor: \"rgba(16, 185, 129, 0.1)\",\r\n                        fill: true,\r\n                        tension: 0.4,\r\n                        pointRadius: isMobile ? 2 : 4,\r\n                        pointHoverRadius: isMobile ? 4 : 6,\r\n                    },\r\n                    {\r\n                        label: \"Energy Consumption\",\r\n                        data: this.quoteData.production.monthly.map(m => m.consumption),\r\n                        borderColor: \"#ef4444\",\r\n                        backgroundColor: \"rgba(239, 68, 68, 0.1)\",\r\n                        fill: true,\r\n                        tension: 0.4,\r\n                        pointRadius: isMobile ? 2 : 4,\r\n                        pointHoverRadius: isMobile ? 4 : 6,\r\n                    }\r\n                ]\r\n            },\r\n            options: this.getChartOptions()\r\n        });\r\n    }\r\n\r\n    initSavingsChart() {\r\n        const ctx = document.getElementById(\"savings-chart\");\r\n        if (!ctx) {\r\n            return;\r\n        }\r\n\r\n        this.charts.savings = new Chart(ctx, {\r\n            type: \"line\",\r\n            data: {\r\n                labels: this.quoteData.financial.savingsTimeline.map(y => `Year ${y.year}`),\r\n                datasets: [\r\n                    {\r\n                        label: \"Cumulative Savings\",\r\n                        data: this.quoteData.financial.savingsTimeline.map(y => y.cumulativeSavings),\r\n                        borderColor: \"#10b981\",\r\n                        backgroundColor: \"rgba(16, 185, 129, 0.1)\",\r\n                        fill: true,\r\n                        tension: 0.4\r\n                    },\r\n                    {\r\n                        label: \"Initial Investment\",\r\n                        data: this.quoteData.financial.savingsTimeline.map(() =>\r\n                            this.quoteData.financial.systemCost),\r\n                        borderColor: \"#ef4444\",\r\n                        borderDash: [5, 5],\r\n                        fill: false\r\n                    }\r\n                ]\r\n            },\r\n            options: this.getChartOptions('currency')\r\n        });\r\n    }\r\n\r\n    initMonthlyProductionChart() {\r\n        const ctx = document.getElementById(\"monthly-production-chart\");\r\n        if (!ctx) {\r\n            return;\r\n        }\r\n\r\n        this.charts.monthlyProduction = new Chart(ctx, {\r\n            type: \"bar\",\r\n            data: {\r\n                labels: this.quoteData.production.monthly.map(m => m.month),\r\n                datasets: [{\r\n                    label: \"Monthly Production\",\r\n                    data: this.quoteData.production.monthly.map(m => m.production),\r\n                    backgroundColor: \"#10b981\"\r\n                }]\r\n            },\r\n            options: {\r\n                ...this.getChartOptions(),\r\n                scales: {\r\n                    y: {\r\n                        beginAtZero: true,\r\n                        ticks: {\r\n                            callback: value => `${value} kWh`\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    getChartOptions() {\r\n        const isMobile = window.innerWidth < 768;\r\n\r\n        return {\r\n            responsive: true,\r\n            maintainAspectRatio: false,\r\n            plugins: {\r\n                legend: {\r\n                    display: true,\r\n                    position: 'bottom',\r\n                    labels: {\r\n                        boxWidth: 12,\r\n                        padding: 15,\r\n                        font: {\r\n                            size: isMobile ? 10 : 12\r\n                        }\r\n                    }\r\n                },\r\n                tooltip: {\r\n                    mode: 'index',\r\n                    intersect: false,\r\n                    backgroundColor: 'rgba(255, 255, 255, 0.9)',\r\n                    titleColor: '#111827',\r\n                    bodyColor: '#4b5563',\r\n                    borderColor: '#e5e7eb',\r\n                    borderWidth: 1,\r\n                    padding: isMobile ? 6 : 8,\r\n                    bodyFont: {\r\n                        size: isMobile ? 11 : 13\r\n                    }\r\n                }\r\n            },\r\n            scales: {\r\n                x: {\r\n                    grid: {\r\n                        display: false\r\n                    },\r\n                    ticks: {\r\n                        font: {\r\n                            size: isMobile ? 10 : 12\r\n                        }\r\n                    }\r\n                },\r\n                y: {\r\n                    beginAtZero: true,\r\n                    grid: {\r\n                        color: 'rgba(0, 0, 0, 0.05)'\r\n                    },\r\n                    ticks: {\r\n                        font: {\r\n                            size: isMobile ? 10 : 12\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    generateMonthlyData() {\r\n        const months = [\r\n            \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\r\n            \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\r\n        ];\r\n\r\n        const baseProduction = this.billData.estimatedMonthlyProduction;\r\n        const seasonalFactors = {\r\n            winter: 0.7,\r\n            spring: 0.9,\r\n            summer: 1.2,\r\n            fall: 0.8\r\n        };\r\n\r\n        const production = months.map((_, index) => {\r\n            let factor;\r\n            if (index < 2 || index === 11) factor = seasonalFactors.winter;\r\n            else if (index < 5) factor = seasonalFactors.spring;\r\n            else if (index < 8) factor = seasonalFactors.summer;\r\n            else factor = seasonalFactors.fall;\r\n\r\n            return Math.round(baseProduction * factor);\r\n        });\r\n\r\n        const consumption = months.map(() =>\r\n            Math.round(this.billData.unitsConsumed * (0.9 + Math.random() * 0.2))\r\n        );\r\n\r\n        return { months, production, consumption };\r\n    }\r\n\r\n    calculateCO2Offset() {\r\n        return this.billData.estimatedAnnualProduction * 0.0007; // Convert to tons\r\n    }\r\n\r\n    attachStyles() {\r\n        const style = document.createElement('style');\r\n        style.textContent = `\r\n            .hide-scrollbar::-webkit-scrollbar {\r\n                display: none;\r\n            }\r\n            \r\n            .hide-scrollbar {\r\n                -ms-overflow-style: none;\r\n                scrollbar-width: none;\r\n            }\r\n            \r\n            @media (max-width: 640px) {\r\n                .text-2xl { font-size: 1.25rem; }\r\n                .text-lg { font-size: 1rem; }\r\n                .p-4 { padding: 0.75rem; }\r\n                .gap-4 { gap: 0.75rem; }\r\n            }\r\n        `;\r\n        document.head.appendChild(style);\r\n    }\r\n\r\n    cleanup() {\r\n        Object.values(this.charts).forEach(chart => {\r\n            if (chart) {\r\n                chart.destroy();\r\n            }\r\n        });\r\n\r\n        Object.values(this.progressBars).forEach(bar => {\r\n            if (bar) {\r\n                bar.destroy();\r\n            }\r\n        });\r\n\r\n        Object.values(this.countUps).forEach(counter => {\r\n            if (counter) {\r\n                counter.reset();\r\n            }\r\n        });\r\n\r\n        gsap.killTweensOf(\"*\");\r\n        window.removeEventListener(\"resize\", this.handleResize);\r\n    }\r\n\r\n    handleResize = () => {\r\n        clearTimeout(this.resizeTimeout);\r\n        this.resizeTimeout = setTimeout(() => {\r\n            Object.values(this.charts).forEach(chart => {\r\n                if (chart) {\r\n                    chart.resize();\r\n                }\r\n            });\r\n        }, 250);\r\n    };\r\n}\r\n\r\nexport default QuoteResultPage;\r\n"
        }
    ]
}